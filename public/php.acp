#TITLE=PHP
;Auto-completion modificado por Iuri Carraro 22/03/2005 - 14:06:10
;Syntaxe válida ao Versão PHP 4.3.2 ou inferior
#CASE=y
#T=if
if(^!){
}
#T=while
while(^!){
}
#T=for
for(^!; ; ){
}
#T=switch
switch(^!){
case :
}
#T=do
do{
}
while(^!);
#T=class
class ^!{
};
#T=struct
struct ^!{
};
#T=try
try{
	^!
} catch (){
}
#T=query
query = "^!";
$res = mysql_query($query);
while($row = mysql_fetch_assoc($res)){
}
#T=res
res = mysql_query("^!");
while($row = mysql_fetch_array($res)){
}
#T=ini
<?
  ^!
?>
#T=ass
// Iuri Carraro Ctrl+D
#T=abs
abs(mixed número)// Valor absoluto
#T=acos
acos(float arg)// Cosseno Inverso (arco cosseno)
#T=acosh
acosh(float arg)// Coseno Hiperbólico Inverso
#T=addcslashes
addcslashes(string str, string charlist)// String entre aspas com barras no estilo C 
#T=addslashes
addslashes(string str)// String entre aspas com barras
#T=aggregate
aggregate(object object, string class_name)//  dynamic class and object aggregation of methods and properties 
#T=aggregate_info
aggregate_info(object object)//  returns an associative array of the methods and properties from each class that has been aggregated to the object. 
#T=aggregate_methods
aggregate_methods(object object, string class_name)//  dynamic class and object aggregation of methods 
#T=aggregate_methods_by_list
aggregate_methods_by_list(object object, string class_name, array methods_list [, bool exclude])//  selective dynamic class methods aggregation to an object 
#T=aggregate_methods_by_regexp
aggregate_methods_by_regexp(object object, string class_name, string regexp [, bool exclude])//  selective class methods aggregation to an object using a regular expression 
#T=aggregate_properties
aggregate_properties(object object, string class_name)//  dynamic aggregation of class properties to an object 
#T=aggregate_properties_by_list
aggregate_properties_by_list(object object, string class_name, array properties_list [, bool exclude])//  selective dynamic class properties aggregation to an object 
#T=aggregate_properties_by_regexp
aggregate_properties_by_regexp(object object, string class_name, string regexp [, bool exclude])//  selective class properties aggregation to an object using a regular expression 
#T=apache_child_terminate
apache_child_terminate(void )// Finaliza o processo Apache depois da requisição
#T=apache_lookup_uri
apache_lookup_uri(string filename)//  Realiza uma requisição parcial para a URI especificada e retorna todas as informações sobre ela 
#T=apache_note
apache_note(string note_name [, string note_value])// Obtém e seta notas de requisição
#T=apache_request_headers
apache_request_headers(void )// Obtem todos os headers HTTP
#T=apache_response_headers
apache_response_headers(void )//  Obtêm todos os headers da resposta HTTP 
#T=apache_setenv
apache_setenv(string variable, string value [, bool walk_to_top])// Configura uma variável no ambiente do sub processo Apache
#T=array
array([mixed ...])// Cria um array 
#T=array_change_key_case
array_change_key_case(array input [, int case])// Retorna um array com todas as chaves string em maiúsculo ou minúsculo
#T=array_chunk
array_chunk(array input, int size [, bool preserve_keys])// Divide um array em pedaços
#T=array_combine
array_combine(array keys, array values)//  Creates an array by using one array for keys and another for its values 
#T=array_count_values
array_count_values(array input)// Conta as frequências de cada valor de um array
#T=array_diff
array_diff(array array1, array array2 [, array ...])// Analisa as diferenças entre arrays
#T=array_diff_assoc
array_diff_assoc(array array1, array array2 [, array ...])// Computes the difference of arrays with additional index check
#T=array_fill
array_fill(int start_index, int num, mixed value)// Preenche um array com valores
#T=array_filter
array_filter(array input [, mixed callback])//  Filtra os elementos de um array utilizando uma função 
#T=array_flip
array_flip(array trans)// Inverte as relações entre chaves e valores
#T=array_intersect
array_intersect(array array1, array array2 [, array ...])// Calcula a interseção entre arrays
#T=array_intersect_assoc
array_intersect_assoc(array array1, array array2 [, array ...])// Computes the intersection of arrays with additional index check
#T=array_key_exists
array_key_exists(mixed key, array search)// Checa se uma chave ou índice existe em um array
#T=array_keys
array_keys(array input [, mixed search_value])// Retorna todas as chaves de um array
#T=array_map
array_map(mixed callback, array arr1 [, array arr2...])//  Aplica uma função em todos os elementos dos arrays dados 
#T=array_merge
array_merge(array array1, array array2 [, array ...])// Funde dois ou mais arrays
#T=array_merge_recursive
array_merge_recursive(array array1, array array2 [, array ...])// Funde dois ou mais arrays recursivamente
#T=array_multisort
array_multisort(array ar1 [, mixed arg [, mixed ... [, array ...]]])// Ordena múltiplos arrays ou arrays multi-dimensionais
#T=array_pad
array_pad(array input, int pad_size, mixed pad_value)//  Expande um array para um certo comprimento utilizando um determinado valor 
#T=array_pop
array_pop(array array)// Retira um elemento do final do array
#T=array_push
array_push(array array, mixed var [, mixed ...])//  Adiciona um ou mais elementos no final de um array 
#T=array_rand
array_rand(array input [, int num_req])//  Retorna um ou mais elementos aleatórios de um array 
#T=array_reduce
array_reduce(array input, mixed callback [, int initial])//  Reduz um array para um único valor através de um processo iterativo utilizando uma função. 
#T=array_reverse
array_reverse(array array [, bool preserve_keys])//  Retorna um array com os elementos na ordem inversa 
#T=array_search
array_search(mixed needle, array haystack [, bool strict])//  Procura por um valor em um array e retorna sua chave correspondente caso seja encontrado 
#T=array_shift
array_shift(array array)//  Retira o primeiro elemento de um array 
#T=array_slice
array_slice(array array, int offset [, int length])// Extrai uma parcela de um array
#T=array_splice
array_splice(array input, int offset [, int length [, array replacement]])//  Remove uma parcela do array e substitui com outros elementos 
#T=array_sum
array_sum(array arr)//  Calcula a soma dos elementos de um array 
#T=array_unique
array_unique(array array)// Remove o valores duplicados de um array
#T=array_unshift
array_unshift(array array, mixed var [, mixed ...])//  Adiciona um ou mais elementos no início de um array 
#T=array_values
array_values(array input)// Retorna todos os valores de um array
#T=array_walk
array_walk(array arr, string func [, mixed userdata])//  Aplica uma determinada funcão em cada elemento de um array 
#T=arsort
arsort(array array [, int sort_flags])//  Ordena um array em ordem descrescente mantendo a associação entre índices e valores 
#T=ascii2ebcdic
ascii2ebcdic(string ascii_str)// Converte uma string de ASCII para EBCDIC
#T=asin
asin(float arg)// Seno Inverso (arco seno)
#T=asinh
asinh(float arg)// Seno Hiperbólico Inverso
#T=asort
asort(array array [, int sort_flags])//  Ordena um array mantendo a associação entre índices e valores 
#T=aspell_check
aspell_check(int dictionary_link, string word)// Check a word [deprecated]
#T=aspell_check_raw
aspell_check_raw(int dictionary_link, string word)//  Check a word without changing its case or trying to trim it [deprecated] 
#T=aspell_new
aspell_new(string master [, string personal])// Load a new dictionary [deprecated]
#T=aspell_suggest
aspell_suggest(int dictionary_link, string word)// Suggest spellings of a word [deprecated]
#T=assert
assert(mixed assertion)// Checks if assertion is FALSE
#T=assert_options
assert_options(int what [, mixed value])// Set/get the various assert flags
#T=atan
atan(float arg)// Tangente Inversa (arco tangente)
#T=atan2
atan2(float y, float x)// Tangente inversa de duas variáveis
#T=atanh
atanh(float arg)// Tangente hiperbólica inversa
#T=base64_decode
base64_decode(string encoded_data)// Decodifica dados codificados com MIME base64
#T=base64_encode
base64_encode(string dados)// Codifica dados com MIME base64
#T=base_convert
base_convert(string number, int frombase, int tobase)// Converte um número entre bases arbitrárias
#T=basename
basename(string path [, string sufixo])// Retorna a parte nome do arquivo do caminho/path
#T=bcadd
bcadd(string operador_da_esquerda, string operador_da_direita [, int escala])// Adicionar dois números de precisão arbitrária
#T=bccomp
bccomp(string operador_da_esquerda, string operador_da_direita [, int escala])// Comparar dois números de precisão arbitrária
#T=bcdiv
bcdiv(string operador_da_esquerda, string operador_da_direita [, int escala])// Dividir dois números de precisão arbitrária
#T=bcmod
bcmod(string operador_da_esquerda, string modulo)//  Obter o módulo de um número com precisão arbitrária 
#T=bcmul
bcmul(string operador_da_esquerda, string operador_da_direita [, int escala])// Multiplicar dois números de precisão arbitrária
#T=bcpow
bcpow(string x, int y [, int escala])//  Elevar um número de precisão arbitrária a outro 
#T=bcpowmod
bcpowmod(string x, string y, string modulus [, int scale])//  Raise an arbitrary precision number to another, reduced by a specified modulus. 
#T=bcscale
bcscale(int escala)//  Configura o paramentro escala para todas as funções bc 
#T=bcsqrt
bcsqrt(string operador [, int scale])//  Obter a raiz quadrada de um número de precisão arbitrária 
#T=bcsub
bcsub(string operador_da_esquerda, string operador_da_direita [, int escala])//  Subtrair um número de precisão arbitrária de outro 
#T=bin2hex
bin2hex(string str)//  Converte um dado binário em hexadecimal 
#T=bind_textdomain_codeset
bind_textdomain_codeset(string domínio, string codificação)//  Define qual caracter de codificação será retornado pelas mensagens do catálogo do DOMÍNIO especificado. 
#T=bindec
bindec(string binary_string)// Binário para decimal
#T=bindtextdomain
bindtextdomain(string domínio, string diretório)// Configura o caminho para um domínio
#T=bzclose
bzclose(resource bz)// Fecha um ponteiro de arquivo bzip2
#T=bzcompress
bzcompress(string source [, int blocksize [, int workfactor]])// Comprime uma string em dados no formato bzip2
#T=bzdecompress
bzdecompress(string source [, int small])// Descomprime dados no formato bzip2
#T=bzerrno
bzerrno(resource bz)// Retorna um número de erro do bzip2
#T=bzerror
bzerror(resource bz)// Retorna o número e string de erro do bzip2 como um array
#T=bzerrstr
bzerrstr(resource bz)// Retorna a string de erro do bzip2
#T=bzflush
bzflush(resource bz)// Força a escrita de todos os dados que estão no buffer
#T=bzopen
bzopen(string filename, string mode)// Abre um arquivo comprimido com bzip2
#T=bzread
bzread(resource bz [, int length])// Leitura binary-safe de um arquivo bzip2
#T=bzwrite
bzwrite(resource bz, string data [, int length])// Escrita binary-safe em um arquivo bzip2
#T=cal_days_in_month
cal_days_in_month(int calendar, int month, int year)// Return the number of days in a month for a given year and calendar
#T=cal_from_jd
cal_from_jd(int jd, int calendar)// Converts from Julian Day Count to a supported calendar
#T=cal_info
cal_info([int calendar])// Returns information about a particular calendar
#T=cal_to_jd
cal_to_jd(int calendar, int month, int day, int year)// Converts from a supported calendar to Julian Day Count
#T=call_user_func
call_user_func(callback function [, mixed parameter [, mixed ...]])//  Call a user function given by the first parameter 
#T=call_user_func_array
call_user_func_array(callback function [, array paramarr])//  Call a user function given with an array of parameters 
#T=call_user_method
call_user_method(string method_name, object obj [, mixed parameter [, mixed ...]])//  Chama um método de usuário num objeto específico [obsoleto] 
#T=call_user_method_array
call_user_method_array(string method_name, object obj [, array paramarr])//  Chama métodos de usuário dado uma matriz de parâmetros [obsoleto] 
#T=ccvs_add
ccvs_add(string session, string invoice, string argtype, string argval)// Add data to a transaction 
#T=ccvs_auth
ccvs_auth(string session, string invoice)//  Perform credit authorization test on a transaction 
#T=ccvs_command
ccvs_command(string session, string type, string argval)//  Performs a command which is peculiar to a single protocol, and thus is not available in the general CCVS API 
#T=ccvs_count
ccvs_count(string session, string type)//  Find out how many transactions of a given type are stored in the system 
#T=ccvs_delete
ccvs_delete(string session, string invoice)// Delete a transaction
#T=ccvs_done
ccvs_done(string sess)// Terminate CCVS engine and do cleanup work
#T=ccvs_init
ccvs_init(string name)// Initialize CCVS for use
#T=ccvs_lookup
ccvs_lookup(string session, string invoice, int inum)//  Look up an item of a particular type in the database # 
#T=ccvs_new
ccvs_new(string session, string invoice)// Create a new, blank transaction 
#T=ccvs_report
ccvs_report(string session, string type)// Return the status of the background communication process 
#T=ccvs_return
ccvs_return(string session, string invoice)//  Transfer funds from the merchant to the credit card holder 
#T=ccvs_reverse
ccvs_reverse(string session, string invoice)//  Perform a full reversal on an already-processed authorization 
#T=ccvs_sale
ccvs_sale(string session, string invoice)//  Transfer funds from the credit card holder to the merchant 
#T=ccvs_status
ccvs_status(string session, string invoice)// Check the status of an invoice
#T=ccvs_textvalue
ccvs_textvalue(string session)// Get text return value for previous function call
#T=ccvs_void
ccvs_void(string session, string invoice)//  Perform a full reversal on a completed transaction 
#T=ceil
ceil(float valor)// Arredonda frações para cima
#T=chdir
chdir(string diretorio)// Muda o diretório
#T=checkdate
checkdate(int month, int day, int year)// Validar uma data Gregoriana
#T=checkdnsrr
checkdnsrr(string host [, string type])//  Check DNS records corresponding to a given Internet host name or IP address 
#T=chgrp
chgrp(string arquivo, mixed grupo)// Modifica o grupo do arquivo
#T=chmod
chmod(string arquivo, int modo)// Modifica as permissões do arquivo
#T=chown
chown(string arquivo, mixed usuario)// Modifica o dono do arquivo
#T=chr
chr(int ascii)// Retorna um caracter específico
#T=chroot
chroot(string diretorio)// Muda o diretório raiz (root)
#T=chunk_split
chunk_split(string body [, int chunklen [, string end]])// Divide uma string em pequenos pedaços
#T=class_exists
class_exists(string class_name)// Checa se uma classe foi definida
#T=clearstatcache
clearstatcache(void )// Limpa as informações em cache de arquivos
#T=closedir
closedir(resource dir_handle)// fechar o handle do diretório
#T=closelog
closelog(void )// Close connection to system logger
#T=com_addref
com_addref(void )//  Increases the components reference counter.
#T=com_get
com_get(resource com_object, string property)//  Gets the value of a COM Component's property 
#T=com_invoke
com_invoke(resource com_object, string function_name [, mixed function parameters, ...])//  Calls a COM component's method. 
#T=com_isenum
com_isenum(object com_module)// Grabs an IEnumVariant
#T=com_load
com_load(string module_name [, string server_name [, int codepage]])//  Creates a new reference to a COM component 
#T=com_load_typelib
com_load_typelib(string typelib_name [, int case_insensitive])// Loads a Typelib
#T=com_release
com_release(void )//  Decreases the components reference counter.
#T=com_set
com_set(resource com_object, string property, mixed value)//  Assigns a value to a COM component's property 
#T=compact
compact(mixed varname [, mixed ...])//  Cria um array contendo variáveis e seus valores 
#T=connection_aborted
connection_aborted(void )// Retorna TRUE se o cliente desconectou
#T=connection_status
connection_status(void )// Retorna o status da conexão
#T=connection_timeout
connection_timeout(void )// Retorna TRUE se o script ultrapassou o limite de tempo
#T=constant
constant(string name)// Retorna o valor de uma constante
#T=convert_cyr_string
convert_cyr_string(string str, string from, string to)//  Converte de um caracter cirílico para outro 
#T=copy
copy(string origem, string destino)// Copia arquivo
#T=cos
cos(float arg)// Coseno
#T=cosh
cosh(float arg)// Coseno hiperbólico
#T=count
count(mixed var)// Conta o número de elementos de uma variável
#T=count_chars
count_chars(string string [, int mode])//  Retorna informações sobre os caracteres usados numa string 
#T=cpdf_add_annotation
cpdf_add_annotation(int pdf_document, float llx, float lly, float urx, float ury, string title, string content [, int mode])// Adds annotation
#T=cpdf_add_outline
cpdf_add_outline(int pdf_document, string text)// Adds bookmark for current page
#T=cpdf_arc
cpdf_arc(int pdf_document, float x-coor, float y-coor, float radius, float start, float end [, int mode])// Draws an arc
#T=cpdf_begin_text
cpdf_begin_text(int pdf_document)// Starts text section
#T=cpdf_circle
cpdf_circle(int pdf_document, float x-coor, float y-coor, float radius [, int mode])// Draw a circle
#T=cpdf_clip
cpdf_clip(int pdf_document)// Clips to current path
#T=cpdf_close
cpdf_close(int pdf_document)// Closes the pdf document
#T=cpdf_closepath
cpdf_closepath(int pdf_document)// Close path
#T=cpdf_closepath_fill_stroke
cpdf_closepath_fill_stroke(int pdf_document)// Close, fill and stroke current path
#T=cpdf_closepath_stroke
cpdf_closepath_stroke(int pdf_document)// Close path and draw line along path
#T=cpdf_continue_text
cpdf_continue_text(int pdf_document, string text)// Output text in next line
#T=cpdf_curveto
cpdf_curveto(int pdf_document, float x1, float y1, float x2, float y2, float x3, float y3 [, int mode])// Draws a curve
#T=cpdf_end_text
cpdf_end_text(int pdf_document)// Ends text section
#T=cpdf_fill
cpdf_fill(int pdf_document)// Fill current path
#T=cpdf_fill_stroke
cpdf_fill_stroke(int pdf_document)// Fill and stroke current path
#T=cpdf_finalize
cpdf_finalize(int pdf_document)// Ends document
#T=cpdf_finalize_page
cpdf_finalize_page(int pdf_document, int page_number)// Ends page
#T=cpdf_global_set_document_limits
cpdf_global_set_document_limits(int maxpages, int maxfonts, int maximages, int maxannotations, int maxobjects)// Sets document limits for any pdf document
#T=cpdf_import_jpeg
cpdf_import_jpeg(int pdf_document, string file_name, float x-coor, float y-coor, float angle, float width, float height, float x-scale, float y-scale [, int mode])// Opens a JPEG image
#T=cpdf_lineto
cpdf_lineto(int pdf_document, float x-coor, float y-coor [, int mode])// Draws a line
#T=cpdf_moveto
cpdf_moveto(int pdf_document, float x-coor, float y-coor [, int mode])// Sets current point
#T=cpdf_newpath
cpdf_newpath(int pdf_document)// Starts a new path
#T=cpdf_open
cpdf_open(int compression [, string filename])// Opens a new pdf document
#T=cpdf_output_buffer
cpdf_output_buffer(int pdf_document)// Outputs the pdf document in memory buffer
#T=cpdf_page_init
cpdf_page_init(int pdf_document, int page_number, int orientation, float height, float width [, float unit])// Starts new page
#T=cpdf_place_inline_image
cpdf_place_inline_image(int pdf_document, int image, float x-coor, float y-coor, float angle, float width, float height [, int mode])// Places an image on the page
#T=cpdf_rect
cpdf_rect(int pdf_document, float x-coor, float y-coor, float width, float height [, int mode])// Draw a rectangle
#T=cpdf_restore
cpdf_restore(int pdf_document)// Restores formerly saved environment
#T=cpdf_rlineto
cpdf_rlineto(int pdf_document, float x-coor, float y-coor [, int mode])// Draws a line
#T=cpdf_rmoveto
cpdf_rmoveto(int pdf_document, float x-coor, float y-coor [, int mode])// Sets current point
#T=cpdf_rotate
cpdf_rotate(int pdf_document, float angle)// Sets rotation
#T=cpdf_rotate_text
cpdf_rotate_text(int pdfdoc, float angle)//  Sets text rotation angle 
#T=cpdf_save
cpdf_save(int pdf_document)// Saves current environment
#T=cpdf_save_to_file
cpdf_save_to_file(int pdf_document, string filename)// Writes the pdf document into a file
#T=cpdf_scale
cpdf_scale(int pdf_document, float x-scale, float y-scale)// Sets scaling
#T=cpdf_set_action_url
cpdf_set_action_url(int pdfdoc, float xll, float yll, float xur, float xur, string url [, int mode])//  Sets hyperlink 
#T=cpdf_set_char_spacing
cpdf_set_char_spacing(int pdf_document, float space)// Sets character spacing
#T=cpdf_set_creator
cpdf_set_creator(string creator)// Sets the creator field in the pdf document
#T=cpdf_set_current_page
cpdf_set_current_page(int pdf_document, int page_number)// Sets current page
#T=cpdf_set_font
cpdf_set_font(int pdf_document, string font_name, float size, string encoding)// Select the current font face and size
#T=cpdf_set_font_directories
cpdf_set_font_directories(int pdfdoc, string pfmdir, string pfbdir)//  Sets directories to search when using external fonts 
#T=cpdf_set_font_map_file
cpdf_set_font_map_file(int pdfdoc, string filename)//  Sets fontname to filename translation map when using external fonts 
#T=cpdf_set_horiz_scaling
cpdf_set_horiz_scaling(int pdf_document, float scale)// Sets horizontal scaling of text
#T=cpdf_set_keywords
cpdf_set_keywords(string keywords)// Sets the keywords field of the pdf document
#T=cpdf_set_leading
cpdf_set_leading(int pdf_document, float distance)// Sets distance between text lines
#T=cpdf_set_page_animation
cpdf_set_page_animation(int pdf_document, int transition, float duration)// Sets duration between pages
#T=cpdf_set_subject
cpdf_set_subject(string subject)// Sets the subject field of the pdf document
#T=cpdf_set_text_matrix
cpdf_set_text_matrix(int pdf_document, array matrix)// Sets the text matrix
#T=cpdf_set_text_pos
cpdf_set_text_pos(int pdf_document, float x-coor, float y-coor [, int mode])// Sets text position
#T=cpdf_set_text_rendering
cpdf_set_text_rendering(int pdf_document [, int mode])// Determines how text is rendered
#T=cpdf_set_text_rise
cpdf_set_text_rise(int pdf_document, float value)// Sets the text rise
#T=cpdf_set_title
cpdf_set_title(string title)// Sets the title field of the pdf document
#T=cpdf_set_viewer_preferences
cpdf_set_viewer_preferences(int pdfdoc, array preferences)//  How to show the document in the viewer 
#T=cpdf_set_word_spacing
cpdf_set_word_spacing(int pdf_document, float space)// Sets spacing between words
#T=cpdf_setdash
cpdf_setdash(int pdf_document, float white, float black)// Sets dash pattern
#T=cpdf_setflat
cpdf_setflat(int pdf_document, float value)// Sets flatness
#T=cpdf_setgray
cpdf_setgray(int pdf_document, float gray_value)// Sets drawing and filling color to gray value
#T=cpdf_setgray_fill
cpdf_setgray_fill(int pdf_document, float value)// Sets filling color to gray value
#T=cpdf_setgray_stroke
cpdf_setgray_stroke(int pdf_document, float gray_value)// Sets drawing color to gray value
#T=cpdf_setlinecap
cpdf_setlinecap(int pdf_document, int value)// Sets linecap parameter
#T=cpdf_setlinejoin
cpdf_setlinejoin(int pdf_document, int value)// Sets linejoin parameter
#T=cpdf_setlinewidth
cpdf_setlinewidth(int pdf_document, float width)// Sets line width
#T=cpdf_setmiterlimit
cpdf_setmiterlimit(int pdf_document, float value)// Sets miter limit
#T=cpdf_setrgbcolor
cpdf_setrgbcolor(int pdf_document, float red_value, float green_value, float blue_value)// Sets drawing and filling color to rgb color value
#T=cpdf_setrgbcolor_fill
cpdf_setrgbcolor_fill(int pdf_document, float red_value, float green_value, float blue_value)// Sets filling color to rgb color value
#T=cpdf_setrgbcolor_stroke
cpdf_setrgbcolor_stroke(int pdf_document, float red_value, float green_value, float blue_value)// Sets drawing color to rgb color value
#T=cpdf_show
cpdf_show(int pdf_document, string text)// Output text at current position
#T=cpdf_show_xy
cpdf_show_xy(int pdf_document, string text, float x-coor, float y-coor [, int mode])// Output text at position
#T=cpdf_stringwidth
cpdf_stringwidth(int pdf_document, string text)// Returns width of text in current font
#T=cpdf_stroke
cpdf_stroke(int pdf_document)// Draw line along path
#T=cpdf_text
cpdf_text(int pdf_document, string text, float x-coor, float y-coor [, int mode [, float orientation [, int alignmode]]])// Output text with parameters
#T=cpdf_translate
cpdf_translate(int pdf_document, float x-coor, float y-coor [, int mode])// Sets origin of coordinate system
#T=crack_check
crack_check([resource dictionary, string password])// Performs an obscure check with the given password
#T=crack_closedict
crack_closedict([resource dictionary])// Closes an open CrackLib dictionary 
#T=crack_getlastmessage
crack_getlastmessage(void )// Returns the message from the last obscure check
#T=crack_opendict
crack_opendict(string dictionary)// Opens a new CrackLib dictionary
#T=crc32
crc32(string str)// Calcula polinômio crc32 de uma string
#T=create_function
create_function(string args, string code)// Create an anonymous (lambda-style) function
#T=crypt
crypt(string str [, string salt])// Único caminho de codificação de string (hashing)
#T=ctype_alnum
ctype_alnum(string text)// Check for alphanumeric character(s)
#T=ctype_alpha
ctype_alpha(string text)// Check for alphabetic character(s)
#T=ctype_cntrl
ctype_cntrl(string text)// Check for control character(s)
#T=ctype_digit
ctype_digit(string text)// Check for numeric character(s)
#T=ctype_graph
ctype_graph(string text)// Check for any printable character(s) except space
#T=ctype_lower
ctype_lower(string text)// Check for lowercase character(s)
#T=ctype_print
ctype_print(string text)// Check for printable character(s)
#T=ctype_punct
ctype_punct(string text)//  Check for any printable character which is not whitespace or an alphanumeric character 
#T=ctype_space
ctype_space(string text)// Check for whitespace character(s)
#T=ctype_upper
ctype_upper(string text)// Check for uppercase character(s)
#T=ctype_xdigit
ctype_xdigit(string text)//  Check for character(s) representing a hexadecimal digit 
#T=curl_close
curl_close(resource ch)// Close a CURL session
#T=curl_errno
curl_errno(resource ch)// Return the last error number
#T=curl_error
curl_error(resource ch)//  Return a string containing the last error for the current session 
#T=curl_exec
curl_exec(resource ch)// Perform a CURL session
#T=curl_getinfo
curl_getinfo(resource ch [, int opt])//  Get information regarding a specific transfer 
#T=curl_init
curl_init([string url])// Initialize a CURL session
#T=curl_multi_add_handle
curl_multi_add_handle(resource mh, resource ch)//  Add a normal cURL handle to a cURL multi handle 
#T=curl_multi_close
curl_multi_close(resource mh)//  Close a set of cURL handles 
#T=curl_multi_exec
curl_multi_exec(resource mh)//  Run the sub-connections of the current cURL handle 
#T=curl_multi_getcontent
curl_multi_getcontent(resource ch)//  Return the content of a cURL handle if CURLOPT_RETURNTRANSFER is set 
#T=curl_multi_info_read
curl_multi_info_read(resource mh)//  Get information about the current transfers 
#T=curl_multi_init
curl_multi_init(void )//  Returns a new cURL multi handle 
#T=curl_multi_remove_handle
curl_multi_remove_handle(resource mh, resource ch)//  Remove a multi handle from a set of cURL handles 
#T=curl_multi_select
curl_multi_select(resource mh [, float timeout])//  Get all the sockets associated with the cURL extension, which can then be "selected" 
#T=curl_setopt
curl_setopt(resource ch, string option, mixed value)// Set an option for a CURL transfer
#T=curl_version
curl_version(void )// Return the current CURL version
#T=current
current(array array)// Retorna o elemento corrente em um array
#T=cybercash_base64_decode
cybercash_base64_decode(string inbuff)// base64 decode data for Cybercash
#T=cybercash_base64_encode
cybercash_base64_encode(string inbuff)// base64 encode data for Cybercash
#T=cybercash_decr
cybercash_decr(string wmk, string sk, string inbuff)// Cybercash decrypt
#T=cybercash_encr
cybercash_encr(string wmk, string sk, string inbuff)// Cybercash encrypt
#T=cyrus_authenticate
cyrus_authenticate(resource connection [, string mechlist [, string service [, string user [, int minssf [, int maxssf]]]]])// Authenticate against a Cyrus IMAP server 
#T=cyrus_bind
cyrus_bind(resource connection, array callbacks)// Bind callbacks to a Cyrus IMAP connection 
#T=cyrus_close
cyrus_close(resource connection)// Close connection to a Cyrus IMAP server 
#T=cyrus_connect
cyrus_connect([string host [, string port [, int flags]]])// Connect to a Cyrus IMAP server 
#T=cyrus_query
cyrus_query(resource connection, string query)// Send a query to a Cyrus IMAP server 
#T=cyrus_unbind
cyrus_unbind(resource connection, string trigger_name)// Unbind ... 
#T=date
date(string format [, int timestamp])// Formata a data e a hora local 
#T=dba_close
dba_close(resource handle)// Close database
#T=dba_delete
dba_delete(string key, resource handle)// Delete entry specified by key
#T=dba_exists
dba_exists(string key, resource handle)// Check whether key exists
#T=dba_fetch
dba_fetch(string key, resource handle)// Fetch data specified by key
#T=dba_firstkey
dba_firstkey(resource handle)// Fetch first key
#T=dba_handlers
dba_handlers(void )// List handlers available
#T=dba_insert
dba_insert(string key, string value, resource handle)// Insert entry
#T=dba_list
dba_list(void )// List all open database files
#T=dba_nextkey
dba_nextkey(resource handle)// Fetch next key
#T=dba_open
dba_open(string path, string mode, string handler [, ...])// Open database
#T=dba_optimize
dba_optimize(resource handle)// Optimize database
#T=dba_popen
dba_popen(string path, string mode, string handler [, ...])// Open database persistently
#T=dba_replace
dba_replace(string key, string value, resource handle)// Replace or insert entry
#T=dba_sync
dba_sync(resource handle)// Synchronize database
#T=dbase_add_record
dbase_add_record(int dbase_identifier, array record)// Add a record to a dBase database
#T=dbase_close
dbase_close(int dbase_identifier)// Close a dBase database
#T=dbase_create
dbase_create(string filename, array fields)// Creates a dBase database
#T=dbase_delete_record
dbase_delete_record(int dbase_identifier, int record)// Deletes a record from a dBase database
#T=dbase_get_record
dbase_get_record(int dbase_identifier, int record)// Gets a record from a dBase database
#T=dbase_get_record_with_names
dbase_get_record_with_names(int dbase_identifier, int record)//  Gets a record from a dBase database as an associative array 
#T=dbase_numfields
dbase_numfields(int dbase_identifier)//  Find out how many fields are in a dBase database 
#T=dbase_numrecords
dbase_numrecords(int dbase_identifier)//  Find out how many records are in a dBase database 
#T=dbase_open
dbase_open(string filename, int flags)// Opens a dBase database
#T=dbase_pack
dbase_pack(int dbase_identifier)// Packs a dBase database
#T=dbase_replace_record
dbase_replace_record(int dbase_identifier, array record, int dbase_record_number)// Replace a record in a dBase database
#T=dblist
dblist(void )//  Describes the DBM-compatible library being used 
#T=dbmclose
dbmclose(resource dbm_identifier)// Closes a dbm database
#T=dbmdelete
dbmdelete(resource dbm_identifier, string key)//  Deletes the value for a key from a DBM database 
#T=dbmexists
dbmexists(resource dbm_identifier, string key)//  Tells if a value exists for a key in a DBM database 
#T=dbmfetch
dbmfetch(resource dbm_identifier, string key)//  Fetches a value for a key from a DBM database 
#T=dbmfirstkey
dbmfirstkey(resource dbm_identifier)//  Retrieves the first key from a DBM database 
#T=dbminsert
dbminsert(resource dbm_identifier, string key, string value)//  Inserts a value for a key in a DBM database 
#T=dbmnextkey
dbmnextkey(resource dbm_identifier, string key)//  Retrieves the next key from a DBM database
#T=dbmopen
dbmopen(string filename, string flags)// Opens a DBM database
#T=dbmreplace
dbmreplace(resource dbm_identifier, string key, string value)//  Replaces the value for a key in a DBM database 
#T=dbplus_add
dbplus_add(resource relation, array tuple)// Add a tuple to a relation
#T=dbplus_aql
dbplus_aql(string query [, string server [, string dbpath]])// Perform AQL query
#T=dbplus_chdir
dbplus_chdir([string newdir])// Get/Set database virtual current directory
#T=dbplus_close
dbplus_close(resource relation)// Close a relation
#T=dbplus_curr
dbplus_curr(resource relation, array tuple)// Get current tuple from relation
#T=dbplus_errcode
dbplus_errcode(int errno)//  Get error string for given errorcode or last error 
#T=dbplus_errno
dbplus_errno(void )// Get error code for last operation
#T=dbplus_find
dbplus_find(resource relation, array constraints, mixed tuple)// Set a constraint on a relation
#T=dbplus_first
dbplus_first(resource relation, array tuple)// Get first tuple from relation
#T=dbplus_flush
dbplus_flush(resource relation)// Flush all changes made on a relation
#T=dbplus_freealllocks
dbplus_freealllocks(void )// Free all locks held by this client
#T=dbplus_freelock
dbplus_freelock(resource relation, string tname)// Release write lock on tuple
#T=dbplus_freerlocks
dbplus_freerlocks(resource relation)// Free all tuple locks on given relation
#T=dbplus_getlock
dbplus_getlock(resource relation, string tname)// Get a write lock on a tuple
#T=dbplus_getunique
dbplus_getunique(resource relation, int uniqueid)// Get an id number unique to a relation
#T=dbplus_info
dbplus_info(resource relation, string key, array )// ???
#T=dbplus_last
dbplus_last(resource relation, array tuple)// Get last tuple from relation
#T=dbplus_lockrel
dbplus_lockrel(resource relation)// Request write lock on relation
#T=dbplus_next
dbplus_next(resource relation, array )// Get next tuple from relation
#T=dbplus_open
dbplus_open(string name)// Open relation file
#T=dbplus_prev
dbplus_prev(resource relation, array tuple)// Get previous tuple from relation
#T=dbplus_rchperm
dbplus_rchperm(resource relation, int mask, string user, string group)// Change relation permissions
#T=dbplus_rcreate
dbplus_rcreate(string name, mixed domlist [, bool overwrite])// Creates a new DB++ relation
#T=dbplus_rcrtexact
dbplus_rcrtexact(string name, resource relation, bool overwrite)// Creates an exact but empty copy of a relation including indices
#T=dbplus_rcrtlike
dbplus_rcrtlike(string name, resource relation, int flag)// Creates an empty copy of a relation with default indices
#T=dbplus_resolve
dbplus_resolve(string relation_name)// Resolve host information for relation
#T=dbplus_restorepos
dbplus_restorepos(resource relation, array tuple)// ???
#T=dbplus_rkeys
dbplus_rkeys(resource relation, mixed domlist)// Specify new primary key for a relation
#T=dbplus_ropen
dbplus_ropen(string name)// Open relation file local
#T=dbplus_rquery
dbplus_rquery(string query, string dbpath)// Perform local (raw) AQL query
#T=dbplus_rrename
dbplus_rrename(resource relation, string name)// Rename a relation
#T=dbplus_rsecindex
dbplus_rsecindex(resource relation, mixed domlist, int type)//  Create a new secondary index for a relation 
#T=dbplus_runlink
dbplus_runlink(resource relation)// Remove relation from filesystem
#T=dbplus_rzap
dbplus_rzap(resource relation)// Remove all tuples from relation
#T=dbplus_savepos
dbplus_savepos(resource relation)// ???
#T=dbplus_setindex
dbplus_setindex(resource relation, string idx_name)// ???
#T=dbplus_setindexbynumber
dbplus_setindexbynumber(resource relation, int idx_number)// ???
#T=dbplus_sql
dbplus_sql(string query, string server, string dbpath)// Perform SQL query
#T=dbplus_tcl
dbplus_tcl(int sid, string script)// Execute TCL code on server side
#T=dbplus_tremove
dbplus_tremove(resource relation, array tuple [, array current])// Remove tuple and return new current tuple
#T=dbplus_undo
dbplus_undo(resource relation)// ???
#T=dbplus_undoprepare
dbplus_undoprepare(resource relation)// ???
#T=dbplus_unlockrel
dbplus_unlockrel(resource relation)// Give up write lock on relation
#T=dbplus_unselect
dbplus_unselect(resource relation)// Remove a constraint from relation
#T=dbplus_update
dbplus_update(resource relation, array old, array new)// Update specified tuple in relation
#T=dbplus_xlockrel
dbplus_xlockrel(resource relation)// Request exclusive lock on relation
#T=dbplus_xunlockrel
dbplus_xunlockrel(resource relation)// Free exclusive lock on relation
#T=dbx_close
dbx_close(object link_identifier)// Close an open connection/database
#T=dbx_compare
dbx_compare(array row_a, array row_b, string column_key [, int flags])// Compare two rows for sorting purposes
#T=dbx_connect
dbx_connect(mixed module, string host, string database, string username, string password [, int persistent])// Open a connection/database
#T=dbx_error
dbx_error(object link_identifier)//  Report the error message of the latest function call in the module (not just in the connection) 
#T=dbx_escape_string
dbx_escape_string(object link_identifier, string text)//  Escape a string so it can safely be used in an sql-statement. 
#T=dbx_query
dbx_query(object link_identifier, string sql_statement [, long flags])// Send a query and fetch all results (if any)
#T=dbx_sort
dbx_sort(object result, string user_compare_function)//  Sort a result from a dbx_query by a custom sort function 
#T=dcgettext
dcgettext(string domínio, string mensagem, int categoria)// Substitui o domínio por um lookup
#T=dcngettext
dcngettext(string domínio, string msgid1, string msgid2, int n, int categoria)// O mesmo que dcgettext, porém permite que você especifique mais de uma mensagem
#T=deaggregate
deaggregate(object object [, string class_name])//  Removes the aggregated methods and properties from an object 
#T=debug_backtrace
debug_backtrace(void )//  Generates a backtrace 
#T=debug_print_backtrace
debug_print_backtrace(void )//  Prints a backtrace 
#T=debugger_off
debugger_off(void )// Disable internal PHP debugger (PHP 3)
#T=debugger_on
debugger_on(string address)// Enable internal PHP debugger (PHP 3)
#T=decbin
decbin(int numero)// Decimal para binário
#T=dechex
dechex(int numero)// Decimal para hexadecimal
#T=decoct
decoct(int numero)// Decimal para octal
#T=define
define(string name, mixed value [, bool case_insensitive])// Define uma constante.
#T=define_syslog_variables
define_syslog_variables(void )// Initializes all syslog related constants
#T=defined
defined(string name)//  Confere se uma constante existe 
#T=deg2rad
deg2rad(float numero)//  Converte o número em graus ao equivalente em radianos 
#T=delete
delete(string file)// Veja unlink() ou unset()
#T=dgettext
dgettext(string domínio, string mensagem)// Sobreescreve o domínio atual
#T=dio_close
dio_close(resource fd)// Closes the file descriptor given by fd
#T=dio_fcntl
dio_fcntl(resource fd, int cmd [, mixed arg])// Performs a c library fcntl on fd
#T=dio_open
dio_open(string filename, int flags [, int mode])//  Opens a new filename with specified permissions of flags and creation permissions of mode 
#T=dio_read
dio_read(resource fd [, int n])//  Reads n bytes from fd and returns them, if n is not specified, reads 1k block 
#T=dio_seek
dio_seek(resource fd, int pos, int whence)// Seeks to pos on fd from whence
#T=dio_stat
dio_stat(resource fd)//  Gets stat information about the file descriptor fd 
#T=dio_tcsetattr
dio_tcsetattr(resource fd, array options)//  Sets terminal attributes and baud rate for a serial port
#T=dio_truncate
dio_truncate(resource fd, int offset)//  Truncates file descriptor fd to offset bytes 
#T=dio_write
dio_write(resource fd, string data [, int len])//  Writes data to fd with optional truncation at length 
#T=dirname
dirname(string path)// Retorna o componente diretório de um caminho/path
#T=disk_free_space
disk_free_space(string diretorio)// Retorna o espaço disponivel no diretório
#T=disk_total_space
disk_total_space(string diretorio)// Retorna o tamanho total do diretório
#T=dl
dl(string library)// Loads a PHP extension at runtime
#T=dngettext
dngettext(string domínio, string msgid1, string msgid2, int n)// O mesmo que dgettext, porém você pode escrever mais de uma mensagem
#T=dns_check_record
dns_check_record(string host [, string type])// Synonym for checkdnsrr()
#T=dns_get_mx
dns_get_mx(string hostname, array mxhosts [, array &weight])// Synonym for getmxrr()
#T=dns_get_record
dns_get_record(string hostname [, int type [, array &authns, array &addtl]])//  Fetch DNS Resource Records associated with a hostname 
#T=domxml_new_doc
domxml_new_doc(string version)//  Creates new empty XML document
#T=domxml_open_file
domxml_open_file(string filename)// Creates a DOM object from XML file
#T=domxml_open_mem
domxml_open_mem(string str)// Creates a DOM object of an XML document
#T=domxml_version
domxml_version(void )//  Get XML library version 
#T=domxml_xmltree
domxml_xmltree(string str)//  Creates a tree of PHP objects from an XML document 
#T=domxml_xslt_stylesheet
domxml_xslt_stylesheet(string xsl document)//  Creates a DomXsltStylesheet Object from a xml document in a string. 
#T=domxml_xslt_stylesheet_doc
domxml_xslt_stylesheet_doc(object DocDocument Object)//  Creates a DomXsltStylesheet Object from a DomDocument Object. 
#T=domxml_xslt_stylesheet_file
domxml_xslt_stylesheet_file(string xsl file)//  Creates a DomXsltStylesheet Object from a xsl document in a file. 
#T=dotnet_load
dotnet_load(string assembly_name [, string datatype_name [, int codepage]])// Loads a DOTNET module
#T=each
each(array array)//  Retorna o par chave/valor corrente de um array e avança o seu cursor
#T=easter_date
easter_date([int year])//  Get UNIX timestamp for midnight on Easter of a given year 
#T=easter_days
easter_days([int year [, int method]])//  Get number of days after March 21 on which Easter falls for a given year 
#T=ebcdic2ascii
ebcdic2ascii(string ebcdic_str)// Converte uma string de EBCDIC para ASCII
#T=echo
echo(string arg1 [, string argn...])// Exibe uma ou mais strings
#T=empty
empty(mixed var)// Determine whether a variable is empty
#T=end
end(array array)//  Faz o ponteiro interno de um array apontar para o seu último elemento 
#T=ereg
ereg(string expressao, string variavel [, array registros])// Casando expressões regulares
#T=ereg_replace
ereg_replace(string expressao, string substituicao, string variavel)// Substituição através de expressões regulares
#T=eregi
eregi(string expressao, string variavel [, array registros])// Casando expressões regulares insensíveis a maiúsculas e minúsculas
#T=eregi_replace
eregi_replace(string expressao, string substituicao, string variavel)// substituição utilizando expressões regulares insensíveis a maiúsculas e minúsculas
#T=error_log
error_log(string message [, int message_type [, string destination [, string extra_headers]]])// Send an error message somewhere
#T=error_reporting
error_reporting([int level])// Sets which PHP errors are reported
#T=escapeshellarg
escapeshellarg(string arg)// escape a string to be used as a shell argument
#T=escapeshellcmd
escapeshellcmd(string command)// escape shell metacharacters
#T=eval
eval(string code_str)// Executa uma string como código PHP
#T=exec
exec(string command [, array output [, int return_var]])// Execute an external program
#T=exif_imagetype
exif_imagetype(string filename)// Determine the type of an image
#T=exif_read_data
exif_read_data(string filename [, string sections [, bool arrays [, bool thumbnail]]])// Reads the EXIF headers from JPEG or TIFF. This way you can read meta data generated by digital cameras.
#T=exif_thumbnail
exif_thumbnail(string filename [, int &width [, int &height [, int &imagetype]]])// Retrieve the embedded thumbnail of a TIFF or JPEG image
#T=exit
exit([string status])// Mostra uma mensagem e termina o script atual
#T=exp
exp(float arg)// Calcula o expoente de e (Neperiano ou base logarítmica natural)
#T=explode
explode(string separator, string string [, int limit])// Divide uma string em strings
#T=expm1
expm1(float numero)//  Retorna exp(numero) - 1, computado de forma que é preciso mesmo quando o valor do número é perto de zero. 
#T=extension_loaded
extension_loaded(string name)// Find out whether an extension is loaded
#T=extract
extract(array var_array [, int extract_type [, string prefix]])//  Importa variáveis para a tabela de símbolos a partir de um array 
#T=ezmlm_hash
ezmlm_hash(string addr)// Calcula o valor do hash necessário para EZMLM
#T=fbsql_affected_rows
fbsql_affected_rows([resource link_identifier])//  Get number of affected rows in previous FrontBase operation 
#T=fbsql_autocommit
fbsql_autocommit(resource link_identifier [, bool OnOff])// Enable or disable autocommit
#T=fbsql_change_user
fbsql_change_user(string user, string password [, string database [, resource link_identifier]])//  Change logged in user of the active connection 
#T=fbsql_close
fbsql_close([resource link_identifier])// Close FrontBase connection
#T=fbsql_commit
fbsql_commit([resource link_identifier])// Commits a transaction to the database
#T=fbsql_connect
fbsql_connect([string hostname [, string username [, string password]]])// Open a connection to a FrontBase Server
#T=fbsql_create_blob
fbsql_create_blob(string blob_data [, resource link_identifier])// Create a BLOB
#T=fbsql_create_clob
fbsql_create_clob(string clob_data [, resource link_identifier])// Create a CLOB
#T=fbsql_create_db
fbsql_create_db(string database_name [, resource link_identifier])// Create a FrontBase database
#T=fbsql_data_seek
fbsql_data_seek(resource result_identifier, int row_number)// Move internal result pointer
#T=fbsql_database
fbsql_database(resource link_identifier [, string database])// Get or set the database name used with a connection
#T=fbsql_database_password
fbsql_database_password(resource link_identifier [, string database_password])//  Sets or retrieves the password for a FrontBase database 
#T=fbsql_db_query
fbsql_db_query(string database, string query [, resource link_identifier])// Send a FrontBase query
#T=fbsql_db_status
fbsql_db_status(string database_name [, resource link_identifier])// Get the status for a given database
#T=fbsql_drop_db
fbsql_drop_db(string database_name [, resource link_identifier])// Drop (delete) a FrontBase database
#T=fbsql_errno
fbsql_errno([resource link_identifier])//  Returns the numerical value of the error message from previous FrontBase operation 
#T=fbsql_error
fbsql_error([resource link_identifier])//  Returns the text of the error message from previous FrontBase operation 
#T=fbsql_fetch_array
fbsql_fetch_array(resource result [, int result_type])//  Fetch a result row as an associative array, a numeric array, or both 
#T=fbsql_fetch_assoc
fbsql_fetch_assoc(resource result)//  Fetch a result row as an associative array 
#T=fbsql_fetch_field
fbsql_fetch_field(resource result [, int field_offset])//  Get column information from a result and return as an object 
#T=fbsql_fetch_lengths
fbsql_fetch_lengths([resource result])//  Get the length of each output in a result 
#T=fbsql_fetch_object
fbsql_fetch_object(resource result [, int result_type])// Fetch a result row as an object
#T=fbsql_fetch_row
fbsql_fetch_row(resource result)// Get a result row as an enumerated array
#T=fbsql_field_flags
fbsql_field_flags(resource result, int field_offset)//  Get the flags associated with the specified field in a result 
#T=fbsql_field_len
fbsql_field_len(resource result, int field_offset)//  Returns the length of the specified field 
#T=fbsql_field_name
fbsql_field_name(resource result, int field_index)//  Get the name of the specified field in a result 
#T=fbsql_field_seek
fbsql_field_seek(resource result, int field_offset)//  Set result pointer to a specified field offset 
#T=fbsql_field_table
fbsql_field_table(resource result, int field_offset)//  Get name of the table the specified field is in 
#T=fbsql_field_type
fbsql_field_type(resource result, int field_offset)//  Get the type of the specified field in a result 
#T=fbsql_free_result
fbsql_free_result(resource result)// Free result memory
#T=fbsql_get_autostart_info
fbsql_get_autostart_info([resource link_identifier])// No description given yet
#T=fbsql_hostname
fbsql_hostname(resource link_identifier [, string host_name])// Get or set the host name used with a connection
#T=fbsql_insert_id
fbsql_insert_id([resource link_identifier])//  Get the id generated from the previous INSERT operation 
#T=fbsql_list_dbs
fbsql_list_dbs([resource link_identifier])//  List databases available on a FrontBase server 
#T=fbsql_list_fields
fbsql_list_fields(string database_name, string table_name [, resource link_identifier])// List FrontBase result fields
#T=fbsql_list_tables
fbsql_list_tables(string database [, resource link_identifier])// List tables in a FrontBase database
#T=fbsql_next_result
fbsql_next_result(resource result_id)//  Move the internal result pointer to the next result 
#T=fbsql_num_fields
fbsql_num_fields(resource result)// Get number of fields in result
#T=fbsql_num_rows
fbsql_num_rows(resource result)// Get number of rows in result
#T=fbsql_password
fbsql_password(resource link_identifier [, string password])// Get or set the user password used with a connection
#T=fbsql_pconnect
fbsql_pconnect([string hostname [, string username [, string password]]])//  Open a persistent connection to a FrontBase Server 
#T=fbsql_query
fbsql_query(string query [, resource link_identifier])// Send a FrontBase query
#T=fbsql_read_blob
fbsql_read_blob(string blob_handle [, resource link_identifier])// Read a BLOB from the database
#T=fbsql_read_clob
fbsql_read_clob(string clob_handle [, resource link_identifier])// Read a CLOB from the database
#T=fbsql_result
fbsql_result(resource result, int row [, mixed field])// Get result data
#T=fbsql_rollback
fbsql_rollback([resource link_identifier])// Rollback a transaction to the database
#T=fbsql_select_db
fbsql_select_db(string database_name [, resource link_identifier])// Select a FrontBase database
#T=fbsql_set_lob_mode
fbsql_set_lob_mode(resource result, string database_name)//  Set the LOB retrieve mode for a FrontBase result set 
#T=fbsql_set_transaction
fbsql_set_transaction(resource link_identifier, int Locking, int Isolation)//  Set the transaction locking and isolation 
#T=fbsql_start_db
fbsql_start_db(string database_name [, resource link_identifier])// Start a database on local or remote server
#T=fbsql_stop_db
fbsql_stop_db(string database_name [, resource link_identifier])// Stop a database on local or remote server
#T=fbsql_tablename
fbsql_tablename(resource result, int i)// Get table name of field
#T=fbsql_username
fbsql_username(resource link_identifier [, string username])// Get or set the host user used with a connection
#T=fbsql_warnings
fbsql_warnings([bool OnOff])// Enable or disable FrontBase warnings
#T=fclose
fclose(int handle)// Fecha um ponteiro de arquivo aberto
#T=fdf_add_doc_javascript
fdf_add_doc_javascript(resource fdfdoc, string script_name, string script_code)// Adds javascript code to the FDF document
#T=fdf_add_template
fdf_add_template(resource fdfdoc, int newpage, string filename, string template, int rename)// Adds a template into the FDF document
#T=fdf_close
fdf_close(resource fdf_document)// Close an FDF document
#T=fdf_create
fdf_create(void )// Create a new FDF document
#T=fdf_enum_values
fdf_enum_values(resource fdfdoc, callback function [, mixed userdata])// Call a user defined function for each document value 
#T=fdf_errno
fdf_errno(void )// Return error code for last fdf operation
#T=fdf_error
fdf_error([int error_code])// Return error description for fdf error code
#T=fdf_get_ap
fdf_get_ap(resource fdf_document, string field, int face, string filename)// Get the appearance of a field
#T=fdf_get_attachment
fdf_get_attachment(resource fdf_document, string fieldname, string savepath)// Extracts uploaded file embedded in the FDF
#T=fdf_get_encoding
fdf_get_encoding(resource fdf_document)// Get the value of the /Encoding key
#T=fdf_get_file
fdf_get_file(resource fdf_document)// Get the value of the /F key
#T=fdf_get_flags
fdf_get_flags(void )// Gets the flags of a field
#T=fdf_get_status
fdf_get_status(resource fdf_document)// Get the value of the /STATUS key
#T=fdf_get_value
fdf_get_value(resource fdf_document, string fieldname [, int which])// Get the value of a field
#T=fdf_get_version
fdf_get_version([resource fdf_document])// Gets version number for FDF api or file 
#T=fdf_header
fdf_header(void )// Sets FDF-specific output headers
#T=fdf_next_field_name
fdf_next_field_name(resource fdf_document [, string fieldname])// Get the next field name
#T=fdf_open
fdf_open(string filename)// Open a FDF document
#T=fdf_open_string
fdf_open_string(string fdf_data)// Read a FDF document from a string
#T=fdf_remove_item
fdf_remove_item(resource fdfdoc, string fieldname, int item)// Sets target frame for form
#T=fdf_save
fdf_save(resource fdf_document [, string filename])// Save a FDF document
#T=fdf_save_string
fdf_save_string(resource fdf_document)// Returns the FDF document as a string
#T=fdf_set_ap
fdf_set_ap(resource fdf_document, string field_name, int face, string filename, int page_number)// Set the appearance of a field
#T=fdf_set_encoding
fdf_set_encoding(resource fdf_document, string encoding)// Sets FDF character encoding
#T=fdf_set_file
fdf_set_file(resource fdf_document, string url [, string target_frame])// Set PDF document to display FDF data in
#T=fdf_set_flags
fdf_set_flags(resource fdf_document, string fieldname, int whichFlags, int newFlags)// Sets a flag of a field
#T=fdf_set_javascript_action
fdf_set_javascript_action(resource fdf_document, string fieldname, int trigger, string script)// Sets an javascript action of a field
#T=fdf_set_opt
fdf_set_opt(resource fdf_document, string fieldname, int element, string str1, string str2)// Sets an option of a field
#T=fdf_set_status
fdf_set_status(resource fdf_document, string status)// Set the value of the /STATUS key
#T=fdf_set_submit_form_action
fdf_set_submit_form_action(resource fdf_document, string fieldname, int trigger, string script, int flags)// Sets a submit form action of a field
#T=fdf_set_target_frame
fdf_set_target_frame(resource fdf_document, string frame_name)// Set target frame for form display
#T=fdf_set_value
fdf_set_value(resource fdf_document, string fieldname, mixed value [, int isName])// Set the value of a field
#T=fdf_set_version
fdf_set_version(resource fdf_document, string version)// Sets version number for a FDF file 
#T=feof
feof(resource handle)// Testa pelo fim-de-arquivo (eof) em um ponteiro de arquivo
#T=fflush
fflush(resource handle)// Força a liberação do buffer para um arquivo
#T=fgetc
fgetc(resource handle)// Le um caracter do ponteiro de arquivo
#T=fgetcsv
fgetcsv(resource handle, int length [, string delimiter [, string enclosure]])// Le uma linha do ponteiro de arquivos e a interpreta por campos CSV
#T=fgets
fgets(resource handle [, int length])// Le uma linha de um ponteiro de arquivo
#T=fgetss
fgetss(resource handle, int length [, string allowable_tags])// Ler uma linha de um ponteiro de arquivo e retira as tags HTML
#T=file
file(string filename [, int use_include_path [, int use_include_path]])// Le um arquivo inteiro para um array
#T=file_exists
file_exists(string nomedoarquivo)// Checa se um arquivo ou diretório existe
#T=file_get_contents
file_get_contents(string filename [, int use_include_path [, resource context]])// Le todo o conteúdo de um arquivo para uma string
#T=file_put_contents
file_put_contents(string filename, string data [, int flags [, resource context]])// Write a string to a file
#T=fileatime
fileatime(string nomedoarquivo)// Obtém o último horário de acesso do arquivo
#T=filectime
filectime(string nomedoarquivo)// Ler o tempo de modificação do inode do arquivo
#T=filegroup
filegroup(string nomedoarquivo)// Lê o grupo do arquivo
#T=fileinode
fileinode(string nomedoarquivo)// Lê o inode do arquivo
#T=filemtime
filemtime(string nomedoarquivo)// Le o tempo de modificação do arquivo
#T=fileowner
fileowner(string nomedoarquivo)// Lê o dono (owner) do arquivo
#T=fileperms
fileperms(string filename)// Lê as permissões do arquivo
#T=filepro
filepro(string directory)// Read and verify the map file
#T=filepro_fieldcount
filepro_fieldcount(void )// Find out how many fields are in a filePro database
#T=filepro_fieldname
filepro_fieldname(int field_number)// Gets the name of a field
#T=filepro_fieldtype
filepro_fieldtype(int field_number)// Gets the type of a field
#T=filepro_fieldwidth
filepro_fieldwidth(int field_number)// Gets the width of a field
#T=filepro_retrieve
filepro_retrieve(int row_number, int field_number)// Retrieves data from a filePro database
#T=filepro_rowcount
filepro_rowcount(void )// Find out how many rows are in a filePro database
#T=filesize
filesize(string nomedoarquivo)// Lê o tamanho do arquivo
#T=filetype
filetype(string nomedoarquivo)// Lê o tipo de arquivo (file type)
#T=floatval
floatval(mixed var)// Get float value of a variable
#T=flock
flock(int handle, int operation [, int &wouldblock])// Monitor de travamento de arquivos portátil
#T=floor
floor(float valor)// Arredonda frações para baixo
#T=flush
flush(void )// Flush the output buffer
#T=fmod
fmod(float x, float y)// Returns the floating point remainder (modulo) of the division of the arguments
#T=fnmatch
fnmatch(string pattern, string string [, int flags])// Verifica se um nome de arquivo bate com padrão (wildcards)
#T=fopen
fopen(string filename, string mode [, int use_include_path [, resource zcontext]])// Abri um arquivo ou uma URL
#T=fpassthru
fpassthru(int handle)// Imprime todo os dados restantes de um ponteiro de arquivo
#T=fprintf
fprintf(resource handle, string format [, mixed args])// Escreve uma string formatada para um stream
#T=fread
fread(int fp, int comprimento)// Leitura binary-safe de arquivo
#T=frenchtojd
frenchtojd(int month, int day, int year)//  Converts a date from the French Republican Calendar to a Julian Day Count 
#T=fribidi_log2vis
fribidi_log2vis(string str, string direction, int charset)// Convert a logical string to a visual one
#T=fscanf
fscanf(resource handle, string formato [, string var1])// Interpreta a leitura de um arquivo de acordo com um formato
#T=fseek
fseek(int handle, int offset [, int whence])// Procura (seeks) em um ponteiro de arquivo
#T=fsockopen
fsockopen(string target, int port [, int errno [, string errstr [, float timeout]]])//  Open Internet or Unix domain socket connection 
#T=fstat
fstat(resource handle)// Lê a informação sobre um arquivo usando um ponteiro de arquivo aberto
#T=ftell
ftell(resource handle)// Retorna a posição de leitura/gravação do ponteiro do arquivo
#T=ftok
ftok(string pathname, string proj)//  Convert a pathname and a project identifier to a System V IPC key 
#T=ftp_cdup
ftp_cdup(resource ftp_stream)// Changes to the parent directory
#T=ftp_chdir
ftp_chdir(resource ftp_stream, string directory)// Changes directories on a FTP server
#T=ftp_chmod
ftp_chmod(resource ftp_stream, int mode, string filename)// Set permissions on a file via FTP
#T=ftp_close
ftp_close(resource ftp_stream)// Closes an FTP connection
#T=ftp_connect
ftp_connect(string host [, int port [, int timeout]])// Opens an FTP connection
#T=ftp_delete
ftp_delete(resource ftp_stream, string path)// Deletes a file on the FTP server
#T=ftp_exec
ftp_exec(resource ftp_stream, string command)// Requests execution of a program on the FTP server
#T=ftp_fget
ftp_fget(resource ftp_stream, resource handle, string remote_file, int mode [, int resumepos])// Downloads a file from the FTP server and saves to an open file
#T=ftp_fput
ftp_fput(resource ftp_stream, string remote_file, resource handle, int mode [, int startpos])// Uploads from an open file to the FTP server
#T=ftp_get
ftp_get(resource ftp_stream, string local_file, string remote_file, int mode [, int resumepos])// Downloads a file from the FTP server
#T=ftp_get_option
ftp_get_option(resource ftp_stream, int option)// Retrieves various runtime behaviours of the current FTP stream
#T=ftp_login
ftp_login(resource ftp_stream, string username, string password)// Logs in to an FTP connection
#T=ftp_mdtm
ftp_mdtm(resource ftp_stream, string remote_file)// Returns the last modified time of the given file
#T=ftp_mkdir
ftp_mkdir(resource ftp_stream, string directory)// Creates a directory
#T=ftp_nb_continue
ftp_nb_continue(resource ftp_stream)// Continues retrieving/sending a file (non-blocking)
#T=ftp_nb_fget
ftp_nb_fget(resource ftp_stream, resource handle, string remote_file, int mode [, int resumepos])// Retrieves a file from the FTP server and writes it to an open file (non-blocking)
#T=ftp_nb_fput
ftp_nb_fput(resource ftp_stream, string remote_file, resource handle, int mode [, int startpos])// Stores a file from an open file to the FTP server (non-blocking)
#T=ftp_nb_get
ftp_nb_get(resource ftp_stream, string local_file, string remote_file, int mode [, int resumepos])// Retrieves a file from the FTP server and writes it to a local file (non-blocking)
#T=ftp_nb_put
ftp_nb_put(resource ftp_stream, string remote_file, string local_file, int mode [, int startpos])// Stores a file on the FTP server (non-blocking)
#T=ftp_nlist
ftp_nlist(resource ftp_stream, string directory)// Returns a list of files in the given directory
#T=ftp_pasv
ftp_pasv(resource ftp_stream, bool pasv)// Turns passive mode on or off
#T=ftp_put
ftp_put(resource ftp_stream, string remote_file, string local_file, int mode [, int startpos])// Uploads a file to the FTP server
#T=ftp_pwd
ftp_pwd(resource ftp_stream)// Returns the current directory name
#T=ftp_raw
ftp_raw(resource ftp_stream, string command)// Sends an arbitrary command to an FTP server
#T=ftp_rawlist
ftp_rawlist(resource ftp_stream, string directory)// Returns a detailed list of files in the given directory
#T=ftp_rename
ftp_rename(resource ftp_stream, string from, string to)// Renames a file on the FTP server
#T=ftp_rmdir
ftp_rmdir(resource ftp_stream, string directory)// Removes a directory
#T=ftp_set_option
ftp_set_option(resource ftp_stream, int option, mixed value)// Set miscellaneous runtime FTP options
#T=ftp_site
ftp_site(resource ftp_stream, string cmd)// Sends a SITE command to the server
#T=ftp_size
ftp_size(resource ftp_stream, string remote_file)// Returns the size of the given file
#T=ftp_ssl_connect
ftp_ssl_connect(string host [, int port [, int timeout]])// Opens an Secure SSL-FTP connection
#T=ftp_systype
ftp_systype(resource ftp_stream)// Returns the system type identifier of the remote FTP server
#T=ftruncate
ftruncate(int fp, int comprimento)//  Corta um arquivo para um tamanho especificado. 
#T=func_get_arg
func_get_arg(int arg_num)// Return an item from the argument list
#T=func_get_args
func_get_args(void )//  Returns an array comprising a function's argument list 
#T=func_num_args
func_num_args(void )//  Returns the number of arguments passed to the function 
#T=function_exists
function_exists(string function_name)//  Return TRUE if the given function has been defined 
#T=fwrite
fwrite(int fp, string string [, int comprimento])// Gravação em arquivos binary-safe
#T=gd_info
gd_info(void )// Retrieve information about the currently installed GD library
#T=get_browser
get_browser([string user_agent])//  Diz o que o browser do usuário pode fazer 
#T=get_cfg_var
get_cfg_var(string varname)//  Gets the value of a PHP configuration option 
#T=get_class
get_class(object obj)// Retorna o nome da classe de um objeto
#T=get_class_methods
get_class_methods(mixed class_name)// Retorna uma matriz associativa com nomes de métodos da classe
#T=get_class_vars
get_class_vars(string class_name)//  Retorna uma matriz das propriedades padrão da classe 
#T=get_current_user
get_current_user(void )//  Gets the name of the owner of the current PHP script 
#T=get_declared_classes
get_declared_classes(void )// Retorna uma matriz com os nomes das classes definidas
#T=get_defined_constants
get_defined_constants(void )//  Returns an associative array with the names of all the constants and their values 
#T=get_defined_functions
get_defined_functions(void )//  Returns an array of all defined functions 
#T=get_defined_vars
get_defined_vars(void )//  Returns an array of all defined variables 
#T=get_extension_funcs
get_extension_funcs(string module_name)//  Returns an array with the names of the functions of a module 
#T=get_html_translation_table
get_html_translation_table(int table [, int quote_style])//  Retorna a tabela de traduçaõ usada por htmlspecialchars() e htmlentities() 
#T=get_include_path
get_include_path(void )//  Gets the current include_path configuration option 
#T=get_included_files
get_included_files(void )//  Returns an array with the names of included or required files 
#T=get_loaded_extensions
get_loaded_extensions(void )//  Returns an array with the names of all modules compiled and loaded 
#T=get_magic_quotes_gpc
get_magic_quotes_gpc(void )//  Gets the current active configuration setting of magic quotes gpc 
#T=get_magic_quotes_runtime
get_magic_quotes_runtime(void )//  Gets the current active configuration setting of magic_quotes_runtime 
#T=get_meta_tags
get_meta_tags(string filename [, int use_include_path])//  Extracts all meta tag content attributes from a file and returns an array 
#T=get_object_vars
get_object_vars(object obj)// Retorna uma matriz associativa com as propriedades do objeto
#T=get_parent_class
get_parent_class(mixed obj)// Devolve o nome da classe pai para o objeto ou classe
#T=get_resource_type
get_resource_type(resource handle)//  Returns the resource type
#T=getallheaders
getallheaders(void )// Obtem todos os headers HTTP
#T=getcwd
getcwd(void )// obtem o diretório atual
#T=getdate
getdate([int timestamp])// Consegue informações data/hora
#T=getenv
getenv(string varname)// Gets the value of an environment variable
#T=gethostbyaddr
gethostbyaddr(string ip_address)//  Get the Internet host name corresponding to a given IP address 
#T=gethostbyname
gethostbyname(string hostname)//  Get the IP address corresponding to a given Internet host name 
#T=gethostbynamel
gethostbynamel(string hostname)//  Get a list of IP addresses corresponding to a given Internet host name 
#T=getimagesize
getimagesize(string filename [, array imageinfo])// Get the size of an image
#T=getlastmod
getlastmod(void )// Gets time of last page modification
#T=getmxrr
getmxrr(string hostname, array mxhosts [, array weight])//  Get MX records corresponding to a given Internet host name 
#T=getmygid
getmygid(void )// Get PHP script owner's GID
#T=getmyinode
getmyinode(void )// Gets the inode of the current script
#T=getmypid
getmypid(void )// Gets PHP's process ID
#T=getmyuid
getmyuid(void )// Gets PHP script owner's UID
#T=getopt
getopt(string options)// Gets options from the command line argument list
#T=getprotobyname
getprotobyname(string name)//  Get protocol number associated with protocol name 
#T=getprotobynumber
getprotobynumber(int number)//  Get protocol name associated with protocol number 
#T=getrandmax
getrandmax(void )// Retorna o maior valor aletório possível
#T=getrusage
getrusage([int who])// Gets the current resource usages
#T=getservbyname
getservbyname(string service, string protocol)//  Get port number associated with an Internet service and protocol 
#T=getservbyport
getservbyport(int port, string protocol)//  Get Internet service which corresponds to port and protocol 
#T=gettext
gettext(string mensagem)// Procura por uma mensagem no domínio atual
#T=gettimeofday
gettimeofday(void )// Obtém a hora local
#T=gettype
gettype(mixed var)// Get the type of a variable
#T=glob
glob(string pattern [, int flags])// Localiza diretórios/arquivos que combinem com o padrão
#T=gmdate
gmdate(string format [, int timestamp])// Formata uma data/hora GMT/CUT 
#T=gmmktime
gmmktime(int hour, int minute, int second, int month, int day, int year [, int is_dst])// Consegue um timestamp UNIX para uma data GMT
#T=gmp_abs
gmp_abs(resource a)// Absolute value
#T=gmp_add
gmp_add(resource a, resource b)// Add numbers
#T=gmp_and
gmp_and(resource a, resource b)// Logical AND
#T=gmp_clrbit
gmp_clrbit(resource &a, int index)// Clear bit
#T=gmp_cmp
gmp_cmp(resource a, resource b)// Compare numbers
#T=gmp_com
gmp_com(resource a)// Calculates one's complement of a
#T=gmp_div_q
gmp_div_q(resource a, resource b [, int round])// Divide numbers
#T=gmp_div_qr
gmp_div_qr(resource n, resource d [, int round])// Divide numbers and get quotient and remainder
#T=gmp_div_r
gmp_div_r(resource n, resource d [, int round])// Remainder of the division of numbers
#T=gmp_divexact
gmp_divexact(resource n, resource d)// Exact division of numbers
#T=gmp_fact
gmp_fact(int a)// Factorial
#T=gmp_gcd
gmp_gcd(resource a, resource b)// Calculate GCD
#T=gmp_gcdext
gmp_gcdext(resource a, resource b)// Calculate GCD and multipliers
#T=gmp_hamdist
gmp_hamdist(resource a, resource b)// Hamming distance
#T=gmp_init
gmp_init(mixed number)// Create GMP number
#T=gmp_intval
gmp_intval(resource gmpnumber)// Convert GMP number to integer
#T=gmp_invert
gmp_invert(resource a, resource b)// Inverse by modulo
#T=gmp_jacobi
gmp_jacobi(resource a, resource p)// Jacobi symbol
#T=gmp_legendre
gmp_legendre(resource a, resource p)// Legendre symbol
#T=gmp_mod
gmp_mod(resource n, resource d)// Modulo operation
#T=gmp_mul
gmp_mul(resource a, resource b)// Multiply numbers
#T=gmp_neg
gmp_neg(resource a)// Negate number
#T=gmp_or
gmp_or(resource a, resource b)// Logical OR
#T=gmp_perfect_square
gmp_perfect_square(resource a)// Perfect square check
#T=gmp_popcount
gmp_popcount(resource a)// Population count
#T=gmp_pow
gmp_pow(resource base, int exp)// Raise number into power
#T=gmp_powm
gmp_powm(resource base, resource exp, resource mod)// Raise number into power with modulo
#T=gmp_prob_prime
gmp_prob_prime(resource a [, int reps])// Check if number is "probably prime"
#T=gmp_random
gmp_random(int limiter)// Random number
#T=gmp_scan0
gmp_scan0(resource a, int start)// Scan for 0
#T=gmp_scan1
gmp_scan1(resource a, int start)// Scan for 1
#T=gmp_setbit
gmp_setbit(resource &a, int index [, bool set_clear])// Set bit
#T=gmp_sign
gmp_sign(resource a)// Sign of number
#T=gmp_sqrt
gmp_sqrt(resource a)// Square root
#T=gmp_sqrtrm
gmp_sqrtrm(resource a)// Square root with remainder
#T=gmp_strval
gmp_strval(resource gmpnumber [, int base])// Convert GMP number to string
#T=gmp_sub
gmp_sub(resource a, resource b)// Subtract numbers
#T=gmp_xor
gmp_xor(resource a, resource b)// Logical XOR
#T=gmstrftime
gmstrftime(string format [, int timestamp])//  Formata uma hora/data GMT/CUT de acordo com as configurações locais 
#T=gregoriantojd
gregoriantojd(int month, int day, int year)//  Converts a Gregorian date to Julian Day Count 
#T=gzclose
gzclose(resource zp)// Close an open gz-file pointer
#T=gzcompress
gzcompress(string data [, int level])// Compress a string
#T=gzdeflate
gzdeflate(string data [, int level])// Deflate a string
#T=gzencode
gzencode(string data [, int level [, int encoding_mode]])// Create a gzip compressed string
#T=gzeof
gzeof(resource zp)// Test for end-of-file on a gz-file pointer
#T=gzfile
gzfile(string filename [, int use_include_path])// Read entire gz-file into an array
#T=gzgetc
gzgetc(resource zp)// Get character from gz-file pointer
#T=gzgets
gzgets(resource zp, int length)// Get line from file pointer
#T=gzgetss
gzgetss(resource zp, int length [, string allowable_tags])//  Get line from gz-file pointer and strip HTML tags 
#T=gzinflate
gzinflate(string data [, int length])// Inflate a deflated string
#T=gzopen
gzopen(string filename, string mode [, int use_include_path])// Open gz-file
#T=gzpassthru
gzpassthru(resource zp)//  Output all remaining data on a gz-file pointer 
#T=gzread
gzread(resource zp, int length)// Binary-safe gz-file read
#T=gzrewind
gzrewind(resource zp)// Rewind the position of a gz-file pointer
#T=gzseek
gzseek(resource zp, int offset)// Seek on a gz-file pointer
#T=gztell
gztell(resource zp)// Tell gz-file pointer read/write position
#T=gzuncompress
gzuncompress(string data [, int length])// Uncompress a deflated string
#T=gzwrite
gzwrite(resource zp, string string [, int length])// Binary-safe gz-file write
#T=header
header(string string [, bool replace [, int http_response_code]])// Send a raw HTTP header
#T=headers_sent
headers_sent([string &file [, int &line]])// Checks if or where headers have been sent
#T=hebrev
hebrev(string hebrew_text [, int max_chars_per_line])//  Converte texto lógico Hebraico para texto visual 
#T=hebrevc
hebrevc(string hebrew_text [, int max_chars_per_line])//  Converte um texto lógico Hebráico para um texto visual com conversão newline 
#T=hexdec
hexdec(string hex_string)// Hexadecimal para decimal
#T=highlight_file
highlight_file(string filename [, bool return])// Destaca a sintaxe de um arquivo
#T=highlight_string
highlight_string(string str [, bool return])// Destaque da sintaxe de uma string
#T=html_entity_decode
html_entity_decode(string string [, int quote_style [, string charset]])//  Converte todas as entidades HTML para os seus caracteres 
#T=htmlentities
htmlentities(string string [, int quote_style [, string charset]])//  Converte todos os caracteres para HTML entities 
#T=htmlspecialchars
htmlspecialchars(string string [, int quote_style [, string charset]])//  Converte caracteres especiais para a realidade HTML 
#T=hw_array2objrec
hw_array2objrec(array object_array)// convert attributes from object array to object record
#T=hw_changeobject
hw_changeobject(int link, int objid, array attributes)//  Changes attributes of an object (obsolete) 
#T=hw_children
hw_children(int connection, int objectID)// object ids of children
#T=hw_childrenobj
hw_childrenobj(int connection, int objectID)// object records of children
#T=hw_close
hw_close(int connection)// closes the Hyperwave connection
#T=hw_connect
hw_connect(string host, int port, string username, string password)// opens a connection
#T=hw_connection_info
hw_connection_info(int link)//  Prints information about the connection to Hyperwave server 
#T=hw_cp
hw_cp(int connection, array object_id_array, int destination_id)// Copies objects
#T=hw_deleteobject
hw_deleteobject(int connection, int object_to_delete)// deletes object
#T=hw_docbyanchor
hw_docbyanchor(int connection, int anchorID)// object id object belonging to anchor
#T=hw_docbyanchorobj
hw_docbyanchorobj(int connection, int anchorID)// object record object belonging to anchor
#T=hw_document_attributes
hw_document_attributes(int hw_document)// object record of hw_document
#T=hw_document_bodytag
hw_document_bodytag(int hw_document)// body tag of hw_document
#T=hw_document_content
hw_document_content(int hw_document)// returns content of hw_document
#T=hw_document_setcontent
hw_document_setcontent(int hw_document, string content)// sets/replaces content of hw_document
#T=hw_document_size
hw_document_size(int hw_document)// size of hw_document
#T=hw_dummy
hw_dummy(int link, int id, int msgid)//  Hyperwave dummy function 
#T=hw_edittext
hw_edittext(int connection, int hw_document)// retrieve text document
#T=hw_error
hw_error(int connection)// error number
#T=hw_errormsg
hw_errormsg(int connection)// returns error message
#T=hw_free_document
hw_free_document(int hw_document)// frees hw_document
#T=hw_getanchors
hw_getanchors(int connection, int objectID)// object ids of anchors of document
#T=hw_getanchorsobj
hw_getanchorsobj(int connection, int objectID)// object records of anchors of document
#T=hw_getandlock
hw_getandlock(int connection, int objectID)// return bject record and lock object
#T=hw_getchildcoll
hw_getchildcoll(int connection, int objectID)// object ids of child collections
#T=hw_getchildcollobj
hw_getchildcollobj(int connection, int objectID)// object records of child collections
#T=hw_getchilddoccoll
hw_getchilddoccoll(int connection, int objectID)// object ids of child documents of collection
#T=hw_getchilddoccollobj
hw_getchilddoccollobj(int connection, int objectID)// object records of child documents of collection
#T=hw_getobject
hw_getobject(int connection, mixed objectID, string query)// object record
#T=hw_getobjectbyquery
hw_getobjectbyquery(int connection, string query, int max_hits)// search object
#T=hw_getobjectbyquerycoll
hw_getobjectbyquerycoll(int connection, int objectID, string query, int max_hits)// search object in collection
#T=hw_getobjectbyquerycollobj
hw_getobjectbyquerycollobj(int connection, int objectID, string query, int max_hits)// search object in collection
#T=hw_getobjectbyqueryobj
hw_getobjectbyqueryobj(int connection, string query, int max_hits)// search object
#T=hw_getparents
hw_getparents(int connection, int objectID)// object ids of parents
#T=hw_getparentsobj
hw_getparentsobj(int connection, int objectID)// object records of parents
#T=hw_getrellink
hw_getrellink(int link, int rootid, int sourceid, int destid)//  Get link from source to dest relative to rootid 
#T=hw_getremote
hw_getremote(int connection, int objectID)// Gets a remote document
#T=hw_getremotechildren
hw_getremotechildren(int connection, string object_record)// Gets children of remote document
#T=hw_getsrcbydestobj
hw_getsrcbydestobj(int connection, int objectID)// Returns anchors pointing at object
#T=hw_gettext
hw_gettext(int connection, int objectID [, mixed rootID/prefix])// retrieve text document
#T=hw_getusername
hw_getusername(int connection)// name of currently logged in user
#T=hw_identify
hw_identify(string username, string password)// identifies as user
#T=hw_incollections
hw_incollections(int connection, array object_id_array, array collection_id_array, int return_collections)// check if object ids in collections
#T=hw_info
hw_info(int connection)// info about connection
#T=hw_inscoll
hw_inscoll(int connection, int objectID, array object_array)// insert collection
#T=hw_insdoc
hw_insdoc(int connection, int parentID, string object_record, string text)// insert document
#T=hw_insertanchors
hw_insertanchors(int hwdoc, array anchorecs, array dest [, array urlprefixes])//  Inserts only anchors into text 
#T=hw_insertdocument
hw_insertdocument(int connection, int parent_id, int hw_document)// upload any document
#T=hw_insertobject
hw_insertobject(int connection, string object_rec, string parameter)// inserts an object record
#T=hw_mapid
hw_mapid(int connection, int server_id, int object_id)// Maps global id on virtual local id
#T=hw_modifyobject
hw_modifyobject(int connection, int object_to_change, array remove, array add, int mode)// modifies object record
#T=hw_mv
hw_mv(int connection, array object_id_array, int source_id, int destination_id)// Moves objects
#T=hw_new_document
hw_new_document(string object_record, string document_data, int document_size)// create new document
#T=hw_objrec2array
hw_objrec2array(string object_record [, array format])// Convert attributes from object record to object array
#T=hw_output_document
hw_output_document(int hw_document)// prints hw_document
#T=hw_pconnect
hw_pconnect(string host, int port, string username, string password)// make a persistent database connection
#T=hw_pipedocument
hw_pipedocument(int connection, int objectID)// retrieve any document
#T=hw_root
hw_root()// root object id
#T=hw_setlinkroot
hw_setlinkroot(int link, int rootid)//  Set the id to which links are calculated 
#T=hw_stat
hw_stat(int link)//  Returns status string 
#T=hw_unlock
hw_unlock(int connection, int objectID)// unlock object
#T=hw_who
hw_who(int connection)// List of currently logged in users
#T=hwapi_hgcsp
hwapi_hgcsp(string hostname [, int port])// Returns object of class hw_api
#T=hypot
hypot(float num1, float num2)//  Retorna a raiz quadrada de (num1*num1 + num2*num2) 
#T=ibase_add_user
ibase_add_user(string server, string dba_user_name, string dba_user_password, string user_name, string password [, string first_name [, string middle_name [, string last_name]]])//  Add a user to a security database (only for IB6 or later) 
#T=ibase_blob_add
ibase_blob_add(int blob_id, string data)//  Add data into a newly created blob 
#T=ibase_blob_cancel
ibase_blob_cancel(int blob_id)//  Cancel creating blob 
#T=ibase_blob_close
ibase_blob_close(int blob_id)//  Close blob 
#T=ibase_blob_create
ibase_blob_create([resource link_identifier])//  Creates a new blob for adding data 
#T=ibase_blob_echo
ibase_blob_echo(string blob_id_str)//  Output blob contents to browser 
#T=ibase_blob_get
ibase_blob_get(int blob_id, int len)//  Get len bytes data from open blob 
#T=ibase_blob_import
ibase_blob_import([resource link_identifier, int file_id])//  Create blob, copy file in it, and close it 
#T=ibase_blob_info
ibase_blob_info(string blob_id_str)//  Return blob length and other useful info 
#T=ibase_blob_open
ibase_blob_open(string blob_id)//  Open blob for retrieving data parts 
#T=ibase_close
ibase_close([resource connection_id])//  Close a connection to an InterBase database 
#T=ibase_commit
ibase_commit([resource link_identifier, int trans_number])// Commit a transaction
#T=ibase_connect
ibase_connect(string database [, string username [, string password [, string charset [, int buffers [, int dialect [, string role]]]]]])//  Open a connection to an InterBase database 
#T=ibase_delete_user
ibase_delete_user(string server, string dba_user_name, string dba_user_password, string user_name)//  Delete a user from a security database (only for IB6 or later) 
#T=ibase_errmsg
ibase_errmsg(void )//  Returns error messages 
#T=ibase_execute
ibase_execute(resource query [, int bind_args])// Execute a previously prepared query
#T=ibase_fetch_assoc
ibase_fetch_assoc(resource result [, int blob_flag])//  Fetch a result row from a query as an associative array 
#T=ibase_fetch_object
ibase_fetch_object(resource result_id [, int blob_flag])// Get an object from a InterBase database
#T=ibase_fetch_row
ibase_fetch_row(resource result_identifier [, int blob_flag])// Fetch a row from an InterBase database
#T=ibase_field_info
ibase_field_info(resource result, int field_number)//  Get information about a field 
#T=ibase_free_query
ibase_free_query(resource query)//  Free memory allocated by a prepared query 
#T=ibase_free_result
ibase_free_result(resource result_identifier)// Free a result set
#T=ibase_modify_user
ibase_modify_user(string server, string dba_user_name, string dba_user_password, string user_name, string password [, string first_name [, string middle_name [, string last_name]]])//  Modify a user to a security database (only for IB6 or later) 
#T=ibase_num_fields
ibase_num_fields(resource result_id)//  Get the number of fields in a result set 
#T=ibase_pconnect
ibase_pconnect(string database [, string username [, string password [, string charset [, int buffers [, int dialect [, string role]]]]]])//  Creates an persistent connection to an InterBase database 
#T=ibase_prepare
ibase_prepare([resource link_identifier, string query])//  Prepare a query for later binding of parameter placeholders and execution 
#T=ibase_query
ibase_query([resource link_identifier, string query [, int bind_args]])// Execute a query on an InterBase database
#T=ibase_rollback
ibase_rollback([resource link_identifier, int trans_number])// Rolls back a transaction
#T=ibase_timefmt
ibase_timefmt(string format [, int columntype])//  Sets the format of timestamp, date and time type columns returned from queries 
#T=ibase_trans
ibase_trans([int trans_args [, resource link_identifier]])// Begin a transaction
#T=iconv
iconv(string in_charset, string out_charset, string str)// Convert string to requested character encoding
#T=iconv_get_encoding
iconv_get_encoding([string type])// Get current setting for character encoding conversion
#T=iconv_set_encoding
iconv_set_encoding(string type, string charset)// Set current setting for character encoding conversion
#T=ifx_affected_rows
ifx_affected_rows(int result_id)// Get number of rows affected by a query
#T=ifx_blobinfile_mode
ifx_blobinfile_mode(int mode)// Set the default blob mode for all select queries
#T=ifx_byteasvarchar
ifx_byteasvarchar(int mode)// Set the default byte mode
#T=ifx_close
ifx_close([int link_identifier])// Close Informix connection
#T=ifx_connect
ifx_connect([string database [, string userid [, string password]]])// Open Informix server connection
#T=ifx_copy_blob
ifx_copy_blob(int bid)// Duplicates the given blob object
#T=ifx_create_blob
ifx_create_blob(int type, int mode, string param)// Creates an blob object
#T=ifx_create_char
ifx_create_char(string param)// Creates an char object
#T=ifx_do
ifx_do(int result_id)//  Execute a previously prepared SQL-statement 
#T=ifx_error
ifx_error(void )// Returns error code of last Informix call
#T=ifx_errormsg
ifx_errormsg([int errorcode])// Returns error message of last Informix call
#T=ifx_fetch_row
ifx_fetch_row(int result_id [, mixed position])// Get row as enumerated array
#T=ifx_fieldproperties
ifx_fieldproperties(int result_id)// List of SQL fieldproperties
#T=ifx_fieldtypes
ifx_fieldtypes(int result_id)// List of Informix SQL fields
#T=ifx_free_blob
ifx_free_blob(int bid)// Deletes the blob object
#T=ifx_free_char
ifx_free_char(int bid)// Deletes the char object
#T=ifx_free_result
ifx_free_result(int result_id)// Releases resources for the query
#T=ifx_get_blob
ifx_get_blob(int bid)// Return the content of a blob object
#T=ifx_get_char
ifx_get_char(int bid)// Return the content of the char object
#T=ifx_getsqlca
ifx_getsqlca(int result_id)//  Get the contents of sqlca.sqlerrd[0..5] after a query 
#T=ifx_htmltbl_result
ifx_htmltbl_result(int result_id [, string html_table_options])//  Formats all rows of a query into a HTML table 
#T=ifx_nullformat
ifx_nullformat(int mode)//  Sets the default return value on a fetch row 
#T=ifx_num_fields
ifx_num_fields(int result_id)// Returns the number of columns in the query
#T=ifx_num_rows
ifx_num_rows(int result_id)// Count the rows already fetched from a query
#T=ifx_pconnect
ifx_pconnect([string database [, string userid [, string password]]])// Open persistent Informix connection
#T=ifx_prepare
ifx_prepare(string query, int conn_id [, int cursor_def, mixed blobidarray])// Prepare an SQL-statement for execution
#T=ifx_query
ifx_query(string query, int link_identifier [, int cursor_type [, mixed blobidarray]])// Send Informix query
#T=ifx_textasvarchar
ifx_textasvarchar(int mode)// Set the default text mode
#T=ifx_update_blob
ifx_update_blob(int bid, string content)// Updates the content of the blob object
#T=ifx_update_char
ifx_update_char(int bid, string content)// Updates the content of the char object
#T=ifxus_close_slob
ifxus_close_slob(int bid)// Deletes the slob object
#T=ifxus_create_slob
ifxus_create_slob(int mode)// Creates an slob object and opens it
#T=ifxus_free_slob
ifxus_free_slob(int bid)// Deletes the slob object
#T=ifxus_open_slob
ifxus_open_slob(long bid, int mode)// Opens an slob object
#T=ifxus_read_slob
ifxus_read_slob(long bid, long nbytes)// Reads nbytes of the slob object
#T=ifxus_seek_slob
ifxus_seek_slob(long bid, int mode, long offset)// Sets the current file or seek position
#T=ifxus_tell_slob
ifxus_tell_slob(long bid)// Returns the current file or seek position
#T=ifxus_write_slob
ifxus_write_slob(long bid, string content)// Writes a string into the slob object
#T=ignore_user_abort
ignore_user_abort([int setting])//  Estabelece se acontecerá o enceramento do script quando o usuário abortar a conexão 
#T=image2wbmp
image2wbmp(resource image [, string filename [, int threshold]])// Output image to browser or file
#T=image_type_to_mime_type
image_type_to_mime_type(int imagetype)// Get Mime-Type for image-type returned by getimagesize, exif_read_data, exif_thumbnail, exif_imagetype
#T=imagealphablending
imagealphablending(resource image, bool blendmode)// Set the blending mode for an image
#T=imageantialias
imageantialias(int im, bool on)//  Should antialias functions be used or not 
#T=imagearc
imagearc(resource image, int cx, int cy, int w, int h, int s, int e, int color)// Draw a partial ellipse
#T=imagechar
imagechar(resource image, int font, int x, int y, string c, int color)// Draw a character horizontally
#T=imagecharup
imagecharup(resource image, int font, int x, int y, string c, int color)// Draw a character vertically
#T=imagecolorallocate
imagecolorallocate(resource image, int red, int green, int blue)// Allocate a color for an image
#T=imagecolorallocatealpha
imagecolorallocatealpha(resource image, int red, int green, int blue, int alpha)// Allocate a color for an image
#T=imagecolorat
imagecolorat(resource image, int x, int y)// Get the index of the color of a pixel
#T=imagecolorclosest
imagecolorclosest(resource image, int red, int green, int blue)// Get the index of the closest color to the specified color
#T=imagecolorclosestalpha
imagecolorclosestalpha(resource image, int red, int green, int blue, int alpha)// Get the index of the closest color to the specified color + alpha
#T=imagecolorclosesthwb
imagecolorclosesthwb(resource image, int red, int green, int blue)//  Get the index of the color which has the hue, white and blackness nearest to the given color 
#T=imagecolordeallocate
imagecolordeallocate(resource image, int color)// De-allocate a color for an image
#T=imagecolorexact
imagecolorexact(resource image, int red, int green, int blue)// Get the index of the specified color
#T=imagecolorexactalpha
imagecolorexactalpha(resource image, int red, int green, int blue, int alpha)// Get the index of the specified color + alpha
#T=imagecolormatch
imagecolormatch(resource image1, resource image2)//  Makes the colors of the palette version of an image more closely match the true color version 
#T=imagecolorresolve
imagecolorresolve(resource image, int red, int green, int blue)//  Get the index of the specified color or its closest possible alternative 
#T=imagecolorresolvealpha
imagecolorresolvealpha(resource image, int red, int green, int blue, int alpha)//  Get the index of the specified color + alpha or its closest possible alternative 
#T=imagecolorset
imagecolorset(resource image, int index, int red, int green, int blue)// Set the color for the specified palette index
#T=imagecolorsforindex
imagecolorsforindex(resource image, int index)// Get the colors for an index
#T=imagecolorstotal
imagecolorstotal(resource image)// Find out the number of colors in an image's palette
#T=imagecolortransparent
imagecolortransparent(resource image [, int color])// Define a color as transparent
#T=imagecopy
imagecopy(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h)// Copy part of an image
#T=imagecopymerge
imagecopymerge(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h, int pct)// Copy and merge part of an image
#T=imagecopymergegray
imagecopymergegray(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h, int pct)// Copy and merge part of an image with gray scale
#T=imagecopyresampled
imagecopyresampled(resource dst_im, resource src_im, int dstX, int dstY, int srcX, int srcY, int dstW, int dstH, int srcW, int srcH)// Copy and resize part of an image with resampling
#T=imagecopyresized
imagecopyresized(resource dst_im, resource src_im, int dstX, int dstY, int srcX, int srcY, int dstW, int dstH, int srcW, int srcH)// Copy and resize part of an image
#T=imagecreate
imagecreate(int x_size, int y_size)// Create a new palette based image
#T=imagecreatefromgd
imagecreatefromgd(string filename)// Create a new image from GD file or URL
#T=imagecreatefromgd2
imagecreatefromgd2(string filename)// Create a new image from GD2 file or URL
#T=imagecreatefromgd2part
imagecreatefromgd2part(string filename, int srcX, int srcY, int width, int height)// Create a new image from a given part of GD2 file or URL
#T=imagecreatefromgif
imagecreatefromgif(string filename)// Create a new image from file or URL
#T=imagecreatefromjpeg
imagecreatefromjpeg(string filename)// Create a new image from file or URL
#T=imagecreatefrompng
imagecreatefrompng(string filename)// Create a new image from file or URL
#T=imagecreatefromstring
imagecreatefromstring(string image)// Create a new image from the image stream in the string
#T=imagecreatefromwbmp
imagecreatefromwbmp(string filename)// Create a new image from file or URL
#T=imagecreatefromxbm
imagecreatefromxbm(string filename)// Create a new image from file or URL
#T=imagecreatefromxpm
imagecreatefromxpm(string filename)// Create a new image from file or URL
#T=imagecreatetruecolor
imagecreatetruecolor(int x_size, int y_size)// Create a new true color image
#T=imagedashedline
imagedashedline(resource image, int x1, int y1, int x2, int y2, int color)// Draw a dashed line
#T=imagedestroy
imagedestroy(resource image)// Destroy an image
#T=imageellipse
imageellipse(resource image, int cx, int cy, int w, int h, int color)// Draw an ellipse
#T=imagefill
imagefill(resource image, int x, int y, int color)// Flood fill
#T=imagefilledarc
imagefilledarc(resource image, int cx, int cy, int w, int h, int s, int e, int color, int style)// Draw a partial ellipse and fill it
#T=imagefilledellipse
imagefilledellipse(resource image, int cx, int cy, int w, int h, int color)// Draw a filled ellipse
#T=imagefilledpolygon
imagefilledpolygon(resource image, array points, int num_points, int color)// Draw a filled polygon
#T=imagefilledrectangle
imagefilledrectangle(resource image, int x1, int y1, int x2, int y2, int color)// Draw a filled rectangle
#T=imagefilltoborder
imagefilltoborder(resource image, int x, int y, int border, int color)// Flood fill to specific color
#T=imagefontheight
imagefontheight(int font)// Get font height
#T=imagefontwidth
imagefontwidth(int font)// Get font width
#T=imageftbbox
imageftbbox(int size, int angle, string font_file, string text [, array extrainfo])// Give the bounding box of a text using fonts via freetype2
#T=imagefttext
imagefttext(resource image, int size, int angle, int x, int y, int col, string font_file, string text [, array extrainfo])// Write text to the image using fonts using FreeType 2
#T=imagegammacorrect
imagegammacorrect(resource image, float inputgamma, float outputgamma)// Apply a gamma correction to a GD image
#T=imagegd
imagegd(resource image [, string filename])// Output GD image to browser or file
#T=imagegd2
imagegd2(resource image [, string filename [, int chunk_size [, int type]]])// Output GD2 image
#T=imagegif
imagegif(resource image [, string filename])// Output image to browser or file
#T=imageinterlace
imageinterlace(resource image [, int interlace])// Enable or disable interlace
#T=imageistruecolor
imageistruecolor(resource image)// Finds whether an image is a truecolor image.
#T=imagejpeg
imagejpeg(resource image [, string filename [, int quality]])// Output image to browser or file
#T=imageline
imageline(resource image, int x1, int y1, int x2, int y2, int color)// Draw a line
#T=imageloadfont
imageloadfont(string file)// Load a new font
#T=imagepalettecopy
imagepalettecopy(resource destination, resource source)// Copy the palette from one image to another
#T=imagepng
imagepng(resource image [, string filename])// Output a PNG image to either the browser or a file
#T=imagepolygon
imagepolygon(resource image, array points, int num_points, int color)// Draw a polygon
#T=imagepsbbox
imagepsbbox(string text, int font, int size [, int space [, int tightness [, float angle]]])//  Give the bounding box of a text rectangle using PostScript Type1 fonts 
#T=imagepscopyfont
imagepscopyfont(int fontindex)//  Make a copy of an already loaded font for further modification 
#T=imagepsencodefont
imagepsencodefont(int font_index, string encodingfile)// Change the character encoding vector of a font
#T=imagepsextendfont
imagepsextendfont(int font_index, float extend)// Extend or condense a font
#T=imagepsfreefont
imagepsfreefont(int fontindex)// Free memory used by a PostScript Type 1 font
#T=imagepsloadfont
imagepsloadfont(string filename)// Load a PostScript Type 1 font from file
#T=imagepsslantfont
imagepsslantfont(int font_index, float slant)// Slant a font
#T=imagepstext
imagepstext(resource image, string text, int font, int size, int foreground, int background, int x, int y [, int space [, int tightness [, float angle [, int antialias_steps]]]])// To draw a text string over an image using PostScript Type1 fonts
#T=imagerectangle
imagerectangle(resource image, int x1, int y1, int x2, int y2, int col)// Draw a rectangle
#T=imagerotate
imagerotate(resource src_im, float angle, int bgd_color)// Rotate an image with a given angle
#T=imagesavealpha
imagesavealpha(resource image, bool saveflag)//  Set the flag to save full alpha channel information (as opposed to single-color transparency) when saving PNG images. 
#T=imagesetbrush
imagesetbrush(resource image, resource brush)// Set the brush image for line drawing
#T=imagesetpixel
imagesetpixel(resource image, int x, int y, int color)// Set a single pixel
#T=imagesetstyle
imagesetstyle(resource image, array style)// Set the style for line drawing
#T=imagesetthickness
imagesetthickness(resource image, int thickness)// Set the thickness for line drawing
#T=imagesettile
imagesettile(resource image, resource tile)// Set the tile image for filling
#T=imagestring
imagestring(resource image, int font, int x, int y, string s, int col)// Draw a string horizontally
#T=imagestringup
imagestringup(resource image, int font, int x, int y, string s, int col)// Draw a string vertically
#T=imagesx
imagesx(resource image)// Get image width
#T=imagesy
imagesy(resource image)// Get image height
#T=imagetruecolortopalette
imagetruecolortopalette(resource image, bool dither, int ncolors)// Convert a true color image to a palette image
#T=imagettfbbox
imagettfbbox(int size, int angle, string fontfile, string text)// Give the bounding box of a text using TrueType fonts
#T=imagettftext
imagettftext(resource image, int size, int angle, int x, int y, int color, string fontfile, string text)// Write text to the image using TrueType fonts
#T=imagetypes
imagetypes(void )// Return the image types supported by this PHP build
#T=imagewbmp
imagewbmp(resource image [, string filename [, int foreground]])// Output image to browser or file
#T=imap_8bit
imap_8bit(string string)//  Convert an 8bit string to a quoted-printable string 
#T=imap_alerts
imap_alerts(void )//  This function returns all IMAP alert messages (if any) that have occurred during this page request or since the alert stack was reset 
#T=imap_append
imap_append(resource imap_stream, string mbox, string message [, string options])//  Append a string message to a specified mailbox 
#T=imap_base64
imap_base64(string text)// Decode BASE64 encoded text
#T=imap_binary
imap_binary(string string)//  Convert an 8bit string to a base64 string 
#T=imap_body
imap_body(resource imap_stream, int msg_number [, int options])// Read the message body
#T=imap_bodystruct
imap_bodystruct(resource stream_id, int msg_no, int section)//  Read the structure of a specified body section of a specific message 
#T=imap_check
imap_check(resource imap_stream)// Check current mailbox
#T=imap_clearflag_full
imap_clearflag_full(resource stream, string sequence, string flag, string options)// Clears flags on messages
#T=imap_close
imap_close(resource imap_stream [, int flag])// Close an IMAP stream
#T=imap_createmailbox
imap_createmailbox(resource imap_stream, string mbox)// Create a new mailbox
#T=imap_delete
imap_delete(int imap_stream, int msg_number [, int options])//  Mark a messge for deletion from current mailbox 
#T=imap_deletemailbox
imap_deletemailbox(resource imap_stream, string mbox)// Delete a mailbox
#T=imap_errors
imap_errors(void )//  This function returns all of the IMAP errors (if any) that have occurred during this page request or since the error stack was reset. 
#T=imap_expunge
imap_expunge(resource imap_stream)// Delete all messages marked for deletion
#T=imap_fetch_overview
imap_fetch_overview(resource imap_stream, string sequence [, int options])//  Read an overview of the information in the headers of the given message 
#T=imap_fetchbody
imap_fetchbody(resource imap_stream, int msg_number, string part_number [, flags options])//  Fetch a particular section of the body of the message 
#T=imap_fetchheader
imap_fetchheader(resource imap_stream, int msgno, int options)// Returns header for a message
#T=imap_fetchstructure
imap_fetchstructure(resource imap_stream, int msg_number [, int options])//  Read the structure of a particular message 
#T=imap_get_quota
imap_get_quota(resource imap_stream, string quota_root)//  Retrieve the quota level settings, and usage statics per mailbox 
#T=imap_get_quotaroot
imap_get_quotaroot(resource imap_stream, string quota_root)//  Retrieve the quota settings per user 
#T=imap_getmailboxes
imap_getmailboxes(resource imap_stream, string ref, string pattern)//  Read the list of mailboxes, returning detailed information on each one 
#T=imap_getsubscribed
imap_getsubscribed(resource imap_stream, string ref, string pattern)// List all the subscribed mailboxes
#T=imap_headerinfo
imap_headerinfo(resource imap_stream, int msg_number [, int fromlength [, int subjectlength [, string defaulthost]]])// Read the header of the message
#T=imap_headers
imap_headers(resource imap_stream)//  Returns headers for all messages in a mailbox 
#T=imap_last_error
imap_last_error(void )//  This function returns the last IMAP error (if any) that occurred during this page request 
#T=imap_list
imap_list(resource imap_stream, string ref, string pattern)// Read the list of mailboxes
#T=imap_listscan
imap_listscan(resource imap_stream, string ref, string pattern, string content)//  Read the list of mailboxes, takes a string to search for in the text of the mailbox
#T=imap_lsub
imap_lsub(resource imap_stream, string ref, string pattern)// List all the subscribed mailboxes
#T=imap_mail
imap_mail(string to, string subject, string message [, string additional_headers [, string cc [, string bcc [, string rpath]]]])//  Send an email message 
#T=imap_mail_compose
imap_mail_compose(array envelope, array body)//  Create a MIME message based on given envelope and body sections 
#T=imap_mail_copy
imap_mail_copy(resource imap_stream, string msglist, string mbox [, int options])// Copy specified messages to a mailbox
#T=imap_mail_move
imap_mail_move(resource imap_stream, string msglist, string mbox [, int options])// Move specified messages to a mailbox
#T=imap_mailboxmsginfo
imap_mailboxmsginfo(resource imap_stream)// Get information about the current mailbox
#T=imap_mime_header_decode
imap_mime_header_decode(string text)// Decode MIME header elements
#T=imap_msgno
imap_msgno(resource imap_stream, int uid)//  This function returns the message sequence number for the given UID 
#T=imap_num_msg
imap_num_msg(resource imap_stream)//  Gives the number of messages in the current mailbox 
#T=imap_num_recent
imap_num_recent(resource imap_stream)// Gives the number of recent messages in current mailbox
#T=imap_open
imap_open(string mailbox, string username, string password [, int options])// Open an IMAP stream to a mailbox
#T=imap_ping
imap_ping(resource imap_stream)// Check if the IMAP stream is still active
#T=imap_qprint
imap_qprint(string string)// Convert a quoted-printable string to an 8 bit string
#T=imap_renamemailbox
imap_renamemailbox(resource imap_stream, string old_mbox, string new_mbox)// Rename an old mailbox to new mailbox
#T=imap_reopen
imap_reopen(resource imap_stream, string mailbox [, string options])// Reopen IMAP stream to new mailbox
#T=imap_rfc822_parse_adrlist
imap_rfc822_parse_adrlist(string address, string default_host)// Parses an address string
#T=imap_rfc822_parse_headers
imap_rfc822_parse_headers(string headers [, string defaulthost])// Parse mail headers from a string
#T=imap_rfc822_write_address
imap_rfc822_write_address(string mailbox, string host, string personal)//  Returns a properly formatted email address given the mailbox, host, and personal info. 
#T=imap_search
imap_search(resource imap_stream, string criteria, int options)//  This function returns an array of messages matching the given search criteria
#T=imap_set_quota
imap_set_quota(resource imap_stream, string quota_root, int quota_limit)// Sets a quota for a given mailbox
#T=imap_setacl
imap_setacl(resource stream_id, string mailbox, string id, string rights)//  Sets the ACL for a giving mailbox 
#T=imap_setflag_full
imap_setflag_full(resource stream, string sequence, string flag, string options)// Sets flags on messages
#T=imap_sort
imap_sort(resource stream, int criteria, int reverse [, int options [, string search_criteria]])// Sort an array of message headers
#T=imap_status
imap_status(resource imap_stream, string mailbox, int options)//  This function returns status information on a mailbox other than the current one 
#T=imap_subscribe
imap_subscribe(resource imap_stream, string mbox)// Subscribe to a mailbox
#T=imap_thread
imap_thread(resource stream_id [, int options])//  Return threaded by REFERENCES tree 
#T=imap_uid
imap_uid(resource imap_stream, int msgno)//  This function returns the UID for the given message sequence number 
#T=imap_undelete
imap_undelete(resource imap_stream, int msg_number)//  Unmark the message which is marked deleted 
#T=imap_unsubscribe
imap_unsubscribe(string imap_stream, string mbox)// Unsubscribe from a mailbox
#T=imap_utf7_decode
imap_utf7_decode(string text)//  Decodes a modified UTF-7 encoded string. 
#T=imap_utf7_encode
imap_utf7_encode(string data)//  Converts ISO-8859-1 string to modified UTF-7 text. 
#T=imap_utf8
imap_utf8(string mime_encoded_text)//  Converts MIME-encoded text to UTF-8 
#T=implode
implode(string glue, array pieces)// Junta elementos de uma matriz em uma string
#T=import_request_variables
import_request_variables(string types [, string prefix])// Import GET/POST/Cookie variables into the global scope
#T=in_array
in_array(mixed needle, array haystack [, bool strict])// Retorna TRUE se um valor existe no array
#T=ingres_autocommit
ingres_autocommit([resource link])// Switch autocommit on or off
#T=ingres_close
ingres_close([resource link])// Close an Ingres II database connection
#T=ingres_commit
ingres_commit([resource link])// Commit a transaction
#T=ingres_connect
ingres_connect([string database [, string username [, string password]]])//  Open a connection to an Ingres II database 
#T=ingres_fetch_array
ingres_fetch_array([int result_type [, resource link]])// Fetch a row of result into an array
#T=ingres_fetch_object
ingres_fetch_object([int result_type [, resource link]])// Fetch a row of result into an object.
#T=ingres_fetch_row
ingres_fetch_row([resource link])//  Fetch a row of result into an enumerated array 
#T=ingres_field_length
ingres_field_length(int index [, resource link])// Get the length of a field
#T=ingres_field_name
ingres_field_name(int index [, resource link])// Get the name of a field in a query result.
#T=ingres_field_nullable
ingres_field_nullable(int index [, resource link])// Test if a field is nullable
#T=ingres_field_precision
ingres_field_precision(int index [, resource link])// Get the precision of a field
#T=ingres_field_scale
ingres_field_scale(int index [, resource link])// Get the scale of a field
#T=ingres_field_type
ingres_field_type(int index [, resource link])//  Get the type of a field in a query result 
#T=ingres_num_fields
ingres_num_fields([resource link])//  Get the number of fields returned by the last query 
#T=ingres_num_rows
ingres_num_rows([resource link])//  Get the number of rows affected or returned by the last query 
#T=ingres_pconnect
ingres_pconnect([string database [, string username [, string password]]])//  Open a persistent connection to an Ingres II database 
#T=ingres_query
ingres_query(string query [, resource link])// Send a SQL query to Ingres II
#T=ingres_rollback
ingres_rollback([resource link])// Roll back a transaction
#T=ini_get
ini_get(string varname)// Gets the value of a configuration option
#T=ini_get_all
ini_get_all([string extension])// Gets all configuration options
#T=ini_restore
ini_restore(string varname)// Restores the value of a configuration option
#T=ini_set
ini_set(string varname, string newvalue)// Sets the value of a configuration option
#T=intval
intval(mixed var [, int base])// Get integer value of a variable
#T=ip2long
ip2long(string ip_address)//  Converts a string containing an (IPv4) Internet Protocol dotted address into a proper address. 
#T=iptcembed
iptcembed(string iptcdata, string jpeg_file_name [, int spool])// Embed binary IPTC data into a JPEG image
#T=iptcparse
iptcparse(string iptcblock)//  Parse a binary IPTC http://www.iptc.org/ block into single tags. 
#T=ircg_channel_mode
ircg_channel_mode(resource connection, string channel, string mode_spec, string nick)//  Set channel mode flags for user 
#T=ircg_disconnect
ircg_disconnect(resource connection, string reason)//  Close connection to server 
#T=ircg_fetch_error_msg
ircg_fetch_error_msg(resource connection)//  Returns the error from previous IRCG operation 
#T=ircg_get_username
ircg_get_username(resource connection)//  Get username for connection 
#T=ircg_html_encode
ircg_html_encode(string html_string)//  Encodes HTML preserving output 
#T=ircg_ignore_add
ircg_ignore_add(resource connection, string nick)//  Add a user to your ignore list on a server 
#T=ircg_ignore_del
ircg_ignore_del(resource connection, string nick)//  Remove a user from your ignore list on a server 
#T=ircg_is_conn_alive
ircg_is_conn_alive(resource connection)//  Check connection status 
#T=ircg_join
ircg_join(resource connection, string channel [, string key])//  Join a channel on a connected server 
#T=ircg_kick
ircg_kick(resource connection, string channel, string nick, string reason)//  Kick a user out of a channel on server 
#T=ircg_lookup_format_messages
ircg_lookup_format_messages(string name)//  Check for the existence of a format message set 
#T=ircg_msg
ircg_msg(resource connection, string recipient, string message [, boolean suppress])//  Send message to channel or user on server 
#T=ircg_nick
ircg_nick(resource connection, string nick)//  Change nickname on server 
#T=ircg_nickname_escape
ircg_nickname_escape(string nick)//  Encode special characters in nickname to be IRC-compliant 
#T=ircg_nickname_unescape
ircg_nickname_unescape(string nick)//  Decodes encoded nickname 
#T=ircg_notice
ircg_notice(resource connection, string , string message)//  Send a notice to a user on server 
#T=ircg_part
ircg_part(resource connection, string channel)//  Leave a channel on server 
#T=ircg_pconnect
ircg_pconnect(string username [, string server_ip [, int server_port [, string msg_format [, array ctcp_messages [, array user_settings]]]]])//  Connect to an IRC server 
#T=ircg_register_format_messages
ircg_register_format_messages(string name, array messages)//  Register a format message set 
#T=ircg_set_current
ircg_set_current(resource connection)//  Set current connection for output 
#T=ircg_set_file
ircg_set_file(resource connection, string path)//  Set logfile for connection 
#T=ircg_set_on_die
ircg_set_on_die(resource connection, string host, int port, string data)//  Set action to be executed when connection dies 
#T=ircg_topic
ircg_topic(resource connection, string channel, string new_topic)//  Set topic for channel on server 
#T=ircg_whois
ircg_whois(resource connection, string nick)//  Query server for user information 
#T=is_a
is_a(object object, string class_name)//  Retorna TRUE se o objeto é desta classe ou tem esta classe como uma de suas classes pai. 
#T=is_array
is_array(mixed var)// Finds whether a variable is an array
#T=is_bool
is_bool(mixed var)//  Finds out whether a variable is a boolean 
#T=is_callable
is_callable(mixed var [, bool syntax_only [, string callable_name]])//  Verify that the contents of a variable can be called as a function 
#T=is_dir
is_dir(string filename)// Diz se o caminho é um diretório
#T=is_executable
is_executable(string nomedoarquivo)// Diz se um arquivo é executável
#T=is_file
is_file(string nomedoarquivo)// Diz se o arquivo é um arquivo comum (não é diretório)
#T=is_finite
is_finite(float val)//  
#T=is_float
is_float(mixed var)// Finds whether a variable is a float
#T=is_infinite
is_infinite(float val)//  
#T=is_int
is_int(mixed var)// Find whether a variable is an integer
#T=is_link
is_link(string arquivo)// Diz se o arquivo é um link simbólico (symbolic link)
#T=is_nan
is_nan(float val)|
#T=is_null
is_null(mixed var)//  Finds whether a variable is NULL 
#T=is_numeric
is_numeric(mixed var)//  Finds whether a variable is a number or a numeric string 
#T=is_object
is_object(mixed var)// Finds whether a variable is an object
#T=is_readable
is_readable(string nomedoarquivo)//  Diz se o arquivo é legivel (readable) 
#T=is_resource
is_resource(mixed var)//  Finds whether a variable is a resource
#T=is_scalar
is_scalar(mixed var)//  Finds whether a variable is a scalar 
#T=is_string
is_string(mixed var)// Finds whether a variable is a string
#T=is_subclass_of
is_subclass_of(object object, string class_name)//  Retorna TRUE se o objeto tem esta classe como uma de suas classes pai 
#T=is_uploaded_file
is_uploaded_file(string filename)// Diz se o arquivo foi uploaded via HTTP POST
#T=is_writable
is_writable(string arquivo)// Diz se pode-se escrever para o arquivo(writable)
#T=is_writeable
is_writeable(string nomedoarquivo)// Diz se pode-se escrever para o arquivo(writable)
#T=isset
isset(mixed var [, mixed var [, ...]])// Determine whether a variable is set
#T=java_last_exception_clear
java_last_exception_clear(void )// Clear last Java exception
#T=java_last_exception_get
java_last_exception_get(void )// Get last Java exception
#T=jddayofweek
jddayofweek(int julianday, int mode)// Returns the day of the week
#T=jdmonthname
jdmonthname(int julianday, int mode)// Returns a month name
#T=jdtofrench
jdtofrench(int juliandaycount)//  Converts a Julian Day Count to the French Republican Calendar 
#T=jdtogregorian
jdtogregorian(int julianday)// Converts Julian Day Count to Gregorian date
#T=jdtojewish
jdtojewish(int juliandaycount [, bool hebrew [, int fl]])//  Converts a julian day count to a jewish calendar date 
#T=jdtojulian
jdtojulian(int julianday)//  Converts a Julian Day Count to a Julian Calendar Date 
#T=jdtounix
jdtounix(int jday)// Convert Julian Day to UNIX timestamp
#T=jewishtojd
jewishtojd(int month, int day, int year)//  Converts a date in the Jewish Calendar to Julian Day Count 
#T=jpeg2wbmp
jpeg2wbmp(string jpegname, string wbmpname, int d_height, int d_width, int threshold)// Convert JPEG image file to WBMP image file
#T=juliantojd
juliantojd(int month, int day, int year)//  Converts a Julian Calendar date to Julian Day Count 
#T=key
key(array array)// Retorna uma chave de um array associativo
#T=krsort
krsort(array array [, int sort_flags])// Ordena um array pelas chaves em ordem descrescente
#T=ksort
ksort(array array [, int sort_flags])// Ordena um array pelas chaves
#T=lcg_value
lcg_value(void )// Gerador congruente linear combinado
#T=ldap_8859_to_t61
ldap_8859_to_t61(string value)//  Translate 8859 characters to t61 characters 
#T=ldap_add
ldap_add(resource link_identifier, string dn, array entry)// Add entries to LDAP directory
#T=ldap_bind
ldap_bind(resource link_identifier [, string bind_rdn [, string bind_password]])// Bind to LDAP directory
#T=ldap_close
ldap_close(resource link_identifier)// Close link to LDAP server
#T=ldap_compare
ldap_compare(resource link_identifier, string dn, string attribute, string value)// Compare value of attribute found in entry specified with DN
#T=ldap_connect
ldap_connect([string hostname [, int port]])// Connect to an LDAP server
#T=ldap_count_entries
ldap_count_entries(resource link_identifier, resource result_identifier)// Count the number of entries in a search
#T=ldap_delete
ldap_delete(resource link_identifier, string dn)// Delete an entry from a directory
#T=ldap_dn2ufn
ldap_dn2ufn(string dn)// Convert DN to User Friendly Naming format
#T=ldap_err2str
ldap_err2str(int errno)//  Convert LDAP error number into string error message 
#T=ldap_errno
ldap_errno(resource link_identifier)//  Return the LDAP error number of the last LDAP command 
#T=ldap_error
ldap_error(resource link_identifier)//  Return the LDAP error message of the last LDAP command 
#T=ldap_explode_dn
ldap_explode_dn(string dn, int with_attrib)// Splits DN into its component parts
#T=ldap_first_attribute
ldap_first_attribute(resource link_identifier, resource result_entry_identifier, int ber_identifier)// Return first attribute
#T=ldap_first_entry
ldap_first_entry(resource link_identifier, resource result_identifier)// Return first result id
#T=ldap_first_reference
ldap_first_reference(resource link, resource result)//  Return first reference 
#T=ldap_free_result
ldap_free_result(resource result_identifier)// Free result memory
#T=ldap_get_attributes
ldap_get_attributes(resource link_identifier, resource result_entry_identifier)// Get attributes from a search result entry
#T=ldap_get_dn
ldap_get_dn(resource link_identifier, resource result_entry_identifier)// Get the DN of a result entry
#T=ldap_get_entries
ldap_get_entries(resource link_identifier, resource result_identifier)// Get all result entries
#T=ldap_get_option
ldap_get_option(resource link_identifier, int option, mixed retval)// Get the current value for given option
#T=ldap_get_values
ldap_get_values(resource link_identifier, resource result_entry_identifier, string attribute)// Get all values from a result entry
#T=ldap_get_values_len
ldap_get_values_len(resource link_identifier, resource result_entry_identifier, string attribute)// Get all binary values from a result entry
#T=ldap_list
ldap_list(resource link_identifier, string base_dn, string filter [, array attributes [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]])// Single-level search
#T=ldap_mod_add
ldap_mod_add(resource link_identifier, string dn, array entry)// Add attribute values to current attributes
#T=ldap_mod_del
ldap_mod_del(resource link_identifier, string dn, array entry)// Delete attribute values from current attributes
#T=ldap_mod_replace
ldap_mod_replace(resoure link_identifier, string dn, array entry)// Replace attribute values with new ones
#T=ldap_modify
ldap_modify(resource link_identifier, string dn, array entry)// Modify an LDAP entry
#T=ldap_next_attribute
ldap_next_attribute(resource link_identifier, resource result_entry_identifier, resource ber_identifier)// Get the next attribute in result
#T=ldap_next_entry
ldap_next_entry(resource link_identifier, resource result_entry_identifier)// Get next result entry
#T=ldap_next_reference
ldap_next_reference(resource link, resource entry)//  Get next reference 
#T=ldap_parse_reference
ldap_parse_reference(resource link, resource entry, array referrals)//  Extract information from reference entry 
#T=ldap_parse_result
ldap_parse_result(resource link, resource result, int errcode, string matcheddn, string errmsg, array referrals)//  Extract information from result 
#T=ldap_read
ldap_read(resource link_identifier, string base_dn, string filter [, array attributes [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]])// Read an entry
#T=ldap_rename
ldap_rename(resource link_identifier, string dn, string newrdn, string newparent, bool deleteoldrdn)// Modify the name of an entry
#T=ldap_search
ldap_search(resource link_identifier, string base_dn, string filter [, array attributes [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]])// Search LDAP tree
#T=ldap_set_option
ldap_set_option(resource link_identifier, int option, mixed newval)// Set the value of the given option
#T=ldap_set_rebind_proc
ldap_set_rebind_proc(resource link, string callback)//  Set a callback function to do re-binds on referral chasing. 
#T=ldap_sort
ldap_sort(resource link, resource result, string sortfilter)//  Sort LDAP result entries 
#T=ldap_start_tls
ldap_start_tls(resource link)//  Start TLS 
#T=ldap_t61_to_8859
ldap_t61_to_8859(string value)//  Translate t61 characters to 8859 characters 
#T=ldap_unbind
ldap_unbind(resource link_identifier)// Unbind from LDAP directory
#T=levenshtein
levenshtein(string str1, string str2)//  Calcula a distância Levenshtein entre duas strings 
#T=link
link(string alvo, string link)// Criando um hard link
#T=linkinfo
linkinfo(string path)// Ler informações sobre um link
#T=list
list(mixed ...)//  Cria variáveis como se fossem arrays 
#T=localeconv
localeconv(void )// Obtém a informação da formatação numérica
#T=localtime
localtime([int timestamp [, bool is_associative]])// Obtém a hora local
#T=log
log(float arg)// Logaritmo natural
#T=log10
log10(float arg)// Logaritmo Base 10
#T=log1p
log1p(float number)//  Retorna o log(1 + numero), calculado de forma que o valor do número seja próximo de zero. 
#T=long2ip
long2ip(int proper_address)//  Converts an (IPv4) Internet network address into a string in Internet standard dotted format 
#T=lstat
lstat(string nomedoarquivo)// Obtem informações sobre um arquivo ou link simbólico 
#T=ltrim
ltrim(string str [, string charlist])//  Retira whitespace do início da string 
#T=mail
mail(string to, string subject, string message [, string additional_headers [, string additional_parameters]])// Envia email
#T=mailparse_determine_best_xfer_encoding
mailparse_determine_best_xfer_encoding(resource fp)//  Figures out the best way of encoding the content read from the file pointer fp, which must be seek-able 
#T=mailparse_msg_create
mailparse_msg_create(void )// Returns a handle that can be used to parse a message 
#T=mailparse_msg_extract_part
mailparse_msg_extract_part(resource rfc2045, string msgbody [, string callbackfunc])//  Extracts/decodes a message section. If callbackfunc is not specified, the contents will be sent to "stdout" 
#T=mailparse_msg_extract_part_file
mailparse_msg_extract_part_file(resource rfc2045, string filename [, string callbackfunc])// Extracts/decodes a message section, decoding the transfer encoding 
#T=mailparse_msg_free
mailparse_msg_free(resource rfc2045buf)// Frees a handle allocated by mailparse_msg_crea
#T=mailparse_msg_get_part
mailparse_msg_get_part(resource rfc2045, string mimesection)// Returns a handle on a given section in a mimemessage 
#T=mailparse_msg_get_part_data
mailparse_msg_get_part_data(resource rfc2045)// Returns an associative array of info about the message 
#T=mailparse_msg_get_structure
mailparse_msg_get_structure(resource rfc2045)// Returns an array of mime section names in the supplied message 
#T=mailparse_msg_parse
mailparse_msg_parse(resource rfc2045buf, string data)// Incrementally parse data into buffer 
#T=mailparse_msg_parse_file
mailparse_msg_parse_file(string filename)// Parse file and return a resource representing the structure 
#T=mailparse_rfc822_parse_addresses
mailparse_rfc822_parse_addresses(string addresses)//  Parse addresses and returns a hash containing that data 
#T=mailparse_stream_encode
mailparse_stream_encode(resource sourcefp, resource destfp, string encoding)//  Streams data from source file pointer, apply encoding and write to destfp 
#T=mailparse_uudecode_all
mailparse_uudecode_all(resource fp)//  Scans the data from fp and extract each embedded uuencoded file. Returns an array listing filename information 
#T=max
max(mixed arg1, mixed arg2, mixed argn)// Localiza o maior número
#T=mb_convert_case
mb_convert_case(string str, int mode [, string encoding])// Perform case folding on a string
#T=mb_convert_encoding
mb_convert_encoding(string str, string to-encoding [, mixed from-encoding])// Convert character encoding
#T=mb_convert_kana
mb_convert_kana(string str, string option [, mixed encoding])//  Convert "kana" one from another ("zen-kaku" ,"han-kaku" and more) 
#T=mb_convert_variables
mb_convert_variables(string to-encoding, mixed from-encoding, mixed vars)// Convert character code in variable(s)
#T=mb_decode_mimeheader
mb_decode_mimeheader(string str)// Decode string in MIME header field
#T=mb_decode_numericentity
mb_decode_numericentity(string str, array convmap [, string encoding])//  Decode HTML numeric string reference to character 
#T=mb_detect_encoding
mb_detect_encoding(string str [, mixed encoding-list])// Detect character encoding
#T=mb_detect_order
mb_detect_order([mixed encoding-list])//  Set/Get character encoding detection order 
#T=mb_encode_mimeheader
mb_encode_mimeheader(string str [, string charset [, string transfer-encoding [, string linefeed]]])// Encode string for MIME header
#T=mb_encode_numericentity
mb_encode_numericentity(string str, array convmap [, string encoding])//  Encode character to HTML numeric string reference 
#T=mb_ereg
mb_ereg(string pattern, string string [, array regs])// Regular expression match with multibyte support
#T=mb_ereg_match
mb_ereg_match(string pattern, string string [, string option])//  Regular expression match for multibyte string 
#T=mb_ereg_replace
mb_ereg_replace(string pattern, string replacement, string string [, array option])// Replace regular expression with multibyte support
#T=mb_ereg_search
mb_ereg_search([string pattern [, string option]])//  Multibyte regular expression match for predefined multibyte string 
#T=mb_ereg_search_getpos
mb_ereg_search_getpos(void )//  Returns start point for next regular expression match 
#T=mb_ereg_search_getregs
mb_ereg_search_getregs(void )//  Retrive the result from the last multibyte regular expression match 
#T=mb_ereg_search_init
mb_ereg_search_init(string string [, string pattern [, string option]])//  Setup string and regular expression for multibyte regular expression match 
#T=mb_ereg_search_pos
mb_ereg_search_pos([string pattern [, string option]])//  Return position and length of matched part of multibyte regular expression for predefined multibyte string 
#T=mb_ereg_search_regs
mb_ereg_search_regs([string pattern [, string option]])//  Returns the matched part of multibyte regular expression 
#T=mb_ereg_search_setpos
mb_ereg_search_setpos(void )//  Set start point of next regular expression match 
#T=mb_eregi
mb_eregi(string pattern, string string [, array regs])//  Regular expression match ignoring case with multibyte support 
#T=mb_eregi_replace
mb_eregi_replace(string pattern, string replace, string string)//  Replace regular expression with multibyte support ignoring case 
#T=mb_get_info
mb_get_info([string type])// Get internal settings of mbstring
#T=mb_http_input
mb_http_input([string type])// Detect HTTP input character encoding
#T=mb_http_output
mb_http_output([string encoding])// Set/Get HTTP output character encoding
#T=mb_internal_encoding
mb_internal_encoding([string encoding])//  Set/Get internal character encoding 
#T=mb_language
mb_language([string language])//  Set/Get current language 
#T=mb_output_handler
mb_output_handler(string contents, int status)//  Callback function converts character encoding in output buffer 
#T=mb_parse_str
mb_parse_str(string encoded_string [, array result])//  Parse GET/POST/COOKIE data and set global variable 
#T=mb_preferred_mime_name
mb_preferred_mime_name(string encoding)// Get MIME charset string
#T=mb_regex_encoding
mb_regex_encoding([string encoding])//  Returns current encoding for multibyte regex as string 
#T=mb_regex_set_options
mb_regex_set_options([string options])//  Set/Get the default options for mbregex functions 
#T=mb_send_mail
mb_send_mail(string to, string subject, string message [, string additional_headers [, string additional_parameter]])//  Send encoded mail. 
#T=mb_split
mb_split(string pattern, string string [, int limit])// Split multibyte string using regular expression
#T=mb_strcut
mb_strcut(string str, int start [, int length [, string encoding]])// Get part of string
#T=mb_strimwidth
mb_strimwidth(string str, int start, int width, string trimmarker [, string encoding])// Get truncated string with specified width
#T=mb_strlen
mb_strlen(string str [, string encoding])// Get string length
#T=mb_strpos
mb_strpos(string haystack, string needle [, int offset [, string encoding]])//  Find position of first occurrence of string in a string 
#T=mb_strrpos
mb_strrpos(string haystack, string needle [, string encoding])//  Find position of last occurrence of a string in a string 
#T=mb_strtolower
mb_strtolower(string str [, string encoding])// Make a string lowercase
#T=mb_strtoupper
mb_strtoupper(string str [, string encoding])// Make a string uppercase
#T=mb_strwidth
mb_strwidth(string str [, string encoding])// Return width of string
#T=mb_substitute_character
mb_substitute_character([mixed substrchar])// Set/Get substitution character
#T=mb_substr
mb_substr(string str, int start [, int length [, string encoding]])// Get part of string
#T=mb_substr_count
mb_substr_count(string haystack, string needle [, string encoding])// Count the number of substring occurrences
#T=mcal_append_event
mcal_append_event(int mcal_stream)// Store a new event into an MCAL calendar
#T=mcal_close
mcal_close(int mcal_stream, int flags)// Close an MCAL stream
#T=mcal_create_calendar
mcal_create_calendar(int stream, string calendar)// Create a new MCAL calendar 
#T=mcal_date_compare
mcal_date_compare(int a_year, int a_month, int a_day, int b_year, int b_month, int b_day)// Compares two dates
#T=mcal_date_valid
mcal_date_valid(int year, int month, int day)//  Returns TRUE if the given year, month, day is a valid date 
#T=mcal_day_of_week
mcal_day_of_week(int year, int month, int day)//  Returns the day of the week of the given date 
#T=mcal_day_of_year
mcal_day_of_year(int year, int month, int day)//  Returns the day of the year of the given date 
#T=mcal_days_in_month
mcal_days_in_month(int month, int leap_year)//  Returns the number of days in a month 
#T=mcal_delete_calendar
mcal_delete_calendar(int stream, string calendar)// Delete an MCAL calendar
#T=mcal_delete_event
mcal_delete_event(int mcal_stream [, int event_id])// Delete an event from an MCAL calendar
#T=mcal_event_add_attribute
mcal_event_add_attribute(int stream, string attribute, string value)//  Adds an attribute and a value to the streams global event structure 
#T=mcal_event_init
mcal_event_init(int stream)//  Initializes a streams global event structure 
#T=mcal_event_set_alarm
mcal_event_set_alarm(int stream, int alarm)//  Sets the alarm of the streams global event structure 
#T=mcal_event_set_category
mcal_event_set_category(int stream, string category)//  Sets the category of the streams global event structure 
#T=mcal_event_set_class
mcal_event_set_class(int stream, int class)//  Sets the class of the streams global event structure 
#T=mcal_event_set_description
mcal_event_set_description(int stream, string description)//  Sets the description of the streams global event structure 
#T=mcal_event_set_end
mcal_event_set_end(int stream, int year, int month [, int day [, int hour [, int min [, int sec]]]])//  Sets the end date and time of the streams global event structure 
#T=mcal_event_set_recur_daily
mcal_event_set_recur_daily(int stream, int year, int month, int day, int interval)//  Sets the recurrence of the streams global event structure 
#T=mcal_event_set_recur_monthly_mday
mcal_event_set_recur_monthly_mday(int stream, int year, int month, int day, int interval)//  Sets the recurrence of the streams global event structure 
#T=mcal_event_set_recur_monthly_wday
mcal_event_set_recur_monthly_wday(int stream, int year, int month, int day, int interval)//  Sets the recurrence of the streams global event structure 
#T=mcal_event_set_recur_none
mcal_event_set_recur_none(int stream)//  Sets the recurrence of the streams global event structure 
#T=mcal_event_set_recur_weekly
mcal_event_set_recur_weekly(int stream, int year, int month, int day, int interval, int weekdays)//  Sets the recurrence of the streams global event structure 
#T=mcal_event_set_recur_yearly
mcal_event_set_recur_yearly(int stream, int year, int month, int day, int interval)//  Sets the recurrence of the streams global event structure 
#T=mcal_event_set_start
mcal_event_set_start(int stream, int year, int month [, int day [, int hour [, int min [, int sec]]]])//  Sets the start date and time of the streams global event structure 
#T=mcal_event_set_title
mcal_event_set_title(int stream, string title)//  Sets the title of the streams global event structure 
#T=mcal_expunge
mcal_expunge(int stream)//  Deletes all events marked for being expunged. 
#T=mcal_fetch_current_stream_event
mcal_fetch_current_stream_event(int stream)//  Returns an object containing the current streams event structure 
#T=mcal_fetch_event
mcal_fetch_event(int mcal_stream, int event_id [, int options])//  Fetches an event from the calendar stream 
#T=mcal_is_leap_year
mcal_is_leap_year(int year)//  Returns if the given year is a leap year or not 
#T=mcal_list_alarms
mcal_list_alarms(int mcal_stream [, int begin_year [, int begin_month [, int begin_day [, int end_year [, int end_month [, int end_day]]]]]])//  Return a list of events that has an alarm triggered at the given datetime 
#T=mcal_list_events
mcal_list_events(int mcal_stream, object begin_date [, object end_date])//  Return a list of IDs for a date or a range of dates 
#T=mcal_next_recurrence
mcal_next_recurrence(int stream, int weekstart, array next)// Returns the next recurrence of the event
#T=mcal_open
mcal_open(string calendar, string username, string password [, int options])// Opens up an MCAL connection
#T=mcal_popen
mcal_popen(string calendar, string username, string password [, int options])// Opens up a persistent MCAL connection
#T=mcal_rename_calendar
mcal_rename_calendar(int stream, string old_name, string new_name)// Rename an MCAL calendar 
#T=mcal_reopen
mcal_reopen(string calendar [, int options])// Reopens an MCAL connection
#T=mcal_snooze
mcal_snooze(int stream_id, int event_id)// Turn off an alarm for an event
#T=mcal_store_event
mcal_store_event(int mcal_stream)// Modify an existing event in an MCAL calendar
#T=mcal_time_valid
mcal_time_valid(int hour, int minutes, int seconds)//  Returns TRUE if the given year, month, day is a valid time 
#T=mcal_week_of_year
mcal_week_of_year(int day, int month, int year)//  Returns the week number of the given date
#T=mcrypt_cbc
mcrypt_cbc(int cipher, string key, string data, int mode [, string iv])// Encrypt/decrypt data in CBC mode
#T=mcrypt_cfb
mcrypt_cfb(int cipher, string key, string data, int mode, string iv)// Encrypt/decrypt data in CFB mode
#T=mcrypt_create_iv
mcrypt_create_iv(int size, int source)//  Create an initialization vector (IV) from a random source 
#T=mcrypt_decrypt
mcrypt_decrypt(string cipher, string key, string data, string mode [, string iv])// Decrypts crypttext with given parameters
#T=mcrypt_ecb
mcrypt_ecb(int cipher, string key, string data, int mode)// Encrypt/decrypt data in ECB mode
#T=mcrypt_enc_get_algorithms_name
mcrypt_enc_get_algorithms_name(resource td)// Returns the name of the opened algorithm
#T=mcrypt_enc_get_block_size
mcrypt_enc_get_block_size(resource td)// Returns the blocksize of the opened algorithm
#T=mcrypt_enc_get_iv_size
mcrypt_enc_get_iv_size(resource td)// Returns the size of the IV of the opened algorithm
#T=mcrypt_enc_get_key_size
mcrypt_enc_get_key_size(resource td)// Returns the maximum supported keysize of the opened mode
#T=mcrypt_enc_get_modes_name
mcrypt_enc_get_modes_name(resource td)// Returns the name of the opened mode
#T=mcrypt_enc_get_supported_key_sizes
mcrypt_enc_get_supported_key_sizes(resource td)// Returns an array with the supported keysizes of the opened algorithm
#T=mcrypt_enc_is_block_algorithm
mcrypt_enc_is_block_algorithm(resource td)// Checks whether the algorithm of the opened mode is a block algorithm
#T=mcrypt_enc_is_block_algorithm_mode
mcrypt_enc_is_block_algorithm_mode(resource td)// Checks whether the encryption of the opened mode works on blocks
#T=mcrypt_enc_is_block_mode
mcrypt_enc_is_block_mode(resource td)// Checks whether the opened mode outputs blocks
#T=mcrypt_enc_self_test
mcrypt_enc_self_test(resource td)// This function runs a self test on the opened module
#T=mcrypt_encrypt
mcrypt_encrypt(string cipher, string key, string data, string mode [, string iv])// Encrypts plaintext with given parameters
#T=mcrypt_generic
mcrypt_generic(resource td, string data)// This function encrypts data
#T=mcrypt_generic_deinit
mcrypt_generic_deinit(resource td)//  This function deinitializes an encryption module 
#T=mcrypt_generic_end
mcrypt_generic_end(resource td)// This function terminates encryption
#T=mcrypt_generic_init
mcrypt_generic_init(resource td, string key, string iv)// This function initializes all buffers needed for encryption
#T=mcrypt_get_block_size
mcrypt_get_block_size(int cipher)// Get the block size of the specified cipher
#T=mcrypt_get_cipher_name
mcrypt_get_cipher_name(int cipher)// Get the name of the specified cipher
#T=mcrypt_get_iv_size
mcrypt_get_iv_size(resource td)//  Returns the size of the IV belonging to a specific cipher/mode combination 
#T=mcrypt_get_key_size
mcrypt_get_key_size(int cipher)// Get the key size of the specified cipher
#T=mcrypt_list_algorithms
mcrypt_list_algorithms([string lib_dir])// Get an array of all supported ciphers
#T=mcrypt_list_modes
mcrypt_list_modes([string lib_dir])// Get an array of all supported modes
#T=mcrypt_module_close
mcrypt_module_close(resource td)//  Close the mcrypt module 
#T=mcrypt_module_get_algo_block_size
mcrypt_module_get_algo_block_size(string algorithm [, string lib_dir])// Returns the blocksize of the specified algorithm
#T=mcrypt_module_get_algo_key_size
mcrypt_module_get_algo_key_size(string algorithm [, string lib_dir])// Returns the maximum supported keysize of the opened mode
#T=mcrypt_module_get_supported_key_sizes
mcrypt_module_get_supported_key_sizes(string algorithm [, string lib_dir])// Returns an array with the supported keysizes of the opened algorithm
#T=mcrypt_module_is_block_algorithm
mcrypt_module_is_block_algorithm(string algorithm [, string lib_dir])// This function checks whether the specified algorithm is a block algorithm
#T=mcrypt_module_is_block_algorithm_mode
mcrypt_module_is_block_algorithm_mode(string mode [, string lib_dir])// This function returns if the the specified module is a block algorithm or not
#T=mcrypt_module_is_block_mode
mcrypt_module_is_block_mode(string mode [, string lib_dir])// This function returns if the the specified mode outputs blocks or not
#T=mcrypt_module_open
mcrypt_module_open(string algorithm, string algorithm_directory, string mode, string mode_directory)// Opens the module of the algorithm and the mode to be used
#T=mcrypt_module_self_test
mcrypt_module_self_test(string algorithm [, string lib_dir])// This function runs a self test on the specified module
#T=mcrypt_ofb
mcrypt_ofb(int cipher, string key, string data, int mode, string iv)// Encrypt/decrypt data in OFB mode
#T=mcve_adduser
mcve_adduser(resource conn, string admin_password, int usersetup)//  Add an MCVE user using usersetup structure 
#T=mcve_adduserarg
mcve_adduserarg(resource usersetup, int argtype, string argval)//  Add a value to user configuration structure 
#T=mcve_bt
mcve_bt(resource conn, string username, string password)//  Get unsettled batch totals 
#T=mcve_checkstatus
mcve_checkstatus(resource conn, int identifier)//  Check to see if a transaction has completed 
#T=mcve_chkpwd
mcve_chkpwd(resource conn, string username, string password)//  Verify Password 
#T=mcve_chngpwd
mcve_chngpwd(resource conn, string admin_password, string new_password)//  Change the system administrator's password 
#T=mcve_completeauthorizations
mcve_completeauthorizations(resource conn, int &array)//  Number of complete authorizations in queue, returning an array of their identifiers 
#T=mcve_connect
mcve_connect(resource conn)//  Establish the connection to MCVE 
#T=mcve_connectionerror
mcve_connectionerror(resource conn)//  Get a textual representation of why a connection failed 
#T=mcve_deleteresponse
mcve_deleteresponse(resource conn, int identifier)//  Delete specified transaction from MCVE_CONN structure 
#T=mcve_deletetrans
mcve_deletetrans(resource conn, int identifier)//  Delete specified transaction from MCVE_CONN structure 
#T=mcve_deleteusersetup
mcve_deleteusersetup(resource usersetup)//  Deallocate data associated with usersetup structure 
#T=mcve_deluser
mcve_deluser(resource conn, string admin_password, string username)//  Delete an MCVE user account 
#T=mcve_destroyconn
mcve_destroyconn(resource conn)//  Destroy the connection and MCVE_CONN structure 
#T=mcve_destroyengine
mcve_destroyengine(void )//  Free memory associated with IP/SSL connectivity 
#T=mcve_disableuser
mcve_disableuser(resource conn, string admin_password, string username)//  Disable an active MCVE user account 
#T=mcve_edituser
mcve_edituser(resource conn, string admin_password, int usersetup)//  Edit MCVE user using usersetup structure 
#T=mcve_enableuser
mcve_enableuser(resource conn, string admin_password, string username)//  Enable an inactive MCVE user account 
#T=mcve_force
mcve_force(resiurce conn, string username, string password, string trackdata, string account, string expdate, float amount, string authcode, string comments, string clerkid, string stationid, int ptrannum)//  Send a FORCE to MCVE. (typically, a phone-authorization) 
#T=mcve_getcell
mcve_getcell(resource conn, int identifier, string column, int row)//  Get a specific cell from a comma delimited response by column name 
#T=mcve_getcellbynum
mcve_getcellbynum(resource conn, int identifier, int column, int row)//  Get a specific cell from a comma delimited response by column number 
#T=mcve_getcommadelimited
mcve_getcommadelimited(resource conn, int identifier)//  Get the RAW comma delimited data returned from MCVE 
#T=mcve_getheader
mcve_getheader(resource conn, int identifier, int column_num)//  Get the name of the column in a comma-delimited response 
#T=mcve_getuserarg
mcve_getuserarg(resource usersetup, int argtype)//  Grab a value from usersetup structure 
#T=mcve_getuserparam
mcve_getuserparam(resource conn, long identifier, int key)//  Get a user response parameter 
#T=mcve_gft
mcve_gft(resource conn, string username, string password, int type, string account, string clerkid, string stationid, string comments, int ptrannum, string startdate, string enddate)//  Audit MCVE for Failed transactions 
#T=mcve_gl
mcve_gl(int conn, string username, string password, int type, string account, string batch, string clerkid, string stationid, string comments, int ptrannum, string startdate, string enddate)//  Audit MCVE for settled transactions 
#T=mcve_gut
mcve_gut(resource conn, string username, string password, int type, string account, string clerkid, string stationid, string comments, int ptrannum, string startdate, string enddate)//  Audit MCVE for Unsettled Transactions 
#T=mcve_initconn
mcve_initconn(void )//  Create and initialize an MCVE_CONN structure 
#T=mcve_initengine
mcve_initengine(string location)//  Ready the client for IP/SSL Communication 
#T=mcve_initusersetup
mcve_initusersetup(void )//  Initialize structure to store user data 
#T=mcve_iscommadelimited
mcve_iscommadelimited(resource conn, int identifier)//  Checks to see if response is comma delimited 
#T=mcve_liststats
mcve_liststats(resource conn, string admin_password)//  List statistics for all users on MCVE system 
#T=mcve_listusers
mcve_listusers(resource conn, string admin_password)//  List all users on MCVE system 
#T=mcve_maxconntimeout
mcve_maxconntimeout(resource conn, int secs)//  The maximum amount of time the API will attempt a connection to MCVE 
#T=mcve_monitor
mcve_monitor(resource conn)//  Perform communication with MCVE (send/receive data) Non-blocking 
#T=mcve_numcolumns
mcve_numcolumns(resource conn, int identifier)//  Number of columns returned in a comma delimited response 
#T=mcve_numrows
mcve_numrows(resource conn, int identifier)//  Number of rows returned in a comma delimited response 
#T=mcve_override
mcve_override(resource conn, string username, string password, string trackdata, string account, string expdate, float amount, string street, string zip, string cv, string comments, string clerkid, string stationid, int ptrannum)//  Send an OVERRIDE to MCVE 
#T=mcve_parsecommadelimited
mcve_parsecommadelimited(resource conn, int identifier)//  Parse the comma delimited response so mcve_getcell, etc will work 
#T=mcve_ping
mcve_ping(resource conn)//  Send a ping request to MCVE 
#T=mcve_preauth
mcve_preauth(resource conn, string username, string password, string trackdata, string account, string expdate, float amount, string street, string zip, string cv, string comments, string clerkid, string stationid, int ptrannum)//  Send a PREAUTHORIZATION to MCVE 
#T=mcve_preauthcompletion
mcve_preauthcompletion(resource conn, string username, string password, float finalamount, int sid, int ptrannum)//  Complete a PREAUTHORIZATION... Ready it for settlement 
#T=mcve_qc
mcve_qc(resource conn, string username, string password, string clerkid, string stationid, string comments, int ptrannum)//  Audit MCVE for a list of transactions in the outgoing queue 
#T=mcve_responseparam
mcve_responseparam(resource conn, long identifier, string key)//  Get a custom response parameter 
#T=mcve_return
mcve_return(int conn, string username, string password, string trackdata, string account, string expdate, float amount, string comments, string clerkid, string stationid, int ptrannum)//  Issue a RETURN or CREDIT to MCVE 
#T=mcve_returncode
mcve_returncode(resource conn, int identifier)//  Grab the exact return code from the transaction 
#T=mcve_returnstatus
mcve_returnstatus(resource conn, int identifier)//  Check to see if the transaction was successful 
#T=mcve_sale
mcve_sale(resource conn, string username, string password, string trackdata, string account, string expdate, float amount, string street, string zip, string cv, string comments, string clerkid, string stationid, int ptrannum)//  Send a SALE to MCVE 
#T=mcve_setblocking
mcve_setblocking(resource conn, int tf)//  Set blocking/non-blocking mode for connection 
#T=mcve_setdropfile
mcve_setdropfile(resource conn, string directory)//  Set the connection method to Drop-File 
#T=mcve_setip
mcve_setip(resource conn, string host, int port)//  Set the connection method to IP 
#T=mcve_setssl
mcve_setssl(resource conn, string host, int port)//  Set the connection method to SSL 
#T=mcve_setssl_files
mcve_setssl_files(string sslkeyfile, string sslcertfile)//  Set certificate key files and certificates if server requires client certificate verification 
#T=mcve_settimeout
mcve_settimeout(resource conn, int seconds)//  Set maximum transaction time (per trans) 
#T=mcve_settle
mcve_settle(resource conn, string username, string password, string batch)//  Issue a settlement command to do a batch deposit 
#T=mcve_text_avs
mcve_text_avs(string code)//  Get a textual representation of the return_avs 
#T=mcve_text_code
mcve_text_code(string code)//  Get a textual representation of the return_code 
#T=mcve_text_cv
mcve_text_cv(int code)//  Get a textual representation of the return_cv 
#T=mcve_transactionauth
mcve_transactionauth(resource conn, int identifier)//  Get the authorization number returned for the transaction (alpha-numeric) 
#T=mcve_transactionavs
mcve_transactionavs(resource conn, int identifier)//  Get the Address Verification return status 
#T=mcve_transactionbatch
mcve_transactionbatch(resource conn, int identifier)//  Get the batch number associated with the transaction 
#T=mcve_transactioncv
mcve_transactioncv(resource conn, int identifier)//  Get the CVC2/CVV2/CID return status 
#T=mcve_transactionid
mcve_transactionid(resource conn, int identifier)//  Get the unique system id for the transaction 
#T=mcve_transactionitem
mcve_transactionitem(resource conn, int identifier)//  Get the ITEM number in the associated batch for this transaction 
#T=mcve_transactionssent
mcve_transactionssent(resource conn)//  Check to see if outgoing buffer is clear 
#T=mcve_transactiontext
mcve_transactiontext(resource conn, int identifier)//  Get verbiage (text) return from MCVE or processing institution 
#T=mcve_transinqueue
mcve_transinqueue(resource conn)//  Number of transactions in client-queue 
#T=mcve_transnew
mcve_transnew(resource conn)//  Start a new transaction 
#T=mcve_transparam
mcve_transparam(resource conn, long identifier, int key)//  Add a parameter to a transaction 
#T=mcve_transsend
mcve_transsend(resource conn, long identifier)//  Finalize and send the transaction 
#T=mcve_ub
mcve_ub(resource conn, string username, string password)//  Get a list of all Unsettled batches 
#T=mcve_uwait
mcve_uwait(long microsecs)//  Wait x microsecs 
#T=mcve_verifyconnection
mcve_verifyconnection(resource conn, int tf)//  Set whether or not to PING upon connect to verify connection 
#T=mcve_verifysslcert
mcve_verifysslcert(resource conn, int tf)//  Set whether or not to verify the server ssl certificate 
#T=mcve_void
mcve_void(resource conn, string username, string password, int sid, int ptrannum)//  VOID a transaction in the settlement queue 
#T=md5
md5(string str)// Calcula hash md5 de uma string
#T=md5_file
md5_file(string filename [, bool raw_output])// Calcula hash md5 de um dado arquivo
#T=mdecrypt_generic
mdecrypt_generic(resource td, string data)// Decrypt data
#T=memory_get_usage
memory_get_usage(void )// Returns the amount of memory allocated to PHP
#T=metaphone
metaphone(string str)// Calcula a metaphone key de uma string
#T=method_exists
method_exists(object object, string method_name)// Checa se o método da classe existe
#T=mhash
mhash(int hash, string data, string [ key ])// Computar a hash
#T=mhash_count
mhash_count(void )// Ler o mais alto hash id disponível
#T=mhash_get_block_size
mhash_get_block_size(int hash)// Ler o tamanho do bloco da hash específicada
#T=mhash_get_hash_name
mhash_get_hash_name(int hash)// Ler o nome da hash especificada
#T=mhash_keygen_s2k
mhash_keygen_s2k(int hash, string password, string salt, int bytes)// Gerar uma chave
#T=microtime
microtime(void )//  Retorna um timestamp UNIX com microsegundos
#T=mime_content_type
mime_content_type(string filename)// Detect MIME Content-type for a file
#T=min
min(number arg1, number arg2 [, ...])// Localiza o menor número
#T=ming_setcubicthreshold
ming_setcubicthreshold(int threshold)//  Set cubic threshold (?) 
#T=ming_setscale
ming_setscale(int scale)//  Set scale (?) 
#T=ming_useswfversion
ming_useswfversion(int version)//  Use SWF version (?) 
#T=mkdir
mkdir(string pathname, int mode)// Criar um diretório
#T=mktime
mktime(int hour, int minute, int second, int month, int day, int year [, int is_dst])// Obtém um modelo UNIX para uma data
#T=money_format
money_format(string format, float number)// Formats a number as a currency string
#T=move_uploaded_file
move_uploaded_file(string nomedoarquivo, string destino)// Move um arquivo carregado para uma nova localização
#T=msession_connect
msession_connect(string host, string port)// Connect to msession server 
#T=msession_count
msession_count(void )// Get session count 
#T=msession_create
msession_create(string session)// Create a session 
#T=msession_destroy
msession_destroy(string name)// Destroy a session 
#T=msession_disconnect
msession_disconnect(void )// Close connection to msession server 
#T=msession_find
msession_find(string name, string value)// Find value 
#T=msession_get
msession_get(string session, string name, string value)// Get value from session 
#T=msession_get_array
msession_get_array(string session)// Get array of ... ? 
#T=msession_getdata
msession_getdata(string session)// Get data ... ? 
#T=msession_inc
msession_inc(string session, string name)// Increment value in session 
#T=msession_list
msession_list(void )// List ... ? 
#T=msession_listvar
msession_listvar(string name)// List sessions with variable
#T=msession_lock
msession_lock(string name)// Lock a session 
#T=msession_plugin
msession_plugin(string session, string val [, string param])// Call an escape function within the msession personality plugin
#T=msession_randstr
msession_randstr(int param)// Get random string 
#T=msession_set
msession_set(string session, string name, string value)// Set value in session 
#T=msession_set_array
msession_set_array(string session, array tuples)// Set array of ... 
#T=msession_setdata
msession_setdata(string session, string value)// Set data ... ?
#T=msession_timeout
msession_timeout(string session [, int param])// Set/get session timeout 
#T=msession_uniq
msession_uniq(int param)// Get uniq id 
#T=msession_unlock
msession_unlock(string session, int key)// Unlock a session 
#T=msg_get_queue
msg_get_queue(int key [, int perms])//  Create or attach to a message queue 
#T=msg_receive
msg_receive(int queue, int desiredmsgtype, int msgtype, int maxsize, mixed message [, bool unserialize [, int flags [, int errorcode]]])//  Receive a message from a message queue 
#T=msg_remove_queue
msg_remove_queue(int queue)//  Destroy a message queue 
#T=msg_send
msg_send(int queue, int msgtype, mixed message [, bool serialize [, bool blocking [, int errorcode]]])//  Send a message to a message queue 
#T=msg_set_queue
msg_set_queue(int queue, array data)//  Set information in the message queue data structure 
#T=msg_stat_queue
msg_stat_queue(int queue)//  Returns information from the message queue data structure 
#T=msql
msql(string database, string query, int link_identifier)// Send mSQL query
#T=msql_affected_rows
msql_affected_rows(int query_identifier)// Returns number of affected rows
#T=msql_close
msql_close(int link_identifier)// Close mSQL connection
#T=msql_connect
msql_connect([string hostname [, string server [, string username [, string password]]]])// Open mSQL connection
#T=msql_create_db
msql_create_db(string database_name [, int link_identifier])// Create mSQL database
#T=msql_createdb
msql_createdb(string database_name [, int link_identifier])// Create mSQL database
#T=msql_data_seek
msql_data_seek(int query_identifier, int row_number)// Move internal row pointer
#T=msql_dbname
msql_dbname(int query_identifier, int i)// Get current mSQL database name
#T=msql_drop_db
msql_drop_db(string database_name, int link_identifier)// Drop (delete) mSQL database
#T=msql_error
msql_error([int link_identifier])// Returns error message of last msql call
#T=msql_fetch_array
msql_fetch_array(int query_identifier [, int result_type])// Fetch row as array
#T=msql_fetch_field
msql_fetch_field(int query_identifier, int field_offset)// Get field information
#T=msql_fetch_object
msql_fetch_object(int query_identifier [, int result_type])// Fetch row as object
#T=msql_fetch_row
msql_fetch_row(int query_identifier)// Get row as enumerated array
#T=msql_field_seek
msql_field_seek(int query_identifier, int field_offset)// Set field offset
#T=msql_fieldflags
msql_fieldflags(int query_identifier, int i)// Get field flags
#T=msql_fieldlen
msql_fieldlen(int query_identifier, int i)// Get field length
#T=msql_fieldname
msql_fieldname(int query_identifier, int field)// Get field name
#T=msql_fieldtable
msql_fieldtable(int query_identifier, int field)// Get table name for field
#T=msql_fieldtype
msql_fieldtype(int query_identifier, int i)// Get field type
#T=msql_free_result
msql_free_result(int query_identifier)// Free result memory
#T=msql_list_dbs
msql_list_dbs(void )// List mSQL databases on server
#T=msql_list_fields
msql_list_fields(string database, string tablename)// List result fields
#T=msql_list_tables
msql_list_tables(string database)// List tables in an mSQL database
#T=msql_num_fields
msql_num_fields(int query_identifier)// Get number of fields in result
#T=msql_num_rows
msql_num_rows(int query_identifier)// Get number of rows in result
#T=msql_numfields
msql_numfields(int query_identifier)// Get number of fields in result
#T=msql_numrows
msql_numrows(void )// Get number of rows in result
#T=msql_pconnect
msql_pconnect([string server [, string username [, string password]]])// Open persistent mSQL connection
#T=msql_query
msql_query(string query, int link_identifier)// Send mSQL query
#T=msql_result
msql_result(int query_identifier, int i, mixed field)// Get result data
#T=msql_select_db
msql_select_db(string database_name, int link_identifier)// Select mSQL database
#T=msql_tablename
msql_tablename(int query_identifier, int field)// Get table name of field
#T=mssql_bind
mssql_bind(int stmt, string param_name, mixed var, int type [, int is_output [, int is_null [, int maxlen]]])//  Adiciona um parâmetro a um stored procedure ou a um remote stored procedure 
#T=mssql_close
mssql_close([int link_identifier])// Fecha a conexão com o servidor MS SQL
#T=mssql_connect
mssql_connect([string nomedoservidor [, string username [, string password]]])// Abre uma conexão com o servidor MS SQL
#T=mssql_data_seek
mssql_data_seek(int result_identifier, int row_number)// Move o ponteiro interno da linha
#T=mssql_execute
mssql_execute(int stmt)//  Executa uma stored procedure num banco de dados de um servidor MS SQL 
#T=mssql_fetch_array
mssql_fetch_array(int result [, int result_type])// Retorna uma linha como uma matriz associativa, matriz numérica ou ambas
#T=mssql_fetch_assoc
mssql_fetch_assoc(int result_id [, int result_type])//  Retorna uma matriz associativa da linha atual do conjunto de resultados especificado por result_id 
#T=mssql_fetch_batch
mssql_fetch_batch(string result_index)//  Retorna o próximo lote de registros 
#T=mssql_fetch_field
mssql_fetch_field(int result [, int field_offset])// Retorna informação sobre o campo
#T=mssql_fetch_object
mssql_fetch_object(int result)// Devolve a linha como um objeto
#T=mssql_fetch_row
mssql_fetch_row(int result)// Retorna uma matriz enumerada
#T=mssql_field_length
mssql_field_length(int result [, int offset])// Retorna o tamanho de um campo
#T=mssql_field_seek
mssql_field_seek(int result, int field_offset)// Estabelece o índice do campo
#T=mssql_free_result
mssql_free_result(int result)// Limpa o resultado da memória
#T=mssql_free_statement
mssql_free_statement(resource statement)// Free statement memory
#T=mssql_guid_string
mssql_guid_string(string binary [, int short_format])//  Converte um 16 byte binary GUID para uma string
#T=mssql_init
mssql_init(string sp_name [, int conn_id])//  Inicializa um stored procedure ou um remote stored procedure 
#T=mssql_next_result
mssql_next_result(int result_id)// Move o ponteiro interno do resultado para o próximo resultado
#T=mssql_num_fields
mssql_num_fields(int result)// Retorna o número de campos em um resultado
#T=mssql_num_rows
mssql_num_rows(int result)// Retorna o número de linhas em um resultado
#T=mssql_pconnect
mssql_pconnect([string servername [, string username [, string password]]])// Abre uma conexão persistente com MS SQL
#T=mssql_query
mssql_query(string query [, int link_identifier])// Envia uma query ao MS SQL
#T=mssql_result
mssql_result(int result, int i, mixed field)// Retorna dados do resultado
#T=mssql_rows_affected
mssql_rows_affected(int conn_id)//  Retorna o número de registros afetados pela query 
#T=mssql_select_db
mssql_select_db(string database_name [, int link_identifier])// Seleciona um banco de dados do MS SQL
#T=mt_getrandmax
mt_getrandmax(void )// Retorna o maior valor aletório possível
#T=mt_rand
mt_rand([int min, int max])// Gerador melhorado de números aleatórios
#T=mt_srand
mt_srand(int seed)// Semeia o gerador melhorado de números aleatórios
#T=muscat_close
muscat_close(resource muscat_handle)// Shuts down the muscat session and releases any memory back to PHP.
#T=muscat_get
muscat_get(resource muscat_handle)// Gets a line back from the core muscat API. 
#T=muscat_give
muscat_give(resource muscat_handle, string string)// Sends string to the core muscat API
#T=muscat_setup
muscat_setup(int size [, string muscat_dir])// Creates a new muscat session and returns the handle.
#T=muscat_setup_net
muscat_setup_net(string muscat_host, int port)// Creates a new muscat session and returns the handle.
#T=mysql_affected_rows
mysql_affected_rows([resource link_identifier])// Devolve o número de linhas afetadas na operação anterior com o MySQL
#T=mysql_change_user
mysql_change_user(string user, string password [, string database [, resource link_identifier]])//  Muda o usuário logado da conexão ativa 
#T=mysql_client_encoding
mysql_client_encoding([resource link_identifier])// Retorna o nome do conjunto de caracteres
#T=mysql_close
mysql_close([resource link_identifier])// Fecha a conexão com o MySQL
#T=mysql_connect
mysql_connect([string server [, string username [, string password [, bool new_link [, int client_flags]]]]])// Abre uma conexão com o servidor MySQL
#T=mysql_create_db
mysql_create_db(string database_name [, resource link_identifier])// Cria um banco de dados do MySQL
#T=mysql_data_seek
mysql_data_seek(resource result_identifier, int row_number)// Move o ponteiro interno do resultado
#T=mysql_db_name
mysql_db_name(resource result, int row [, mixed field])// Retorna os nomes dos bancos de dados
#T=mysql_db_query
mysql_db_query(string database, string query [, resource link_identifier])// Envia uma query ao MySQL
#T=mysql_drop_db
mysql_drop_db(string database_name [, resource link_identifier])// Apaga um banco de dados do MySQL
#T=mysql_errno
mysql_errno([resource link_identifier])//  Retorna o valor numérico da mensagem de erro da operação anterior do MySQL 
#T=mysql_error
mysql_error([resource link_identifier])//  Retorna o texto da mensagem de erro da operação anterior do MySQL 
#T=mysql_escape_string
mysql_escape_string(string unescaped_string)//  Escapa uma string para uso com o mysql_query. 
#T=mysql_fetch_array
mysql_fetch_array(resource result [, int result_type])//  Busca o resultado de uma linha e o coloca como uma matriz associativa, matriz numérica ou ambas. 
#T=mysql_fetch_assoc
mysql_fetch_assoc(resource result)//  Busca o resultado de uma linha e o coloca numa matriz associativa 
#T=mysql_fetch_field
mysql_fetch_field(resource result [, int field_offset])//  Retorna informação sobre uma coluna de um resultado como um objeto 
#T=mysql_fetch_lengths
mysql_fetch_lengths(resource result)//  Retorna o tamanho de cada campo do resultado 
#T=mysql_fetch_object
mysql_fetch_object(resource result)// Retorna o resultado de uma linha como um objeto
#T=mysql_fetch_row
mysql_fetch_row(resource result)// Retorna o resultado de uma linha numa matriz numérica
#T=mysql_field_flags
mysql_field_flags(resource result, int field_offset)//  Pega as flags do campo especificado no resultado 
#T=mysql_field_len
mysql_field_len(resource result, int field_offset)//  Retorna o tamanho do campo 
#T=mysql_field_name
mysql_field_name(resource result, int field_index)//  Retorna o nome do campo especificado no resultado de uma query 
#T=mysql_field_seek
mysql_field_seek(resource result, int field_offset)//  Move o ponteiro do resultado para um campo especificado 
#T=mysql_field_table
mysql_field_table(resource result, int field_offset)//  Retorna o nome da tabela onde esta o campo especificado 
#T=mysql_field_type
mysql_field_type(resource result, int field_offset)//  Retorna o tipo do campo especificado em um resultado de query 
#T=mysql_free_result
mysql_free_result(resource result)// Libera a memória do resultado de uma query
#T=mysql_get_client_info
mysql_get_client_info(void )// Retorna informação da versão do cliente MySQL
#T=mysql_get_host_info
mysql_get_host_info([resource link_identifier])// Retorna informação sobre o host do MySQL
#T=mysql_get_proto_info
mysql_get_proto_info([resource link_identifier])// Retorna informação do protocolo do MySQL
#T=mysql_get_server_info
mysql_get_server_info([resource link_identifier])// Retorna informação do servidor MySQL
#T=mysql_info
mysql_info([resource link_identifier])//  Retorna informação sobre a última query 
#T=mysql_insert_id
mysql_insert_id([resource link_identifier])//  Retorna o ID gerado da operação INSERT anterior 
#T=mysql_list_dbs
mysql_list_dbs([resource link_identifier])//  Lista os bancos de dados disponiveis o servidor do MySQL 
#T=mysql_list_fields
mysql_list_fields(string database_name, string table_name [, resource link_identifier])// Lista os campos de uma tabela
#T=mysql_list_processes
mysql_list_processes([resource link_identifier])// Lista os processos MySQL
#T=mysql_list_tables
mysql_list_tables(string database [, resource link_identifier])// Lista as tabelas em um banco de dados MySQL
#T=mysql_num_fields
mysql_num_fields(resource result)// Retorna o número de campos no resulatdo
#T=mysql_num_rows
mysql_num_rows(resource result)// Retorna o número de linhas em um resultado
#T=mysql_pconnect
mysql_pconnect([string server [, string username [, string password [, int client_flags]]]])//  Abre uma conexão persistente com um servidor MySQL 
#T=mysql_ping
mysql_ping([resource link_identifier])// Pinga uma conexão ou reconecta se não houver conexão
#T=mysql_query
mysql_query(string query [, resource link_identifier])// Realiza uma query MySQL
#T=mysql_real_escape_string
mysql_real_escape_string(string unescaped_string [, resource link_identifier])//  Escapa os caracteres especiais numa string para usar em um comando SQL, levando em conta o conjunto atual de caracteres. 
#T=mysql_result
mysql_result(resource result, int row [, mixed field])// Retorna dados do resultado
#T=mysql_select_db
mysql_select_db(string database_name [, resource link_identifier])// Seleciona um banco de dados MySQL
#T=mysql_stat
mysql_stat([resource link_identifier])// Retorna o status atual do sistema
#T=mysql_tablename
mysql_tablename(resource result, int i)// Retorna o nome da tabela do campo
#T=mysql_thread_id
mysql_thread_id([resource link_identifier])// Returna o ID da thread atual
#T=mysql_unbuffered_query
mysql_unbuffered_query(string query [, resource link_identifier])//  Envia uma query para o MySQL, sem retornar e colocar em buffer as linhas do resultado 
#T=mysqli_affected_rows
mysqli_affected_rows(resource link)// Gets the number of affected rows in a previous MySQL operation
#T=mysqli_autocommit
mysqli_autocommit(resource link, bool mode)// Turns on or off auto-commiting database modifications
#T=mysqli_bind_param
mysqli_bind_param(resource stmt, mixed variable, int type)// Binds variables to a prepared statement as parameters
#T=mysqli_bind_result
mysqli_bind_result(resource stmt, mixed var, int len)// Binds variables to a prepared statement for result storage
#T=mysqli_change_user
mysqli_change_user(resource link, string user, string password, string database)// Changes the user of the specified database connection
#T=mysqli_character_set_name
mysqli_character_set_name(resource link)// Returns the default character set for the database connection
#T=mysqli_close
mysqli_close(resource link)// Closes a previously opened database connection
#T=mysqli_commit
mysqli_commit(resource link)// Commits the current transaction
#T=mysqli_connect
mysqli_connect([string hostname [, string username [, string passwd [, string dbname [, int port [, string socket]]]]]])// Open a new connection to the MySQL server
#T=mysqli_data_seek
mysqli_data_seek(resource result, int offset)// Adjusts the result pointer to an arbitary row in the result
#T=mysqli_debug
mysqli_debug(string debug)// Performs debugging operations
#T=mysqli_disable_reads_from_master
mysqli_disable_reads_from_master(resource link)// 
#T=mysqli_disable_rpl_parse
mysqli_disable_rpl_parse(resource link)// 
#T=mysqli_dump_debug_info
mysqli_dump_debug_info(resource link)// Dump debugging information into the log
#T=mysqli_enable_reads_from_master
mysqli_enable_reads_from_master(resource link)// 
#T=mysqli_enable_rpl_parse
mysqli_enable_rpl_parse(resource link)// 
#T=mysqli_errno
mysqli_errno(resource link)// Returns the error code for the most recent function call
#T=mysqli_error
mysqli_error(resource link)// Returns a string description of the last error
#T=mysqli_execute
mysqli_execute(resource stmt)// Executes a prepared Query
#T=mysqli_fetch
mysqli_fetch(resource stmt)//  Fetch results from a prepared statement into the bound variables 
#T=mysqli_fetch_array
mysqli_fetch_array(resource result [, int resulttype])// Fetch a result row as an associative, a numeric array, or both.
#T=mysqli_fetch_assoc
mysqli_fetch_assoc(resource result)// Fetch a result row as an associative array
#T=mysqli_fetch_field
mysqli_fetch_field(resource result)// Returns the next field in the result set
#T=mysqli_fetch_field_direct
mysqli_fetch_field_direct(resource result, int offset)//  Fetch meta-data for a single field 
#T=mysqli_fetch_fields
mysqli_fetch_fields(resource result)// Returns an array of objects representing the fields in a result set
#T=mysqli_fetch_lengths
mysqli_fetch_lengths(resource result)// Returns the lengths of the columns of the current row in the result set
#T=mysqli_fetch_object
mysqli_fetch_object(resource result)// Returns the current row of a result set as an object
#T=mysqli_fetch_row
mysqli_fetch_row(resource result)// Get a result row as an enumerated array
#T=mysqli_field_count
mysqli_field_count(resource link)// Returns the number of columns for the most recent query
#T=mysqli_field_seek
mysqli_field_seek(resource link, int fieldnr)//  Set result pointer to a specified field offset 
#T=mysqli_field_tell
mysqli_field_tell(resource result)//  Get current field offset of a result pointer 
#T=mysqli_free_result
mysqli_free_result(resource result)// Frees the memory associated with a result
#T=mysqli_get_client_info
mysqli_get_client_info(void )// Returns the MySQL client version as a string
#T=mysqli_get_host_info
mysqli_get_host_info(resource link)// Returns a string representing the type of connection used
#T=mysqli_get_proto_info
mysqli_get_proto_info(resource link)// Returns the version of the MySQL protocol used
#T=mysqli_get_server_info
mysqli_get_server_info(resource link)// Returns the version of the MySQL server
#T=mysqli_get_server_version
mysqli_get_server_version(resource link)// Returns the version of the MySQL server as an integer
#T=mysqli_info
mysqli_info(resource link)// Retrieves information about the most recently executed query
#T=mysqli_init
mysqli_init(void )//  Initializes MySQLi and returns a resource for use with mysqli_real_connect 
#T=mysqli_insert_id
mysqli_insert_id(resource link)// Returns the auto generated id used in the last query
#T=mysqli_kill
mysqli_kill(resource link, int processid)// Asks the server to kill a MySQL thread
#T=mysqli_master_query
mysqli_master_query(resource link, string query)//  Enforce execution of a query on the master in a master/slave setup 
#T=mysqli_num_fields
mysqli_num_fields(resource result)//  Get the number of fields in a result 
#T=mysqli_num_rows
mysqli_num_rows(resource result)//  Gets the number of rows in a result 
#T=mysqli_options
mysqli_options(resource link, int flags, mixed values)// set options
#T=mysqli_param_count
mysqli_param_count(resource stmt)// Returns the number of parameter for the given statement
#T=mysqli_ping
mysqli_ping(resource link)//  Ping a server connection, or reconnect if there is no connection 
#T=mysqli_prepare
mysqli_prepare(resource link, string query)//  Prepare a SQL statement for execution 
#T=mysqli_prepare_result
mysqli_prepare_result(resource stmt)// 
#T=mysqli_profiler
mysqli_profiler(int flags, string info, int port)// 
#T=mysqli_query
mysqli_query(resource link, string query [, int resultmode])// Performs a query on the database
#T=mysqli_read_query_result
mysqli_read_query_result(resource link)// 
#T=mysqli_real_connect
mysqli_real_connect(resource link [, string hostname [, string username [, string passwd [, string dbname [, int port [, string socket]]]]]])// Opens a connection to a mysql server
#T=mysqli_real_escape_string
mysqli_real_escape_string(resource link, string escapestr)//  Escapes special characters in a string for use in a SQL statement, taking into account the current charset of the connection 
#T=mysqli_real_query
mysqli_real_query(resource link, string query)// Execute an SQL query
#T=mysqli_reload
mysqli_reload(resource link)// 
#T=mysqli_rollback
mysqli_rollback(resource link)// 
#T=mysqli_rpl_parse_enabled
mysqli_rpl_parse_enabled(resource link)// 
#T=mysqli_rpl_probe
mysqli_rpl_probe(resource link)// 
#T=mysqli_rpl_query_type
mysqli_rpl_query_type(string query)// 
#T=mysqli_select_db
mysqli_select_db(resource link, string dbname)// Selects the default database for database queries
#T=mysqli_send_long_data
mysqli_send_long_data(resource stmt, int param_nr, string data)// 
#T=mysqli_send_query
mysqli_send_query(resource link, string query)// 
#T=mysqli_slave_query
mysqli_slave_query(resource link, string query)//  Enforces execution of a query on a slave in a master/slave setup 
#T=mysqli_ssl_set
mysqli_ssl_set(resource link [, string key [, string cert [, string ca [, string capath [, string cipher]]]]])// 
#T=mysqli_stat
mysqli_stat(resource link)//  Gets the current system status 
#T=mysqli_stmt_affected_rows
mysqli_stmt_affected_rows(object stmt)// 
#T=mysqli_stmt_close
mysqli_stmt_close(resource stmt)// close statement
#T=mysqli_stmt_errno
mysqli_stmt_errno(resource stmt)// 
#T=mysqli_stmt_error
mysqli_stmt_error(resource stmt)// 
#T=mysqli_stmt_store_result
mysqli_stmt_store_result(resource stmt)// 
#T=mysqli_store_result
mysqli_store_result(resource link)// Transfers a result set from the last query
#T=mysqli_thread_id
mysqli_thread_id(resource link)// Returns the thread ID for the current connection
#T=mysqli_thread_safe
mysqli_thread_safe(void )//  Returns whether thread safety is given or not 
#T=mysqli_use_result
mysqli_use_result(resource link)// Initiate a result set retrieval
#T=mysqli_warning_count
mysqli_warning_count(resource link)//  Returns the number of warnings from the last query for the given link 
#T=natcasesort
natcasesort(array array)//  Ordena um array utilizando o algoritmo da "ordem natural" sem diferenciar maiúsculas e minúsculas 
#T=natsort
natsort(array array)//  Ordena um array utilizando o algoritmo da "ordem natural" 
#T=ncurses_addch
ncurses_addch(int ch)// Add character at current position and advance cursor 
#T=ncurses_addchnstr
ncurses_addchnstr(string s, int n)// Add attributed string with specified length at current position 
#T=ncurses_addchstr
ncurses_addchstr(string s)// Add attributed string at current position 
#T=ncurses_addnstr
ncurses_addnstr(string s, int n)// Add string with specified length at current position 
#T=ncurses_addstr
ncurses_addstr(string text)// Output text at current position 
#T=ncurses_assume_default_colors
ncurses_assume_default_colors(int fg, int bg)// Define default colors for color 0 
#T=ncurses_attroff
ncurses_attroff(int attributes)// Turn off the given attributes 
#T=ncurses_attron
ncurses_attron(int attributes)// Turn on the given attributes 
#T=ncurses_attrset
ncurses_attrset(int attributes)// Set given attributes 
#T=ncurses_baudrate
ncurses_baudrate(void )// Returns baudrate of terminal 
#T=ncurses_beep
ncurses_beep(void )// Let the terminal beep 
#T=ncurses_bkgd
ncurses_bkgd(int attrchar)// Set background property for terminal screen 
#T=ncurses_bkgdset
ncurses_bkgdset(int attrchar)// Control screen background 
#T=ncurses_border
ncurses_border(int left, int right, int top, int bottom, int tl_corner, int tr_corner, int bl_corner, int br_corner)// Draw a border around the screen using attributed characters 
#T=ncurses_bottom_panel
ncurses_bottom_panel(resource panel)//  Moves a visible panel to the bottom of the stack 
#T=ncurses_can_change_color
ncurses_can_change_color(void )// Check if we can change terminals colors 
#T=ncurses_cbreak
ncurses_cbreak(void )// Switch of input buffering 
#T=ncurses_clear
ncurses_clear(void )// Clear screen 
#T=ncurses_clrtobot
ncurses_clrtobot(void )// Clear screen from current position to bottom 
#T=ncurses_clrtoeol
ncurses_clrtoeol(void )// Clear screen from current position to end of line 
#T=ncurses_color_content
ncurses_color_content(int color, int &r, int &g, int &b)//  Gets the RGB value for color 
#T=ncurses_color_set
ncurses_color_set(int pair)// Set fore- and background color 
#T=ncurses_curs_set
ncurses_curs_set(int visibility)// Set cursor state 
#T=ncurses_def_prog_mode
ncurses_def_prog_mode(void )// Saves terminals (program) mode
#T=ncurses_def_shell_mode
ncurses_def_shell_mode(void )// Saves terminals (shell) mode
#T=ncurses_define_key
ncurses_define_key(string definition, int keycode)// Define a keycode 
#T=ncurses_del_panel
ncurses_del_panel(resource panel)//  Remove panel from the stack and delete it (but not the associated window) 
#T=ncurses_delay_output
ncurses_delay_output(int milliseconds)// Delay output on terminal using padding characters 
#T=ncurses_delch
ncurses_delch(void )// Delete character at current position, move rest of line left 
#T=ncurses_deleteln
ncurses_deleteln(void )// Delete line at current position, move rest of screen up 
#T=ncurses_delwin
ncurses_delwin(resource window)// Delete a ncurses window 
#T=ncurses_doupdate
ncurses_doupdate(void )// Write all prepared refreshes to terminal 
#T=ncurses_echo
ncurses_echo(void )// Activate keyboard input echo 
#T=ncurses_echochar
ncurses_echochar(int character)// Single character output including refresh 
#T=ncurses_end
ncurses_end(void )// Stop using ncurses, clean up the screen 
#T=ncurses_erase
ncurses_erase(void )// Erase terminal screen 
#T=ncurses_erasechar
ncurses_erasechar(void )// Returns current erase character 
#T=ncurses_filter
ncurses_filter(void )// 
#T=ncurses_flash
ncurses_flash(void )// Flash terminal screen (visual bell) 
#T=ncurses_flushinp
ncurses_flushinp(void )// Flush keyboard input buffer 
#T=ncurses_getch
ncurses_getch(void )// Read a character from keyboard 
#T=ncurses_getmaxyx
ncurses_getmaxyx(resource window, int &y, int &x)//  Returns the size of a window 
#T=ncurses_getmouse
ncurses_getmouse(array mevent)// Reads mouse event
#T=ncurses_getyx
ncurses_getyx(resource window, int &y, int &x)//  Returns the current cursor position for a window 
#T=ncurses_halfdelay
ncurses_halfdelay(int tenth)// Put terminal into halfdelay mode 
#T=ncurses_has_colors
ncurses_has_colors(void )// Check if terminal has colors 
#T=ncurses_has_ic
ncurses_has_ic(void )// Check for insert- and delete-capabilities 
#T=ncurses_has_il
ncurses_has_il(void )// Check for line insert- and delete-capabilities 
#T=ncurses_has_key
ncurses_has_key(int keycode)// Check for presence of a function key on terminal keyboard 
#T=ncurses_hide_panel
ncurses_hide_panel(resource panel)//  Remove panel from the stack, making it invisible 
#T=ncurses_hline
ncurses_hline(int charattr, int n)// Draw a horizontal line at current position using an attributed character and max. n characters long 
#T=ncurses_inch
ncurses_inch(void )// Get character and attribute at current position
#T=ncurses_init
ncurses_init(void )// Initialize ncurses 
#T=ncurses_init_color
ncurses_init_color(int color, int r, int g, int b)// Set new RGB value for color 
#T=ncurses_init_pair
ncurses_init_pair(int pair, int fg, int bg)// Allocate a color pair 
#T=ncurses_insch
ncurses_insch(int character)// Insert character moving rest of line including character at current position 
#T=ncurses_insdelln
ncurses_insdelln(int count)// Insert lines before current line scrolling down (negative numbers delete and scroll up) 
#T=ncurses_insertln
ncurses_insertln(void )// Insert a line, move rest of screen down 
#T=ncurses_insstr
ncurses_insstr(string text)// Insert string at current position, moving rest of line right 
#T=ncurses_instr
ncurses_instr(string buffer)// Reads string from terminal screen 
#T=ncurses_isendwin
ncurses_isendwin(void )// Ncurses is in endwin mode, normal screen output may be performed 
#T=ncurses_keyok
ncurses_keyok(int keycode, bool enable)// Enable or disable a keycode 
#T=ncurses_keypad
ncurses_keypad(resource window, bool bf)//  Turns keypad on or off 
#T=ncurses_killchar
ncurses_killchar(void )// Returns current line kill character 
#T=ncurses_longname
ncurses_longname(void )// Returns terminals description
#T=ncurses_meta
ncurses_meta(resource window, bool 8bit)//  Enables/Disable 8-bit meta key information 
#T=ncurses_mouse_trafo
ncurses_mouse_trafo(int &y, int &x, bool toscreen)//  Transforms coordinates 
#T=ncurses_mouseinterval
ncurses_mouseinterval(int milliseconds)// Set timeout for mouse button clicks 
#T=ncurses_mousemask
ncurses_mousemask(int newmask, int oldmask)// Sets mouse options
#T=ncurses_move
ncurses_move(int y, int x)// Move output position 
#T=ncurses_move_panel
ncurses_move_panel(resource panel, int startx, int starty)//  Moves a panel so that it's upper-left corner is at [startx, starty] 
#T=ncurses_mvaddch
ncurses_mvaddch(int y, int x, int c)// Move current position and add character 
#T=ncurses_mvaddchnstr
ncurses_mvaddchnstr(int y, int x, string s, int n)// Move position and add attrributed string with specified length 
#T=ncurses_mvaddchstr
ncurses_mvaddchstr(int y, int x, string s)// Move position and add attributed string 
#T=ncurses_mvaddnstr
ncurses_mvaddnstr(int y, int x, string s, int n)// Move position and add string with specified length 
#T=ncurses_mvaddstr
ncurses_mvaddstr(int y, int x, string s)// Move position and add string 
#T=ncurses_mvcur
ncurses_mvcur(int old_y, int old_x, int new_y, int new_x)// Move cursor immediately 
#T=ncurses_mvdelch
ncurses_mvdelch(int y, int x)// Move position and delete character, shift rest of line left 
#T=ncurses_mvgetch
ncurses_mvgetch(int y, int x)// Move position and get character at new position 
#T=ncurses_mvhline
ncurses_mvhline(int y, int x, int attrchar, int n)// Set new position and draw a horizontal line using an attributed character and max. n characters long 
#T=ncurses_mvinch
ncurses_mvinch(int y, int x)// Move position and get attributed character at new position 
#T=ncurses_mvvline
ncurses_mvvline(int y, int x, int attrchar, int n)// Set new position and draw a vertical line using an attributed character and max. n characters long 
#T=ncurses_mvwaddstr
ncurses_mvwaddstr(resource window, int y, int x, string text)// Add string at new position in window 
#T=ncurses_napms
ncurses_napms(int milliseconds)// Sleep 
#T=ncurses_new_panel
ncurses_new_panel(resource window)//  Create a new panel and associate it with window 
#T=ncurses_newpad
ncurses_newpad(int rows, int cols)//  Creates a new pad (window) 
#T=ncurses_newwin
ncurses_newwin(int rows, int cols, int y, int x)// Create a new window 
#T=ncurses_nl
ncurses_nl(void )// Translate newline and carriage return / line feed 
#T=ncurses_nocbreak
ncurses_nocbreak(void )// Switch terminal to cooked mode 
#T=ncurses_noecho
ncurses_noecho(void )// Switch off keyboard input echo 
#T=ncurses_nonl
ncurses_nonl(void )// Do not translate newline and carriage return / line feed 
#T=ncurses_noqiflush
ncurses_noqiflush(void )// Do not flush on signal characters
#T=ncurses_noraw
ncurses_noraw(void )// Switch terminal out of raw mode 
#T=ncurses_pair_content
ncurses_pair_content(int pair, int &f, int &b)//  Gets the RGB value for color 
#T=ncurses_panel_above
ncurses_panel_above(resource panel)//  Returns the panel above panel. If panel is null, returns the bottom panel in the stack 
#T=ncurses_panel_below
ncurses_panel_below(resource panel)//  Returns the panel below panel. If panel is null, returns the top panel in the stack 
#T=ncurses_panel_window
ncurses_panel_window(resource panel)//  Returns the window associated with panel 
#T=ncurses_pnoutrefresh
ncurses_pnoutrefresh(resource pad, int pminrow, int pmincol, int sminrow, int smincol, int smaxrow, int smaxcol)//  Copys a region from a pad into the virtual screen 
#T=ncurses_prefresh
ncurses_prefresh(resource pad, int pminrow, int pmincol, int sminrow, int smincol, int smaxrow, int smaxcol)//  Copys a region from a pad into the virtual screen 
#T=ncurses_putp
ncurses_putp(string text)// 
#T=ncurses_qiflush
ncurses_qiflush(void )// Flush on signal characters 
#T=ncurses_raw
ncurses_raw(void )// Switch terminal into raw mode 
#T=ncurses_refresh
ncurses_refresh(int ch)// Refresh screen 
#T=ncurses_replace_panel
ncurses_replace_panel(resource panel, resource window)//  Replaces the window associated with panel 
#T=ncurses_reset_prog_mode
ncurses_reset_prog_mode(void )//  Resets the prog mode saved by def_prog_mode 
#T=ncurses_reset_shell_mode
ncurses_reset_shell_mode(void )//  Resets the shell mode saved by def_shell_mode 
#T=ncurses_resetty
ncurses_resetty(void )// Restores saved terminal state 
#T=ncurses_savetty
ncurses_savetty(void )// Saves terminal state 
#T=ncurses_scr_dump
ncurses_scr_dump(string filename)// Dump screen content to file 
#T=ncurses_scr_init
ncurses_scr_init(string filename)// Initialize screen from file dump 
#T=ncurses_scr_restore
ncurses_scr_restore(string filename)// Restore screen from file dump 
#T=ncurses_scr_set
ncurses_scr_set(string filename)// Inherit screen from file dump 
#T=ncurses_scrl
ncurses_scrl(int count)// Scroll window content up or down without changing current position 
#T=ncurses_show_panel
ncurses_show_panel(resource panel)//  Places an invisible panel on top of the stack, making it visible 
#T=ncurses_slk_attr
ncurses_slk_attr(void )// Returns current soft label key attribute
#T=ncurses_slk_attroff
ncurses_slk_attroff(int intarg)// 
#T=ncurses_slk_attron
ncurses_slk_attron(int intarg)// 
#T=ncurses_slk_attrset
ncurses_slk_attrset(int intarg)// 
#T=ncurses_slk_clear
ncurses_slk_clear(void )// Clears soft labels from screen
#T=ncurses_slk_color
ncurses_slk_color(int intarg)// Sets color for soft label keys
#T=ncurses_slk_init
ncurses_slk_init(int format)// Initializes soft label key functions
#T=ncurses_slk_noutrefresh
ncurses_slk_noutrefresh(void )// Copies soft label keys to virtual screen
#T=ncurses_slk_refresh
ncurses_slk_refresh(void )// Copies soft label keys to screen
#T=ncurses_slk_restore
ncurses_slk_restore(void )// Restores soft label keys
#T=ncurses_slk_set
ncurses_slk_set(int labelnr, string label, int format)//  Sets function key labels 
#T=ncurses_slk_touch
ncurses_slk_touch(void )// Fources output when ncurses_slk_noutrefresh is performed
#T=ncurses_standend
ncurses_standend(void )// Stop using 'standout' attribute 
#T=ncurses_standout
ncurses_standout(void )// Start using 'standout' attribute 
#T=ncurses_start_color
ncurses_start_color(void )// Start using colors 
#T=ncurses_termattrs
ncurses_termattrs(void )// Returns a logical OR of all attribute flags supported by terminal 
#T=ncurses_termname
ncurses_termname(void )// Returns terminals (short)-name
#T=ncurses_timeout
ncurses_timeout(int millisec)// Set timeout for special key sequences 
#T=ncurses_top_panel
ncurses_top_panel(resource panel)//  Moves a visible panel to the top of the stack 
#T=ncurses_typeahead
ncurses_typeahead(int fd)// Specify different filedescriptor for typeahead checking 
#T=ncurses_ungetch
ncurses_ungetch(int keycode)// Put a character back into the input stream 
#T=ncurses_ungetmouse
ncurses_ungetmouse(array mevent)// Pushes mouse event to queue
#T=ncurses_update_panels
ncurses_update_panels(void )//  Refreshes the virtual screen to reflect the relations between panels in the stack. 
#T=ncurses_use_default_colors
ncurses_use_default_colors(void )// Assign terminal default colors to color id -1 
#T=ncurses_use_env
ncurses_use_env(bool flag)// Control use of environment information about terminal size 
#T=ncurses_use_extended_names
ncurses_use_extended_names(bool flag)// Control use of extended names in terminfo descriptions 
#T=ncurses_vidattr
ncurses_vidattr(int intarg)// 
#T=ncurses_vline
ncurses_vline(int charattr, int n)// Draw a vertical line at current position using an attributed character and max. n characters long 
#T=ncurses_waddch
ncurses_waddch(resource window, int ch)//  Adds character at current position in a window and advance cursor 
#T=ncurses_waddstr
ncurses_waddstr(resource window, string str [, int n])//  Outputs text at current postion in window 
#T=ncurses_wattroff
ncurses_wattroff(resource window, int attrs)//  Turns off attributes for a window 
#T=ncurses_wattron
ncurses_wattron(resource window, int attrs)//  Turns on attributes for a window 
#T=ncurses_wattrset
ncurses_wattrset(resource window, int attrs)//  Set the attributes for a window 
#T=ncurses_wborder
ncurses_wborder(resource window, int left, int right, int top, int bottom, int tl_corner, int tr_corner, int bl_corner, int br_corner)//  Draws a border around the window using attributed characters 
#T=ncurses_wclear
ncurses_wclear(resource window)//  Clears window 
#T=ncurses_wcolor_set
ncurses_wcolor_set(resource window, int color_pair)//  Sets windows color pairings 
#T=ncurses_werase
ncurses_werase(resource window)//  Erase window contents 
#T=ncurses_wgetch
ncurses_wgetch(resource window)//  Reads a character from keyboard (window) 
#T=ncurses_whline
ncurses_whline(resource window, int charattr, int n)//  Draws a horizontal line in a window at current position using an attributed character and max. n characters long 
#T=ncurses_wmouse_trafo
ncurses_wmouse_trafo(resource window, int &y, int &x, bool toscreen)//  Transforms window/stdscr coordinates 
#T=ncurses_wmove
ncurses_wmove(resource window, int y, int x)//  Moves windows output position 
#T=ncurses_wnoutrefresh
ncurses_wnoutrefresh(resource window)//  Copies window to virtual screen 
#T=ncurses_wrefresh
ncurses_wrefresh(resource window)// Refresh window on terminal screen 
#T=ncurses_wstandend
ncurses_wstandend(resource window)//  End standout mode for a window 
#T=ncurses_wstandout
ncurses_wstandout(resource window)//  Enter standout mode for a window 
#T=ncurses_wvline
ncurses_wvline(resource window, int charattr, int n)//  Draws a vertical line in a window at current position using an attributed character and max. n characters long 
#T=next
next(array array)//  Avança o ponteiro interno de um array 
#T=ngettext
ngettext(string msgid1, string msgid2, int n)// O mesmo que gettext, mas você pode especificar mais de uma mensagem
#T=nl2br
nl2br(string string)//  Insere quebras de linha HTML antes de todas newlines em uma string 
#T=nl_langinfo
nl_langinfo(int item)//  Retorna informação de linguagem e local 
#T=notes_body
notes_body(string server, string mailbox, int msg_number)// Open the message msg_number in the specified mailbox on the specified server (leave serv
#T=notes_copy_db
notes_copy_db(string from_database_name, string to_database_name)// Create a note using form form_name 
#T=notes_create_db
notes_create_db(string database_name)// Create a Lotus Notes database 
#T=notes_create_note
notes_create_note(string database_name, string form_name)// Create a note using form form_name 
#T=notes_drop_db
notes_drop_db(string database_name)// Drop a Lotus Notes database 
#T=notes_find_note
notes_find_note(string database_name, string name [, string type])// Returns a note id found in database_name. Specify the name of the note. Leaving type bla
#T=notes_header_info
notes_header_info(string server, string mailbox, int msg_number)// Open the message msg_number in the specified mailbox on the specified server (leave serv
#T=notes_list_msgs
notes_list_msgs(string db)// Returns the notes from a selected database_name
#T=notes_mark_read
notes_mark_read(string database_name, string user_name, string note_id)// Mark a note_id as read for the User user_name
#T=notes_mark_unread
notes_mark_unread(string database_name, string user_name, string note_id)// Mark a note_id as unread for the User user_name
#T=notes_nav_create
notes_nav_create(string database_name, string name)// Create a navigator name, in database_name 
#T=notes_search
notes_search(string database_name, string keywords)// Find notes that match keywords in database_name
#T=notes_unread
notes_unread(string database_name, string user_name)// Returns the unread note id's for the current User user_name
#T=notes_version
notes_version(string database_name)// Get the version Lotus Notes 
#T=nsapi_request_headers
nsapi_request_headers(void )// Fetch all HTTP request headers
#T=nsapi_response_headers
nsapi_response_headers(void )//  Fetch all HTTP response headers 
#T=nsapi_virtual
nsapi_virtual(string uri)// Perform an NSAPI sub-request
#T=number_format
number_format(float number [, int decimals])// Formata um número com os milhares agrupados
#T=ob_clean
ob_clean(void )//  Clean (erase) the output buffer 
#T=ob_end_clean
ob_end_clean(void )//  Clean (erase) the output buffer and turn off output buffering 
#T=ob_end_flush
ob_end_flush(void )//  Flush (send) the output buffer and turn off output buffering 
#T=ob_flush
ob_flush(void )//  Flush (send) the output buffer 
#T=ob_get_clean
ob_get_clean(void )//  Get current buffer contents and delete current output buffer 
#T=ob_get_contents
ob_get_contents(void )//  Return the contents of the output buffer 
#T=ob_get_length
ob_get_length(void )//  Return the length of the output buffer 
#T=ob_get_level
ob_get_level(void )//  Return the nesting level of the output buffering mechanism 
#T=ob_get_status
ob_get_status([bool full_status])//  Get status of output buffers 
#T=ob_gzhandler
ob_gzhandler(string buffer [, int mode])//  ob_start callback function to gzip output buffer 
#T=ob_iconv_handler
ob_iconv_handler(string contents, int status)// Convert character encoding as output buffer handler
#T=ob_implicit_flush
ob_implicit_flush([int flag])//  Turn implicit flush on/off 
#T=ob_start
ob_start([callback output_callback])// Turn on output buffering
#T=ocibindbyname
ocibindbyname(int stmt, string ph_name, mixed & variable, int length [, int type])//  Bind a PHP variable to an Oracle Placeholder 
#T=ocicancel
ocicancel(int stmt)// Cancel reading from cursor
#T=ocicollappend
ocicollappend(object collection, object object)// Append an object to the collection
#T=ocicollassign
ocicollassign(object collection, object object)// Assign a collection from another existing collection
#T=ocicollassignelem
ocicollassignelem(object collection, string ndx, string val)// Assign element val to collection at index ndx
#T=ocicollgetelem
ocicollgetelem(object collection, string ndx)// Retrieve the value at collection index ndx
#T=ocicollmax
ocicollmax(object collection)//  Return the max value of a collection. For a varray this is the maximum length of the array 
#T=ocicollsize
ocicollsize(object collection)// Return the size of a collection
#T=ocicolltrim
ocicolltrim(object collection, int num)// Trim num elements from the end of a collection
#T=ocicolumnisnull
ocicolumnisnull(resource stmt, mixed column)// Test whether a result column is NULL
#T=ocicolumnname
ocicolumnname(int stmt, int col)// Returns the name of a column
#T=ocicolumnprecision
ocicolumnprecision(int stmt, int col)// Tell the precision of a column
#T=ocicolumnscale
ocicolumnscale(int stmt, int col)// Tell the scale of a column
#T=ocicolumnsize
ocicolumnsize(int stmt, mixed column)// Return result column size
#T=ocicolumntype
ocicolumntype(int stmt, int col)// Returns the data type of a column
#T=ocicolumntyperaw
ocicolumntyperaw(int stmt, int col)// Tell the raw oracle data type of a column
#T=ocicommit
ocicommit(int connection)// Commits outstanding transactions
#T=ocidefinebyname
ocidefinebyname(int stmt, string Column-Name, mixed variable [, int type])//  Use a PHP variable for the define-step during a SELECT 
#T=ocierror
ocierror([int stmt|conn|global])// Return the last error of stmt|conn|global
#T=ociexecute
ociexecute(int statement [, int mode])// Execute a statement
#T=ocifetch
ocifetch(int statement)// Fetches the next row into result-buffer
#T=ocifetchinto
ocifetchinto(int stmt, array &result [, int mode])// Fetches the next row into result-array
#T=ocifetchstatement
ocifetchstatement(resource stmt, array & variable, int skip, int maxrows, int flags)// Fetch all rows of result data into an array
#T=ocifreecollection
ocifreecollection(object lob)// Deletes collection object
#T=ocifreecursor
ocifreecursor(int stmt)//  Free all resources associated with a cursor 
#T=ocifreedesc
ocifreedesc(object lob)// Deletes a large object descriptor
#T=ocifreestatement
ocifreestatement(resource stmt)//  Free all resources associated with a statement 
#T=ociinternaldebug
ociinternaldebug(int onoff)//  Enables or disables internal debug output 
#T=ociloadlob
ociloadlob(object lob)// Loads a large object
#T=ocilogoff
ocilogoff(resource connection)// Disconnects from Oracle server
#T=ocilogon
ocilogon(string username, string password [, string db])// Establishes a connection to Oracle
#T=ocinewcollection
ocinewcollection(int conn, string tdo [, string shema])// Initialize a new collection
#T=ocinewcursor
ocinewcursor(resource conn)//  Return a new cursor (Statement-Handle) 
#T=ocinewdescriptor
ocinewdescriptor(int connection [, int type])//  Initialize a new empty LOB or FILE descriptor 
#T=ocinlogon
ocinlogon(string username, string password [, string db])// Establishes a new connection to Oracle
#T=ocinumcols
ocinumcols(resource stmt)//  Return the number of result columns in a statement 
#T=ociparse
ociparse(int conn, string query)// Parse a query and return an Oracle statement
#T=ociplogon
ociplogon(string username, string password [, string db])//  Connect to an Oracle database using a persistent connection 
#T=ociresult
ociresult(int statement, mixed column)// Returns column value for fetched row
#T=ocirollback
ocirollback(resource connection)// Rolls back outstanding transactions
#T=ocirowcount
ocirowcount(resource statement)// Gets the number of affected rows
#T=ocisavelob
ocisavelob(object lob)// Saves a large object 
#T=ocisavelobfile
ocisavelobfile(object lob)// Saves a large object file
#T=ociserverversion
ociserverversion(resource conn)// Return a string containing server version information
#T=ocisetprefetch
ocisetprefetch(resource stmt, int rows)// Sets number of rows to be prefetched
#T=ocistatementtype
ocistatementtype(resource stmt)// Return the type of an OCI statement
#T=ociwritelobtofile
ociwritelobtofile(object lob [, string filename [, int start [, int lenght]]])// Saves a large object file
#T=octdec
octdec(string octal_string)// Octal para decimal
#T=odbc_autocommit
odbc_autocommit(resource connection_id [, bool OnOff])// Toggle autocommit behaviour
#T=odbc_binmode
odbc_binmode(resource result_id, int mode)// Handling of binary column data
#T=odbc_close
odbc_close(resource connection_id)// Close an ODBC connection
#T=odbc_close_all
odbc_close_all(void )// Close all ODBC connections
#T=odbc_columnprivileges
odbc_columnprivileges(resource connection_id [, string qualifier [, string owner [, string table_name [, string column_name]]]])//  Returns a result identifier that can be used to fetch a list of columns and associated privileges 
#T=odbc_columns
odbc_columns(resource connection_id [, string qualifier [, string schema [, string table_name [, string column_name]]]])//  Lists the column names in specified tables. Returns a result identifier containing the information. 
#T=odbc_commit
odbc_commit(resource connection_id)// Commit an ODBC transaction
#T=odbc_connect
odbc_connect(string dsn, string user, string password [, int cursor_type])// Connect to a datasource
#T=odbc_cursor
odbc_cursor(resource result_id)// Get cursorname
#T=odbc_data_source
odbc_data_source(resource connection_id, constant fetch_type)// Returns information about a current connection
#T=odbc_do
odbc_do(resource conn_id, string query)// Synonym for odbc_exec()
#T=odbc_error
odbc_error([resource connection_id])// Get the last error code
#T=odbc_errormsg
odbc_errormsg([resource connection_id])// Get the last error message
#T=odbc_exec
odbc_exec(resource connection_id, string query_string)// Prepare and execute a SQL statement
#T=odbc_execute
odbc_execute(resource result_id [, array parameters_array])// Execute a prepared statement
#T=odbc_fetch_array
odbc_fetch_array(resource result [, int rownumber])//  Fetch a result row as an associative array 
#T=odbc_fetch_into
odbc_fetch_into(resource result_id [, int rownumber, array result_array])// Fetch one result row into array
#T=odbc_fetch_object
odbc_fetch_object(resource result [, int rownumber])//  Fetch a result row as an object 
#T=odbc_fetch_row
odbc_fetch_row(resource result_id [, int row_number])// Fetch a row
#T=odbc_field_len
odbc_field_len(resource result_id, int field_number)// Get the length (precision) of a field
#T=odbc_field_name
odbc_field_name(resource result_id, int field_number)// Get the columnname
#T=odbc_field_num
odbc_field_num(resource result_id, string field_name)// Return column number
#T=odbc_field_precision
odbc_field_precision(resource result_id, int field_number)// Synonym for odbc_field_len()
#T=odbc_field_scale
odbc_field_scale(resource result_id, int field_number)// Get the scale of a field
#T=odbc_field_type
odbc_field_type(resource result_id, int field_number)// Datatype of a field
#T=odbc_foreignkeys
odbc_foreignkeys(resource connection_id, string pk_qualifier, string pk_owner, string pk_table, string fk_qualifier, string fk_owner, string fk_table)//  Returns a list of foreign keys in the specified table or a list of foreign keys in other tables that refer to the primary key in the specified table 
#T=odbc_free_result
odbc_free_result(resource result_id)// Free resources associated with a result
#T=odbc_gettypeinfo
odbc_gettypeinfo(resource connection_id [, int data_type])//  Returns a result identifier containing information about data types supported by the data source. 
#T=odbc_longreadlen
odbc_longreadlen(resource result_id, int length)// Handling of LONG columns
#T=odbc_next_result
odbc_next_result(resource result_id)//  Checks if multiple results are available 
#T=odbc_num_fields
odbc_num_fields(resource result_id)// Number of columns in a result
#T=odbc_num_rows
odbc_num_rows(resource result_id)// Number of rows in a result
#T=odbc_pconnect
odbc_pconnect(string dsn, string user, string password [, int cursor_type])// Open a persistent database connection
#T=odbc_prepare
odbc_prepare(resource connection_id, string query_string)// Prepares a statement for execution
#T=odbc_primarykeys
odbc_primarykeys(resource connection_id, string qualifier, string owner, string table)//  Returns a result identifier that can be used to fetch the column names that comprise the primary key for a table 
#T=odbc_procedurecolumns
odbc_procedurecolumns(resource connection_id [, string qualifier [, string owner [, string proc [, string column]]]])//  Retrieve information about parameters to procedures 
#T=odbc_procedures
odbc_procedures(resource connection_id [, string qualifier [, string owner [, string name]]])//  Get the list of procedures stored in a specific data source. Returns a result identifier containing the information. 
#T=odbc_result
odbc_result(resource result_id, mixed field)// Get result data
#T=odbc_result_all
odbc_result_all(resource result_id [, string format])// Print result as HTML table
#T=odbc_rollback
odbc_rollback(resource connection_id)// Rollback a transaction
#T=odbc_setoption
odbc_setoption(resource id, int function, int option, int param)//  Adjust ODBC settings. Returns FALSE if an error occurs, otherwise TRUE. 
#T=odbc_specialcolumns
odbc_specialcolumns(resource connection_id, int type, string qualifier, string owner, string table, int scope, int nullable)//  Returns either the optimal set of columns that uniquely identifies a row in the table or columns that are automatically updated when any value in the row is updated by a transaction 
#T=odbc_statistics
odbc_statistics(resource connection_id, string qualifier, string owner, string table_name, int unique, int accuracy)// Retrieve statistics about a table
#T=odbc_tableprivileges
odbc_tableprivileges(resource connection_id [, string qualifier [, string owner [, string name]]])//  Lists tables and the privileges associated with each table 
#T=odbc_tables
odbc_tables(resource connection_id [, string qualifier [, string owner [, string name [, string types]]]])//  Get the list of table names stored in a specific data source. Returns a result identifier containing the information. 
#T=opendir
opendir(string path)// Abre um manipulador de diretório
#T=openlog
openlog(string ident, int option, int facility)// Open connection to system logger
#T=openssl_csr_export
openssl_csr_export(resource csr, string &out [, bool notext])// Exports a CSR as a string
#T=openssl_csr_export_to_file
openssl_csr_export_to_file(resource csr, string outfilename [, bool notext])// Exports a CSR to a file
#T=openssl_csr_new
openssl_csr_new(array dn, resource privkey [, array configargs [, array extraattribs]])// Generates a CSR
#T=openssl_csr_sign
openssl_csr_sign(mixed csr, mixed cacert, mixed priv_key, int days)// Sign a CSR with another certificate (or itself) and generate a certificate
#T=openssl_error_string
openssl_error_string(void )// Return openSSL error message
#T=openssl_free_key
openssl_free_key(resource key_identifier)// Free key resource
#T=openssl_get_privatekey
openssl_get_privatekey(mixed key [, string passphrase])// Get a private key
#T=openssl_get_publickey
openssl_get_publickey(mixed certificate)// Extract public key from certificate and prepare it for use
#T=openssl_open
openssl_open(string sealed_data, string open_data, string env_key, mixed priv_key_id)// Open sealed data
#T=openssl_pkcs7_decrypt
openssl_pkcs7_decrypt(string infilename, string outfilename, mixed recipcert [, mixed recipkey])// Decrypts an S/MIME encrypted message
#T=openssl_pkcs7_encrypt
openssl_pkcs7_encrypt(string infile, string outfile, mixed recipcerts, array headers [, int flags])// Encrypt an S/MIME message
#T=openssl_pkcs7_sign
openssl_pkcs7_sign(string infilename, string outfilename, mixed signcert, mixed privkey, array headers [, int flags [, string extracerts]])// sign an S/MIME message
#T=openssl_pkcs7_verify
openssl_pkcs7_verify(string filename, int flags [, string outfilename [, array cainfo [, string extracerts]]])// Verifies the signature of an S/MIME signed message
#T=openssl_pkey_export
openssl_pkey_export(mixed key, string &out [, string passphrase [, array configargs]])// Gets an exportable representation of a key into a string
#T=openssl_pkey_export_to_file
openssl_pkey_export_to_file(mixed key, string outfilename [, string passphrase [, array configargs]])// Gets an exportable representation of a key into a file 
#T=openssl_get_privatekey
openssl_get_privatekey(mixed key [, string passphrase])// Get a private key
#T=openssl_pkey_get_public
openssl_pkey_get_public(mixed certificate)// Extract public key from certificate and prepare it for use
#T=openssl_pkey_new
openssl_pkey_new([array configargs])// Generates a new private key 
#T=openssl_private_decrypt
openssl_private_decrypt(string data, string &decrypted, mixed key [, int padding])// Decrypts data with private key 
#T=openssl_private_encrypt
openssl_private_encrypt(string data, string crypted, mixed key [, int padding])// Encrypts data with private key 
#T=openssl_public_decrypt
openssl_public_decrypt(string data, string crypted, resource key [, int padding])// Decrypts data with public key 
#T=openssl_public_encrypt
openssl_public_encrypt(string data, string crypted, mixed key [, int padding])// Encrypts data with public key 
#T=openssl_seal
openssl_seal(string data, string sealed_data, array env_keys, array pub_key_ids)// Seal (encrypt) data
#T=openssl_sign
openssl_sign(string data, string signature, mixed priv_key_id)// Generate signature
#T=openssl_verify
openssl_verify(string data, string signature, mixed pub_key_id)// Verify signature
#T=openssl_x509_check_private_key
openssl_x509_check_private_key(mixed cert, mixed key)// Checks if a private key corresponds to a certificate
#T=openssl_x509_checkpurpose
openssl_x509_checkpurpose(mixed x509cert, int purpose, array cainfo [, string untrustedfile])// Verifies if a certificate can be used for a particular purpose
#T=openssl_x509_export
openssl_x509_export(mixed x509, string &output [, bool notext])// Exports a certificate as a string
#T=openssl_x509_export_to_file
openssl_x509_export_to_file(mixed x509, string outfilename [, bool notext])// Exports a certificate to file
#T=openssl_x509_free
openssl_x509_free(resource x509cert)// Free certificate resource
#T=openssl_x509_parse
openssl_x509_parse(mixed x509cert [, bool shortnames])// Parse an X509 certificate and return the information as an array
#T=openssl_x509_read
openssl_x509_read(mixed x509certdata)// Parse an X.509 certificate and return a resource identifier for it
#T=ora_bind
ora_bind(resource cursor, string PHP_variable_name, string SQL_parameter_name, int length [, int type])// Binds a PHP variable to an Oracle parameter
#T=ora_close
ora_close(ressource cursor)// Closes an Oracle cursor
#T=ora_columnname
ora_columnname(resource cursor, int column)// Gets the name of an Oracle result column
#T=ora_columnsize
ora_columnsize(resource cursor, int column)// Returns the size of an Oracle result column
#T=ora_columntype
ora_columntype(resource cursor, int column)// Gets the type of an Oracle result column
#T=ora_commit
ora_commit(resource conn)// Commit an Oracle transaction
#T=ora_commitoff
ora_commitoff(resource conn)// Disable automatic commit
#T=ora_commiton
ora_commiton(resource conn)// Enable automatic commit
#T=ora_do
ora_do(resource conn, string query)// Parse, Exec, Fetch
#T=ora_error
ora_error(resource cursor_or_connection)// Gets an Oracle error message
#T=ora_errorcode
ora_errorcode(resource cursor_or_connection)// Gets an Oracle error code
#T=ora_exec
ora_exec(resource cursor)// Execute a parsed statement on an Oracle cursor
#T=ora_fetch
ora_fetch(resource cursor)// Fetch a row of data from a cursor
#T=ora_fetch_into
ora_fetch_into(resource cursor, array result [, int flags])// Fetch a row into the specified result array
#T=ora_getcolumn
ora_getcolumn(resource cursor, int column)// Get data from a fetched column
#T=ora_logoff
ora_logoff(resource connection)// Close an Oracle connection
#T=ora_logon
ora_logon(string user, string password)// Open an Oracle connection
#T=ora_numcols
ora_numcols(resource cursor)// Returns the number of columns
#T=ora_numrows
ora_numrows(resource cursor)// Returns the number of rows
#T=ora_open
ora_open(resource connection)// Opens an Oracle cursor
#T=ora_parse
ora_parse(resource cursor, string sql_statement, int defer)// Parse an SQL statement with Oracle
#T=ora_plogon
ora_plogon(string user, string password)//  Open a persistent Oracle connection 
#T=ora_rollback
ora_rollback(resource connection)// Rolls back a transaction
#T=ord
ord(string string)// Retorna o valor ASCII do caractere
#T=overload
overload([string class_name])// Ativa a chamada sobrecarregada de propriedades e métodos para uma classe
#T=ovrimos_close
ovrimos_close(int connection)// Closes the connection to ovrimos
#T=ovrimos_commit
ovrimos_commit(int connection_id)// Commits the transaction
#T=ovrimos_connect
ovrimos_connect(string host, string db, string user, string password)// Connect to the specified database
#T=ovrimos_cursor
ovrimos_cursor(int result_id)// Returns the name of the cursor
#T=ovrimos_exec
ovrimos_exec(int connection_id, string query)// Executes an SQL statement
#T=ovrimos_execute
ovrimos_execute(int result_id [, array parameters_array])// Executes a prepared SQL statement
#T=ovrimos_fetch_into
ovrimos_fetch_into(int result_id, array result_array [, string how [, int rownumber]])// Fetches a row from the result set
#T=ovrimos_fetch_row
ovrimos_fetch_row(int result_id [, int how [, int row_number]])// Fetches a row from the result set
#T=ovrimos_field_len
ovrimos_field_len(int result_id, int field_number)// Returns the length of the output column
#T=ovrimos_field_name
ovrimos_field_name(int result_id, int field_number)// Returns the output column name
#T=ovrimos_field_num
ovrimos_field_num(int result_id, string field_name)//  Returns the (1-based) index of the output column 
#T=ovrimos_field_type
ovrimos_field_type(int result_id, int field_number)//  Returns the (numeric) type of the output column 
#T=ovrimos_free_result
ovrimos_free_result(int result_id)// Frees the specified result_id
#T=ovrimos_longreadlen
ovrimos_longreadlen(int result_id, int length)//  Specifies how many bytes are to be retrieved from long datatypes 
#T=ovrimos_num_fields
ovrimos_num_fields(int result_id)// Returns the number of columns
#T=ovrimos_num_rows
ovrimos_num_rows(int result_id)//  Returns the number of rows affected by update operations 
#T=ovrimos_prepare
ovrimos_prepare(int connection_id, string query)// Prepares an SQL statement
#T=ovrimos_result
ovrimos_result(int result_id, mixed field)// Retrieves the output column
#T=ovrimos_result_all
ovrimos_result_all(int result_id [, string format])//  Prints the whole result set as an HTML table 
#T=ovrimos_rollback
ovrimos_rollback(int connection_id)// Rolls back the transaction
#T=pack
pack(string format [, mixed args])// Pack data into binary string.
#T=parse_ini_file
parse_ini_file(string nomedoarquivo [, bool processar_secoes])// Interpreta um arquivo de configuração
#T=parse_str
parse_str(string str [, array arr])// Converte a string em variáveis
#T=parse_url
parse_url(string url)// Separa uma URL e retorna seus componentes
#T=passthru
passthru(string command [, int return_var])//  Execute an external program and display raw output 
#T=pathinfo
pathinfo(string path)// Retorna informação sobre o path de um arquivo
#T=pclose
pclose(int fp)// Fecha um processo de um ponteiro de arquivo
#T=pcntl_exec
pcntl_exec(string path [, array args [, array envs]])//  Executes specified program in current process space 
#T=pcntl_fork
pcntl_fork(void )// Forks the currently running process
#T=pcntl_signal
pcntl_signal(int signo, callback handle [, bool restart_syscalls])// Installs a signal handler
#T=pcntl_waitpid
pcntl_waitpid(int pid, int &status, int options)// Waits on or returns the status of a forked child
#T=pcntl_wexitstatus
pcntl_wexitstatus(int status)//  Returns the return code of a terminated child 
#T=pcntl_wifexited
pcntl_wifexited(int status)//  Returns TRUE if status code represents a successful exit 
#T=pcntl_wifsignaled
pcntl_wifsignaled(int status)//  Returns TRUE if status code represents a termination due to a signal 
#T=pcntl_wifstopped
pcntl_wifstopped(int status)//  Returns TRUE if child process is currently stopped 
#T=pcntl_wstopsig
pcntl_wstopsig(int status)//  Returns the signal which caused the child to stop 
#T=pcntl_wtermsig
pcntl_wtermsig(int status)//  Returns the signal which caused the child to terminate 
#T=pdf_add_bookmark
pdf_add_bookmark(int pdf_object, string text [, int parent [, int open]])// Adds bookmark for current page
#T=pdf_add_launchlink
pdf_add_launchlink(int pdf_object, float llx, float lly, float urx, float ury, string filename)// Add a launch annotation for current page
#T=pdf_add_locallink
pdf_add_locallink(int pdf_object, float llx, float lly, float urx, float ury, int page, string dest)// Add a link annotation for current page
#T=pdf_add_note
pdf_add_note(int pdf_object, float llx, float lly, float urx, float ury, string contents, string title, string icon, int open)// Add a note annotation for current page
#T=pdf_add_pdflink
pdf_add_pdflink(int pdf_object, float llx, float lly, float urx, float ury, string filename, int page, string dest)// Adds file link annotation for current page
#T=pdf_add_thumbnail
pdf_add_thumbnail(int pdf_object, int image)// Adds thumbnail for current page
#T=pdf_add_weblink
pdf_add_weblink(int pdf_object, float llx, float lly, float urx, float ury, string url)// Adds weblink for current page
#T=pdf_arc
pdf_arc(resource pdf_object, float x, float y, float r, float alpha, float beta)// Draws an arc (counterclockwise)
#T=pdf_arcn
pdf_arcn(resource pdf_object, float x, float y, float r, float alpha, float beta)// Draws an arc (clockwise)
#T=pdf_attach_file
pdf_attach_file(int pdf_object, float llx, float lly, float urx, float ury, string filename, string description, string author, string mimetype, string icon)// Adds a file attachement for current page
#T=pdf_begin_page
pdf_begin_page(int pdf_object, float width, float height)// Starts new page
#T=pdf_begin_pattern
pdf_begin_pattern(int pdf_object, float width, float height, float xstep, float ystep, int painttype)// Starts new pattern
#T=pdf_begin_template
pdf_begin_template(int pdf_object, float width, float height)// Starts new template
#T=pdf_circle
pdf_circle(int pdf_object, float x, float y, float r)// Draws a circle
#T=pdf_clip
pdf_clip(int pdf_object)// Clips to current path
#T=pdf_close
pdf_close(int pdf_object)// Closes a pdf object
#T=pdf_close_image
pdf_close_image(int pdf_object, int image)// Closes an image
#T=pdf_close_pdi
pdf_close_pdi(int pdf_object, int dochandle)//  Close the input PDF document 
#T=pdf_close_pdi_page
pdf_close_pdi_page(int pdf_object, int pagehandle)//  Close the page handle 
#T=pdf_closepath
pdf_closepath(int pdf_object)// Closes path
#T=pdf_closepath_fill_stroke
pdf_closepath_fill_stroke(int pdf_object)// Closes, fills and strokes current path
#T=pdf_closepath_stroke
pdf_closepath_stroke(int pdf_object)// Closes path and draws line along path
#T=pdf_concat
pdf_concat(int pdf_object, float a, float b, float c, float d, float e, float f)// Concatenate a matrix to the CTM
#T=pdf_continue_text
pdf_continue_text(int pdf_object, string text)// Outputs text in next line
#T=pdf_curveto
pdf_curveto(int pdf_object, float x1, float y1, float x2, float y2, float x3, float y3)// Draws a curve
#T=pdf_delete
pdf_delete(int pdf_object)// Deletes a PDF object
#T=pdf_end_page
pdf_end_page(int pdf_object)// Ends a page
#T=pdf_end_pattern
pdf_end_pattern(int pdf_object)// Finish pattern
#T=pdf_end_template
pdf_end_template(int pdf_object)// Finish template
#T=pdf_fill
pdf_fill(int pdf_object)// Fills current path
#T=pdf_fill_stroke
pdf_fill_stroke(int pdf_object)// Fills and strokes current path
#T=pdf_findfont
pdf_findfont(int pdf_object, string fontname, string encoding, int embed)// Prepare font for later use with pdf_setfont().
#T=pdf_get_buffer
pdf_get_buffer(int pdf_object)// Fetch the buffer containig the generated PDF data.
#T=pdf_get_image_height
pdf_get_image_height(int pdf_object, int image)// Returns height of an image
#T=pdf_get_image_width
pdf_get_image_width(int pdf_object, int image)// Returns width of an image
#T=pdf_get_majorversion
pdf_get_majorversion(void )//  Returns the major version number of the PDFlib 
#T=pdf_get_majorversion
pdf_get_majorversion(void )//  Returns the minor version number of the PDFlib 
#T=pdf_get_parameter
pdf_get_parameter(int pdf_object, string key [, float modifier])// Gets certain parameters
#T=pdf_get_pdi_parameter
pdf_get_pdi_parameter(int pdf_object, string key, int doc, int page, int index)// Get some PDI string parameters
#T=pdf_get_pdi_value
pdf_get_pdi_value(int pdf_object, string key, int doc, int page, int index)// Gets some PDI numerical parameters
#T=pdf_get_value
pdf_get_value(int pdf_object, string key [, float modifier])// Gets certain numerical value
#T=pdf_initgraphics
pdf_initgraphics(int pdf_object)// Resets graphic state
#T=pdf_lineto
pdf_lineto(int pdf_object, float x, float y)// Draws a line
#T=pdf_makespotcolor
pdf_makespotcolor(int pdf_object, string spotname)// Makes a spotcolor
#T=pdf_moveto
pdf_moveto(int pdf_object, float x, float y)// Sets current point
#T=pdf_new
pdf_new()// Creates a new pdf object
#T=pdf_open_CCITT
pdf_open_CCITT(int pdf_object, string filename, int width, int height, int BitReverse, int k, int Blackls1)// Opens a new image file with raw CCITT data
#T=pdf_open_file
pdf_open_file(int pdf_object [, string filename])// Opens a new pdf object
#T=pdf_open_image
pdf_open_image(int PDF-document, string imagetype, string source, string data, long length, int width, int height, int components, int bpc, string params)// Versatile function for images
#T=pdf_open_image_file
pdf_open_image_file(int PDF-document, string imagetype, string filename [, string stringparam [, string intparam]])// Reads an image from a file
#T=pdf_open_memory_image
pdf_open_memory_image(int pdf_object, int image)// Opens an image created with PHP's image functions
#T=pdf_open_pdi
pdf_open_pdi(int pdf_object, string filename, string stringparam, int intparam)//  Opens a PDF file 
#T=pdf_open_pdi_page
pdf_open_pdi_page(int pdf_object, int dochandle, int pagenumber, string pagelabel)//  Prepare a page 
#T=pdf_open_tiff
pdf_open_tiff(int PDF-document, string filename)// Deprecated: Opens a TIFF image
#T=pdf_place_image
pdf_place_image(int pdf_object, int image, float x, float y, float scale)// Places an image on the page
#T=pdf_place_pdi_page
pdf_place_pdi_page(int pdf_object, int page, float x, float y, float sx, float sy)// Places an image on the page
#T=pdf_rect
pdf_rect(int pdf_object, float x, float y, float width, float height)// Draws a rectangle
#T=pdf_restore
pdf_restore(int pdf_object)// Restores formerly saved environment
#T=pdf_rotate
pdf_rotate(int pdf_object, float phi)// Sets rotation
#T=pdf_save
pdf_save(int pdf_object)// Saves the current environment
#T=pdf_scale
pdf_scale(int pdf_object, float x-scale, float y-scale)// Sets scaling
#T=pdf_set_border_color
pdf_set_border_color(int pdf_object, float red, float green, float blue)// Sets color of border around links and annotations
#T=pdf_set_border_dash
pdf_set_border_dash(int pdf_object, float black, float white)// Sets dash style of border around links and annotations
#T=pdf_set_border_style
pdf_set_border_style(int pdf_object, string style, float width)// Sets style of border around links and annotations
#T=pdf_set_horiz_scaling
pdf_set_horiz_scaling(int pdf_object, float scale)// Sets horizontal scaling of text
#T=pdf_set_info
pdf_set_info(int pdf_object, string key, string value)// Fills a field of the document information
#T=pdf_set_info_author
pdf_set_info_author(int pdfdoc, string author)//  Fills the author field of the document 
#T=pdf_set_info_creator
pdf_set_info_creator(int pdfdoc, string creator)//  Fills the creator field of the document 
#T=pdf_set_info_keywords
pdf_set_info_keywords(int pdfdoc, string keywords)//  Fills the keywords field of the document 
#T=pdf_set_info_subject
pdf_set_info_subject(int pdfdoc, string subject)//  Fills the subject field of the document 
#T=pdf_set_info_title
pdf_set_info_title(int pdfdoc, string title)//  Fills the title field of the document 
#T=pdf_set_parameter
pdf_set_parameter(int pdf_object, string key, string value)// Sets certain parameters
#T=pdf_set_text_pos
pdf_set_text_pos(int pdf_object, float x, float y)// Sets text position
#T=pdf_set_value
pdf_set_value(int pdf_object, string key, float value)// Sets certain numerical value
#T=pdf_setcolor
pdf_setcolor(int pdf_object, string type, string colorspace, float c1 [, float c2 [, float c3 [, float c4]]])// Sets fill and stroke color
#T=pdf_setdash
pdf_setdash(int pdf_object, float b, float w)// Sets dash pattern
#T=pdf_setflat
pdf_setflat(int pdf_object, float flatness)// Sets flatness
#T=pdf_setfont
pdf_setfont(int pdf_object, int font, float size)// Set the current font
#T=pdf_setgray
pdf_setgray(int pdf_object, float gray)// Sets drawing and filling color to gray value
#T=pdf_setgray_fill
pdf_setgray_fill(int pdf_object, float gray)// Sets filling color to gray value
#T=pdf_setgray_stroke
pdf_setgray_stroke(int pdf_object, float gray)// Sets drawing color to gray value
#T=pdf_setlinecap
pdf_setlinecap(int pdf_object, int linecap)// Sets linecap parameter
#T=pdf_setlinejoin
pdf_setlinejoin(int pdf_object, int value)// Sets linejoin parameter
#T=pdf_setlinewidth
pdf_setlinewidth(int pdf_object, float width)// Sets line width
#T=pdf_setmatrix
pdf_setmatrix(int pdf_object, float a, float b, float c, float d, float e, float f)// Sets current transformation matrix
#T=pdf_setmiterlimit
pdf_setmiterlimit(int pdf_object, float miter)// Sets miter limit
#T=pdf_setpolydash
pdf_setpolydash(int pdf_object, float * dasharray)// Sets complicated dash pattern
#T=pdf_setrgbcolor
pdf_setrgbcolor(int pdf_object, float red_value, float green_value, float blue_value)// Sets drawing and filling color to rgb color value
#T=pdf_setrgbcolor_fill
pdf_setrgbcolor_fill(int pdf_object, float red_value, float green_value, float blue_value)// Sets filling color to rgb color value
#T=pdf_setrgbcolor_stroke
pdf_setrgbcolor_stroke(int pdf_object, float red_value, float green_value, float blue_value)// Sets drawing color to rgb color value
#T=pdf_show
pdf_show(int pdf_object, string text)// Output text at current position
#T=pdf_show_boxed
pdf_show_boxed(int pdf_object, string text, float left, float top, float width, float height, string hmode [, string feature])// Output text in a box
#T=pdf_show_xy
pdf_show_xy(int pdf_object, string text, float x, float y)// Output text at given position
#T=pdf_skew
pdf_skew(int pdf_object, float alpha, float beta)// Skews the coordinate system
#T=pdf_stringwidth
pdf_stringwidth(int pdf_object, string text [, int font [, float size]])// Returns width of text using current font
#T=pdf_stroke
pdf_stroke(int pdf_object)// Draws line along path
#T=pdf_translate
pdf_translate(int pdf_object, float tx, float ty)// Sets origin of coordinate system
#T=pfpro_cleanup
pfpro_cleanup(void )// Shuts down the Payflow Pro library
#T=pfpro_init
pfpro_init(void )// Initialises the Payflow Pro library
#T=pfpro_process
pfpro_process(array parameters [, string address [, int port [, int timeout [, string proxy_address [, int proxy_port [, string proxy_logon [, string proxy_password]]]]]]])// Process a transaction with Payflow Pro
#T=pfpro_process_raw
pfpro_process_raw(string parameters [, string address [, int port [, int timeout [, string proxy_address [, int proxy_port [, string proxy_logon [, string proxy_password]]]]]]])// Process a raw transaction with Payflow Pro
#T=pfpro_version
pfpro_version(void )// Returns the version of the Payflow Pro software
#T=pfsockopen
pfsockopen(string hostname, int port [, int errno [, string errstr [, int timeout]]])//  Open persistent Internet or Unix domain socket connection 
#T=pg_affected_rows
pg_affected_rows(resource result)// Retorna o número de registros afetados (linhas)
#T=pg_cancel_query
pg_cancel_query(resource connection)//  Cancela uma consulta (query) assíncrona 
#T=pg_client_encoding
pg_client_encoding([resource connection])//  Retorna a codificação do cliente 
#T=pg_close
pg_close(resource connection)// Fecha uma conexão PostgreSQL
#T=pg_connect
pg_connect(string connection_string)// Abre uma conexão PostgreSQL
#T=pg_connection_busy
pg_connection_busy(resource connection)//  Verifica se a conexão está ocupada ou não 
#T=pg_connection_reset
pg_connection_reset(resource connection)//  Reinicia uma conexão (reconecta) 
#T=pg_connection_status
pg_connection_status(resource connection)//  Retorna o status da conexão 
#T=pg_convert
pg_convert(resource connection, string table_name, array assoc_array [, int options])//  Converte os valores de um array associativo em uma declaração SQL apropriada. 
#T=pg_copy_from
pg_copy_from(resource connection, string table_name, array rows [, string delimiter [, string null_as]])//  Insere registros em uma tabela a partir de um array 
#T=pg_copy_to
pg_copy_to(resource connection, string table_name [, string delimiter [, string null_as]])//  Copia uma tabela em um array 
#T=pg_dbname
pg_dbname(resource connection)// Retorna o nome do banco de dados
#T=pg_delete
pg_delete(resource connection, string table_name, array assoc_array [, int options])//  Remove registros. 
#T=pg_end_copy
pg_end_copy([resource connection])// Sincroniza com o backend PostgreSQL
#T=pg_escape_bytea
pg_escape_bytea(string data)//  Gera binários para o tipo bytea 
#T=pg_escape_string
pg_escape_string(string data)//  Gera string para o tipo text/char 
#T=pg_fetch_all
pg_fetch_all(resource result [, int row])// Retorna todas as linhas (registros) como um array
#T=pg_fetch_array
pg_fetch_array(resource result [, int row [, int result_type]])// Retorna uma linha (registro) como um array
#T=pg_fetch_assoc
pg_fetch_assoc(resource result [, int row])// Retorna uma linha (registro) como um array
#T=pg_fetch_object
pg_fetch_object(resource result, int row [, int result_type])// Retorna uma linha (registro) como um objeto
#T=pg_fetch_result
pg_fetch_result(resource result, int row, mixed field)// Retorna valores a partir de um recurso (resource) de resultado
#T=pg_fetch_row
pg_fetch_row(resource result, int row)// Retorna uma linha como um array enumerado
#T=pg_field_is_null
pg_field_is_null(resource result, int row, mixed field)// Testa se o campo é NULL
#T=pg_field_name
pg_field_name(resource result, int field_number)// Retorna o nome de um campo
#T=pg_field_num
pg_field_num(resource result, string field_name)// Retorna o número do campo referido
#T=pg_field_prtlen
pg_field_prtlen(resource result, int row_number, string field_name)// Retorna o comprimento impresso
#T=pg_field_size
pg_field_size(resource result, int field_number)//  Retorna o tamanho de armazenamento interno de um campo 
#T=pg_field_type
pg_field_type(resource result, int field_number)//  Retorna o nome do tipo para o campo de nome correspondente 
#T=pg_free_result
pg_free_result(resource result)// Libera a memória usada pelo resultado
#T=pg_get_notify
pg_get_notify(resource connection [, int result_type])// Ping database connection
#T=pg_get_pid
pg_get_pid(resource connection)// Ping database connection
#T=pg_get_result
pg_get_result([resource connection])//  Retorna o resultado de uma consulta (query) assíncrona 
#T=pg_host
pg_host(resource connection)//  Retorna o nome da máquina associada a uma conexão 
#T=pg_insert
pg_insert(resource connection, string table_name, array assoc_array [, int options])//  Insere um array na tabela 
#T=pg_last_error
pg_last_error(resource connection)// Retorna a string da última mensagem de erro de uma conexão
#T=pg_last_notice
pg_last_notice(resource connection)//  Retorna a última notificação do servidor PostgreSQL 
#T=pg_last_oid
pg_last_oid(resource result)// Retorna o último oid do objeto
#T=pg_lo_close
pg_lo_close(resource large_object)// Fecha um objeto grande (large object)
#T=pg_lo_create
pg_lo_create(resource connection)// Cria um objeto grande (large object)
#T=pg_lo_export
pg_lo_export(int oid, string pathname [, resource connection])// Exporta um objeto grande (large object) para um arquivo
#T=pg_lo_import
pg_lo_import([resource connection, string pathname])// Importa um objeto grande (large object) a partir de um arquivo
#T=pg_lo_open
pg_lo_open(resource connection, int oid, string mode)// Abre um objeto grande (large object)
#T=pg_lo_read
pg_lo_read(resource large_object, int len)// Lê um objeto grande (large object)
#T=pg_lo_read_all
pg_lo_read_all(resource large_object)//  Lê um objeto grande (large object) inteiro e o envia diretamente para o navegador 
#T=pg_lo_seek
pg_lo_seek(resource large_object, int offset [, int whence])//  Procura uma posição em um objeto grande (large object) 
#T=pg_lo_tell
pg_lo_tell(resource large_object)//  Retorna a posição atual de um objeto grande (large object) 
#T=pg_lo_unlink
pg_lo_unlink(resource connection, int oid)// Remove um objeto grande (large object)
#T=pg_lo_write
pg_lo_write(resource large_object, string data)// Escreve em um objeto grande (large object)
#T=pg_num_fields
pg_num_fields(resource result)// Retorna o número de campos
#T=pg_num_rows
pg_num_rows(resource result)// Retorna o número de linhas
#T=pg_options
pg_options(resource connection)// Retorna as opções associadas com a conexão
#T=pg_pconnect
pg_pconnect(string connection_string)// Abre uma conexão PostgreSQL persistente
#T=pg_ping
pg_ping(resource connection)// Faz um ping na conexão com o banco de dados
#T=pg_port
pg_port(resource connection)//  Retorna o número da porta associada com a conexão. 
#T=pg_put_line
pg_put_line([resource connection, string data])// Envia uma string terminada em NULL para o backend PostgreSQL
#T=pg_query
pg_query(resource connection, string query)// Executa uma consulta (query)
#T=pg_result_error
pg_result_error(resource result)//  Retorna a mensagem de erro associada a um resultado 
#T=pg_result_seek
pg_result_seek(resource result, int offset)// Altera a posição do ponteiro interno de um recurso (resource) de resultado
#T=pg_result_status
pg_result_status(resource result)//  Retorna o status do resultado da consulta (query) 
#T=pg_select
pg_select(resource connection, string table_name, array assoc_array [, int options])//  Seleciona registros. 
#T=pg_send_query
pg_send_query(resource connection, string query)//  Envia uma consulta (query) assincrona 
#T=pg_set_client_encoding
pg_set_client_encoding([resource connection, string encoding])//  Define a codificação do cliente 
#T=pg_trace
pg_trace(string pathname [, string mode [, resource connection]])// Habilita rastreamento em uma conexão PostgreSQL
#T=pg_tty
pg_tty(resource connection)//  Retorna o nome da tty associada com a conexão 
#T=pg_unescape_bytea
pg_unescape_bytea(string data)//  Faz escape binário para o tipo bytea 
#T=pg_untrace
pg_untrace([resource connection])// Desabilita o rastreamento de uma conexão PostgreSQL
#T=pg_update
pg_update(resource connection, string table_name, array data, array condition [, int options])//  Atualiza uma tabela. 
#T=php_ini_scanned_files
php_ini_scanned_files(void )// Return a list of .ini files parsed from the additional ini dir
#T=php_logo_guid
php_logo_guid(void )// Gets the logo guid
#T=php_sapi_name
php_sapi_name(void )//  Returns the type of interface between web server and PHP 
#T=php_uname
php_uname(void )//  Returns information about the operating system PHP was built on 
#T=phpcredits
phpcredits([int flag])// Prints out the credits for PHP
#T=phpinfo
phpinfo([int what])// Outputs lots of PHP information
#T=phpversion
phpversion(void )// Gets the current PHP version
#T=pi
pi(void )// Obtêm o valor de pi
#T=png2wbmp
png2wbmp(string pngname, string wbmpname, int d_height, int d_width, int threshold)// Convert PNG image file to WBMP image file
#T=popen
popen(string command, string mode)// Abre um processo como ponteiro de arquivo
#T=pos
pos(array array)// Retorna o elemento atual do array
#T=posix_ctermid
posix_ctermid(void )// Get path name of controlling terminal
#T=posix_get_last_error
posix_get_last_error(void )//  Retrieve the error number set by the last posix function that failed. 
#T=posix_getcwd
posix_getcwd(void )// Pathname of current directory
#T=posix_getegid
posix_getegid(void )//  Return the effective group ID of the current process 
#T=posix_geteuid
posix_geteuid(void )//  Return the effective user ID of the current process 
#T=posix_getgid
posix_getgid(void )//  Return the real group ID of the current process 
#T=posix_getgrgid
posix_getgrgid(int gid)// Return info about a group by group id
#T=posix_getgrnam
posix_getgrnam(string name)// Return info about a group by name
#T=posix_getgroups
posix_getgroups(void )//  Return the group set of the current process 
#T=posix_getlogin
posix_getlogin(void )// Return login name
#T=posix_getpgid
posix_getpgid(int pid)// Get process group id for job control
#T=posix_getpgrp
posix_getpgrp(void )//  Return the current process group identifier 
#T=posix_getpid
posix_getpid(void )// Return the current process identifier
#T=posix_getppid
posix_getppid(void )// Return the parent process identifier
#T=posix_getpwnam
posix_getpwnam(string username)// Return info about a user by username
#T=posix_getpwuid
posix_getpwuid(int uid)// Return info about a user by user id
#T=posix_getrlimit
posix_getrlimit(void )// Return info about system ressource limits
#T=posix_getsid
posix_getsid(int pid)// Get the current sid of the process
#T=posix_getuid
posix_getuid(void )//  Return the real user ID of the current process 
#T=posix_isatty
posix_isatty(int fd)//  Determine if a file descriptor is an interactive terminal 
#T=posix_kill
posix_kill(int pid, int sig)// Send a signal to a process
#T=posix_mkfifo
posix_mkfifo(string pathname, int mode)//  Create a fifo special file (a named pipe) 
#T=posix_setegid
posix_setegid(int gid)//  Set the effective GID of the current process 
#T=posix_seteuid
posix_seteuid(int uid)//  Set the effective UID of the current process 
#T=posix_setgid
posix_setgid(int gid)//  Set the GID of the current process 
#T=posix_setpgid
posix_setpgid(int pid, int pgid)// set process group id for job control
#T=posix_setsid
posix_setsid(void )// Make the current process a session leader
#T=posix_setuid
posix_setuid(int uid)//  Set the UID of the current process 
#T=posix_strerror
posix_strerror(int errno)//  Retrieve the system error message associated with the given errno. 
#T=posix_times
posix_times(void )// Get process times
#T=posix_ttyname
posix_ttyname(int fd)// Determine terminal device name
#T=posix_uname
posix_uname(void )// Get system name
#T=pow
pow(number base, number exp)// Potência
#T=preg_grep
preg_grep(string pattern, array input)//  Return array entries that match the pattern 
#T=preg_match
preg_match(string pattern, string subject [, array matches [, int flags]])// Perform a regular expression match
#T=preg_match_all
preg_match_all(string pattern, string subject, array matches [, int flags])// Perform a global regular expression match
#T=preg_quote
preg_quote(string str [, string delimiter])// Quote regular expression characters
#T=preg_replace
preg_replace(mixed pattern, mixed replacement, mixed subject [, int limit])// Perform a regular expression search and replace
#T=preg_replace_callback
preg_replace_callback(mixed pattern, callback callback, mixed subject [, int limit])// Perform a regular expression search and replace using a callback
#T=preg_split
preg_split(string pattern, string subject [, int limit [, int flags]])// Split string by a regular expression
#T=prev
prev(array array)// Retrocede o ponteiro interno de um array
#T=print
print(string arg)// Mostra uma string
#T=print_r
print_r(mixed expression [, bool return])//  Prints human-readable information about a variable 
#T=printer_abort
printer_abort(resource handle)// Deletes the printer's spool file
#T=printer_close
printer_close(resource handle)// Close an open printer connection
#T=printer_create_brush
printer_create_brush(int style, string color)// Create a new brush
#T=printer_create_dc
printer_create_dc(resource handle)// Create a new device context
#T=printer_create_font
printer_create_font(string face, int height, int width, int font_weight, bool italic, bool underline, bool strikeout, int orientaton)// Create a new font
#T=printer_create_pen
printer_create_pen(int style, int width, string color)// Create a new pen
#T=printer_delete_brush
printer_delete_brush(resource handle)// Delete a brush
#T=printer_delete_dc
printer_delete_dc(resource handle)// Delete a device context
#T=printer_delete_font
printer_delete_font(resource handle)// Delete a font
#T=printer_delete_pen
printer_delete_pen(resource handle)// Delete a pen
#T=printer_draw_bmp
printer_draw_bmp(resource handle, string filename, int x, int y)// Draw a bmp
#T=printer_draw_chord
printer_draw_chord(resource handle, int rec_x, int rec_y, int rec_x1, int rec_y1, int rad_x, int rad_y, int rad_x1, int rad_y1)// Draw a chord
#T=printer_draw_elipse
printer_draw_elipse(resource handle, int ul_x, int ul_y, int lr_x, int lr_y)// Draw an ellipse
#T=printer_draw_line
printer_draw_line(resource printer_handle, int from_x, int from_y, int to_x, int to_y)// Draw a line
#T=printer_draw_pie
printer_draw_pie(resource handle, int rec_x, int rec_y, int rec_x1, int rec_y1, int rad1_x, int rad1_y, int rad2_x, int rad2_y)// Draw a pie
#T=printer_draw_rectangle
printer_draw_rectangle(resource handle, int ul_x, int ul_y, int lr_x, int lr_y)// Draw a rectangle
#T=printer_draw_roundrect
printer_draw_roundrect(resource handle, int ul_x, int ul_y, int lr_x, int lr_y, int width, int height)// Draw a rectangle with rounded corners
#T=printer_draw_text
printer_draw_text(resource printer_handle, string text, int x, int y)// Draw text
#T=printer_end_doc
printer_end_doc(resource handle)// Close document
#T=printer_end_page
printer_end_page(resource handle)// Close active page
#T=printer_get_option
printer_get_option(resource handle, string option)// Retrieve printer configuration data
#T=printer_list
printer_list(int enumtype [, string name [, int level]])// Return an array of printers attached to the server 
#T=printer_logical_fontheight
printer_logical_fontheight(resource handle, int height)// Get logical font height
#T=printer_open
printer_open([string devicename])// Open connection to a printer
#T=printer_select_brush
printer_select_brush(resource printer_handle, resource brush_handle)// Select a brush
#T=printer_select_font
printer_select_font(resource printer_handle, resource font_handle)// Select a font
#T=printer_select_pen
printer_select_pen(resource printer_handle, resource pen_handle)// Select a pen
#T=printer_set_option
printer_set_option(resource handle, int option, mixed value)// Configure the printer connection
#T=printer_start_doc
printer_start_doc(resource handle [, string document])// Start a new document
#T=printer_start_page
printer_start_page(resource handle)// Start a new page
#T=printer_write
printer_write(resource handle, string content)// Write data to the printer
#T=printf
printf(string format [, mixed args])// Mostra uma string formatada
#T=proc_close
proc_close(resource process)//  Close a process opened by proc_open() and return the exit code of that process. 
#T=proc_get_status
proc_get_status(resource process)//  Get information about a process opened by proc_open() 
#T=proc_nice
proc_nice(int priority)//  Change the priority of the current process 
#T=proc_open
proc_open(string cmd, array descriptorspec, array pipes)//  Execute a command and open file pointers for input/output 
#T=proc_terminate
proc_terminate(resource process [, int signal])//  kills a process opened by proc_open 
#T=pspell_add_to_personal
pspell_add_to_personal(int dictionary_link, string word)// Add the word to a personal wordlist
#T=pspell_add_to_session
pspell_add_to_session(int dictionary_link, string word)// Add the word to the wordlist in the current session 
#T=pspell_check
pspell_check(int dictionary_link, string word)// Check a word
#T=pspell_clear_session
pspell_clear_session(int dictionary_link)// Clear the current session
#T=pspell_config_create
pspell_config_create(string language [, string spelling [, string jargon [, string encoding]]])// Create a config used to open a dictionary
#T=pspell_config_ignore
pspell_config_ignore(int dictionary_link, int n)// Ignore words less than N characters long
#T=pspell_config_mode
pspell_config_mode(int dictionary_link, int mode)// Change the mode number of suggestions returned
#T=pspell_config_personal
pspell_config_personal(int dictionary_link, string file)// Set a file that contains personal wordlist
#T=pspell_config_repl
pspell_config_repl(int dictionary_link, string file)// Set a file that contains replacement pairs
#T=pspell_config_runtogether
pspell_config_runtogether(int dictionary_link, bool flag)// Consider run-together words as valid compounds
#T=pspell_config_save_repl
pspell_config_save_repl(int dictionary_link, bool flag)// Determine whether to save a replacement pairs list along with the wordlist
#T=pspell_new
pspell_new(string language [, string spelling [, string jargon [, string encoding [, int mode]]]])// Load a new dictionary
#T=pspell_new_config
pspell_new_config(int config)// Load a new dictionary with settings based on a given config 
#T=pspell_new_personal
pspell_new_personal(string personal, string language [, string spelling [, string jargon [, string encoding [, int mode]]]])// Load a new dictionary with personal wordlist
#T=pspell_save_wordlist
pspell_save_wordlist(int dictionary_link)// Save the personal wordlist to a file
#T=pspell_store_replacement
pspell_store_replacement(int dictionary_link, string misspelled, string correct)// Store a replacement pair for a word
#T=pspell_suggest
pspell_suggest(int dictionary_link, string word)// Suggest spellings of a word
#T=putenv
putenv(string setting)// Sets the value of an environment variable
#T=qdom_error
qdom_error(void )// Returns the error string from the last QDOM operation or FALSE if no errors occured
#T=qdom_tree
qdom_tree(string )// creates a tree of an xml string
#T=quoted_printable_decode
quoted_printable_decode(string str)//  Converte uma string quoted-printable para uma string de 8 bit 
#T=quotemeta
quotemeta(string str)// Adiciona uma barra invertida antes dos meta caracteres
#T=rad2deg
rad2deg(float number)//  Converte o número em radianos para o equivalente em graus 
#T=rand
rand([int min, int max])// Gera um número aleatório
#T=range
range(mixed low, mixed high [, int step])//  Cria um array contendo uma faixa de elementos 
#T=rawurldecode
rawurldecode(string str)// Decode URL-encoded strings
#T=rawurlencode
rawurlencode(string str)// URL-encode according to RFC 1738
#T=readdir
readdir(resource dir_handle)// Lê os campos do manipulador do diretório
#T=readfile
readfile(string nomedoarquivo [, int use_include_path])// Le o conteúdo de um arquivo
#T=readgzfile
readgzfile(string filename [, int use_include_path])// Output a gz-file
#T=readline
readline([string prompt])// Reads a line
#T=readline_add_history
readline_add_history(string line)// Adds a line to the history
#T=readline_clear_history
readline_clear_history(void )// Clears the history
#T=readline_completion_function
readline_completion_function(string line)// Registers a completion function
#T=readline_info
readline_info([string varname [, string newvalue]])// Gets/sets various internal readline variables
#T=readline_list_history
readline_list_history(void )// Lists the history
#T=readline_read_history
readline_read_history(string filename)// Reads the history
#T=readline_write_history
readline_write_history(string filename)// Writes the history
#T=readlink
readlink(string path)// Retornar o alvo de um link simbólico
#T=realpath
realpath(string path)// Retorna o path absoluto canonicalizado
#T=recode_file
recode_file(string request, resource input, resource output)//  Recode from file to file according to recode request
#T=recode_string
recode_string(string request, string string)// Recode a string according to a recode request
#T=register_shutdown_function
register_shutdown_function(callback function)//  Register a function for execution on shutdown 
#T=register_tick_function
register_tick_function(callback function [, mixed arg])//  Register a function for execution on each tick 
#T=rename
rename(string nomeantigo, string novonome)// Renomear um arquivo
#T=reset
reset(array array)//  Faz o ponteiro interno de um array apontar para o seu primeiro elemento 
#T=restore_error_handler
restore_error_handler(void )//  Restores the previous error handler function 
#T=restore_include_path
restore_include_path(void )//  Restores the value of the include_path configuration option 
#T=rewind
rewind(int fp)// Reinicializa a posição do ponteiro de arquivos para o início
#T=rewinddir
rewinddir(resource dir_handle)// voltar (rewind) o handle de diretório
#T=rmdir
rmdir(string nomedodir)// Remove um diretório
#T=round
round(float val [, int precision])// Arredonda um número
#T=rsort
rsort(array array [, int sort_flags])// Ordena um array em ordem descrescente
#T=rtrim
rtrim(string str [, string charlist])//  Retira espaço em branco do final da string 
#T=scandir
scandir(string directory [, int sorting_order])//  List files and directories inside the specified path 
#T=sem_acquire
sem_acquire(int sem_identifier)// Acquire a semaphore
#T=sem_get
sem_get(int key [, int max_acquire [, int perm]])// Get a semaphore id
#T=sem_release
sem_release(int sem_identifier)// Release a semaphore
#T=sem_remove
sem_remove(int sem_identifier)// Remove a semaphore
#T=serialize
serialize(mixed value)//  Generates a storable representation of a value 
#T=sesam_affected_rows
sesam_affected_rows(string result_id)//  Get number of rows affected by an immediate query 
#T=sesam_commit
sesam_commit(void )//  Commit pending updates to the SESAM database 
#T=sesam_connect
sesam_connect(string catalog, string schema, string user)// Open SESAM database connection
#T=sesam_diagnostic
sesam_diagnostic(void )//  Return status information for last SESAM call 
#T=sesam_disconnect
sesam_disconnect(void )// Detach from SESAM connection
#T=sesam_errormsg
sesam_errormsg(void )// Returns error message of last SESAM call
#T=sesam_execimm
sesam_execimm(string query)// Execute an "immediate" SQL-statement
#T=sesam_fetch_array
sesam_fetch_array(string result_id [, int whence [, int offset]])// Fetch one row as an associative array
#T=sesam_fetch_result
sesam_fetch_result(string result_id [, int max_rows])// Return all or part of a query result
#T=sesam_fetch_row
sesam_fetch_row(string result_id [, int whence [, int offset]])// Fetch one row as an array
#T=sesam_field_array
sesam_field_array(string result_id)//  Return meta information about individual columns in a result 
#T=sesam_field_name
sesam_field_name(string result_id, int index)//  Return one column name of the result set 
#T=sesam_free_result
sesam_free_result(string result_id)// Releases resources for the query
#T=sesam_num_fields
sesam_num_fields(string result_id)//  Return the number of fields/columns in a result set 
#T=sesam_query
sesam_query(string query [, bool scrollable])// Perform a SESAM SQL query and prepare the result
#T=sesam_rollback
sesam_rollback(void )//  Discard any pending updates to the SESAM database 
#T=sesam_seek_row
sesam_seek_row(string result_id, int whence [, int offset])//  Set scrollable cursor mode for subsequent fetches 
#T=sesam_settransaction
sesam_settransaction(int isolation_level, int read_only)// Set SESAM transaction parameters
#T=session_cache_expire
session_cache_expire([int new_cache_expire])// Retorna o prazo do cache atual
#T=session_cache_limiter
session_cache_limiter([string cache_limiter])// Obtém e/ou define o limitador do cache atual
#T=session_decode
session_decode(string data)// Decifra dado de sessão de uma string
#T=session_destroy
session_destroy(void )// Destrói todos os dados registrados para uma sessão
#T=session_encode
session_encode(void )//  Codifica os dados da sessão atual como uma string 
#T=session_get_cookie_params
session_get_cookie_params(void )//  Obtém os parâmetros do cookie da sessão 
#T=session_id
session_id([string id])// Obtém e/ou define a id da sessão atual
#T=session_is_registered
session_is_registered(string name)//  Descobre se uma variável está registrada numa sessão 
#T=session_module_name
session_module_name([string module])// Obtém e/ou define o módulo da sessão atual
#T=session_name
session_name([string name])// Obtém e/ou define o nome da sessão atual
#T=session_regenerate_id
session_regenerate_id(void )//  Update the current session id with a newly generated one 
#T=session_register
session_register(mixed name [, mixed ...])//  Registrar uma ou mais variáveis na sessão atual 
#T=session_save_path
session_save_path([string path])// Obtém e/ou define o save path da sessão atual
#T=session_set_cookie_params
session_set_cookie_params(int lifetime [, string path [, string domain [, bool secure]]])//  Define os parâmetros do cookie de sessão 
#T=session_set_save_handler
session_set_save_handler(string open, string close, string read, string write, string destroy, string gc)//  Define a sequência de funções de armazenamento 
#T=session_start
session_start(void )// Inicia dados de sessão
#T=session_unregister
session_unregister(string name)//  Desregistra variável da sessão atual 
#T=session_unset
session_unset(void )//  Liberta todas as variáveis de sessão 
#T=session_write_close
session_write_close(void )// Escreve dados de sessão e termina a sessão
#T=set_error_handler
set_error_handler(callback error_handler)//  Sets a user-defined error handler function. 
#T=set_include_path
set_include_path(string new_include_path)//  Sets the include_path configuration option
#T=set_magic_quotes_runtime
set_magic_quotes_runtime(int new_setting)//  Sets the current active configuration setting of magic_quotes_runtime 
#T=set_time_limit
set_time_limit(int seconds)// Limits the maximum execution time
#T=setcookie
setcookie(string name [, string value [, int expire [, string path [, string domain [, int secure]]]]])// Send a cookie
#T=setlocale
setlocale(mixed category, string locale [, string ...])// Set locale information
#T=settype
settype(mixed var, string type)// Set the type of a variable
#T=sha1
sha1(string str [, bool raw_output])// Calcula a hash sha1 de uma string
#T=sha1_file
sha1_file(string nomedoarquivo [, bool raw_output])// Calcula a hash sha1 de um arquivo
#T=shell_exec
shell_exec(string cmd)//  Execute command via shell and return complete output as string 
#T=shm_attach
shm_attach(int key [, int memsize [, int perm]])// Creates or open a shared memory segment
#T=shm_detach
shm_detach(int shm_identifier)// Disconnects from shared memory segment
#T=shm_get_var
shm_get_var(int id, int variable_key)// Returns a variable from shared memory
#T=shm_put_var
shm_put_var(int shm_identifier, int variable_key, mixed variable)// Inserts or updates a variable in shared memory
#T=shm_remove
shm_remove(int shm_identifier)// Removes shared memory from Unix systems
#T=shm_remove_var
shm_remove_var(int id, int variable_key)// Removes a variable from shared memory 
#T=shmop_close
shmop_close(int shmid)// Close shared memory block
#T=shmop_delete
shmop_delete(int shmid)// Delete shared memory block
#T=shmop_open
shmop_open(int key, string flags, int mode, int size)// Create or open shared memory block
#T=shmop_read
shmop_read(int shmid, int start, int count)// Read data from shared memory block
#T=shmop_size
shmop_size(int shmid)// Get size of shared memory block
#T=shmop_write
shmop_write(int shmid, string data, int offset)// Write data into shared memory block
#T=shuffle
shuffle(array array)// Mistura os elementos de um array
#T=similar_text
similar_text(string first, string second [, float percent])//  Calculate the similarity between two strings 
#T=sin
sin(float arg)// Seno
#T=sinh
sinh(float arg)// Seno hiperbólico
#T=sizeof
sizeof(mixed var)// Retorna o número de elementos de uma variável
#T=sleep
sleep(int seconds)// Atrasa a execução do script
#T=snmp_get_quick_print
snmp_get_quick_print(void )//  Fetches the current value of the UCD library's quick_print setting 
#T=snmp_set_quick_print
snmp_set_quick_print(bool quick_print)// Set the value of quick_print within the UCD SNMP library 
#T=snmpget
snmpget(string hostname, string community, string object_id [, int timeout [, int retries]])// Fetch an SNMP object
#T=snmprealwalk
snmprealwalk(string host, string community, string object_id [, int timeout [, int retries]])//  Return all objects including their respective object ID within the specified one 
#T=snmpset
snmpset(string hostname, string community, string object_id, string type, mixed value [, int timeout [, int retries]])// Set an SNMP object
#T=snmpwalk
snmpwalk(string hostname, string community, string object_id [, int timeout [, int retries]])// Fetch all the SNMP objects from an agent
#T=snmpwalkoid
snmpwalkoid(string hostname, string community, string object_id [, int timeout [, int retries]])// Query for a tree of information about a network entity 
#T=socket_accept
socket_accept(resource socket)// Accepts a connection on a socket
#T=socket_bind
socket_bind(resource socket, string address [, int port])// Binds a name to a socket
#T=socket_clear_error
socket_clear_error([resource socket])// Clears the error on the socket or the last error code
#T=socket_close
socket_close(resource socket)// Closes a socket resource
#T=socket_connect
socket_connect(resource socket, string address [, int port])// Initiates a connection on a socket
#T=socket_create
socket_create(int domain, int type, int protocol)// Create a socket (endpoint for communication)
#T=socket_create_listen
socket_create_listen(int port [, int backlog])// Opens a socket on port to accept connections 
#T=socket_create_pair
socket_create_pair(int domain, int type, int protocol, array &fd)// Creates a pair of indistinguishable sockets and stores them in fds. 
#T=socket_get_option
socket_get_option(resource socket, int level, int optname)// Gets socket options for the socket 
#T=socket_getpeername
socket_getpeername(resource socket, string &addr [, int &port])//  Queries the remote side of the given socket which may either result in host/port or in a UNIX filesystem path, dependent on its type.
#T=socket_getsockname
socket_getsockname(resource socket, string &addr [, int &port])//  Queries the local side of the given socket which may either result in host/port or in a UNIX filesystem path, dependent on its type. 
#T=socket_iovec_add
socket_iovec_add(resource iovec, int iov_len)// Adds a new vector to the scatter/gather array 
#T=socket_iovec_alloc
socket_iovec_alloc(int num_vectors [, int ])//  Builds a 'struct iovec' for use with sendmsg, recvmsg, writev, and readv 
#T=socket_iovec_delete
socket_iovec_delete(resource iovec, int iov_pos)// Deletes a vector from an array of vectors 
#T=socket_iovec_fetch
socket_iovec_fetch(resource iovec, int iovec_position)// Returns the data held in the iovec specified by iovec_id[iovec_position] 
#T=socket_iovec_free
socket_iovec_free(resource iovec)// Frees the iovec specified by iovec_id 
#T=socket_iovec_set
socket_iovec_set(resource iovec, int iovec_position, string new_val)// Sets the data held in iovec_id[iovec_position] to new_val 
#T=socket_last_error
socket_last_error([resource socket])// Returns the last error on the socket 
#T=socket_listen
socket_listen(resource socket [, int backlog])// Listens for a connection on a socket
#T=socket_read
socket_read(resource socket, int length [, int type])// Reads a maximum of length bytes from a socket
#T=socket_readv
socket_readv(resource socket, resource iovec_id)// Reads from an fd, using the scatter-gather array defined by iovec_id 
#T=socket_recv
socket_recv(resource socket, string &buf, int len, int flags)// Receives data from a connected socket 
#T=socket_recvfrom
socket_recvfrom(resource socket, string &buf, int len, int flags, string &name [, int &port])// Receives data from a socket, connected or not 
#T=socket_recvmsg
socket_recvmsg(resource socket, resource iovec, array &control, int &controllen, int &flags, string &addr [, int &port])// Used to receive messages on a socket, whether connection-oriented or not 
#T=socket_select
socket_select(array &read, array &write, array &except, int tv_sec [, int tv_usec])//  Runs the select() system call on the given arrays of sockets with a specified timeout 
#T=socket_send
socket_send(resource socket, string buf, int len, int flags)// Sends data to a connected socket 
#T=socket_sendmsg
socket_sendmsg(resource socket, resource iovec, int flags, string addr [, int port])// Sends a message to a socket, regardless of whether it is connection-oriented or not 
#T=socket_sendto
socket_sendto(resource socket, string buf, int len, int flags, string addr [, int port])// Sends a message to a socket, whether it is connected or not 
#T=socket_set_block
socket_set_block(resource socket)//  Sets blocking mode on a socket resource 
#T=socket_set_nonblock
socket_set_nonblock(resource socket)// Sets nonblocking mode for file descriptor fd
#T=socket_set_option
socket_set_option(resource socket, int level, int optname, mixed optval)// Sets socket options for the socket
#T=socket_shutdown
socket_shutdown(resource socket [, int how])// Shuts down a socket for receiving, sending, or both.
#T=socket_strerror
socket_strerror(int errno)// Return a string describing a socket error
#T=socket_write
socket_write(resource socket, string buffer [, int length])// Write to a socket
#T=socket_writev
socket_writev(resource socket, resource iovec_id)// Writes to a file descriptor, fd, using the scatter-gather array defined by iovec_id 
#T=sort
sort(array array [, int sort_flags])// Ordena um array
#T=soundex
soundex(string str)// Calculate the soundex key of a string
#T=split
split(string expressao, string variavel [, int limite])// Separa strings em matrizes(array) utilizando expressões regulares
#T=spliti
spliti(string expressao, string variavel [, int limite])//  Separa strings em matrizes(array) utilizando expressões regulares insensíveis a maiúsculas e minúsculas 
#T=sql_regcase
sql_regcase(string variavel)//  Cria expressões regulares insensíveis a maiúsculas e minúsculas.
#T=sqlite_array_query
sqlite_array_query(resource db, string query [, int result_type [, bool decode_binary]])// Executa uma query ao banco de dados e retorna uma matriz
#T=sqlite_busy_timeout
sqlite_busy_timeout(resource dbhandle, int milliseconds)// Set busy timeout duration, or disable busy handlers.
#T=sqlite_changes
sqlite_changes(resource dbhandle)//  Returns the number of rows that were changed by the most recent SQL statement. 
#T=sqlite_close
sqlite_close(resource database)// Fercha um banco de dados SQLite que esteja aberto.
#T=sqlite_column
sqlite_column(resource result, mixed index_or_name [, bool decode_binary])// Fetches a column from the current row of a result set.
#T=sqlite_create_aggregate
sqlite_create_aggregate(resource dbhandle, string function_name, mixed step_func, mixed finalize_func [, int num_args])// Register an aggregating UDF for use in SQL statements.
#T=sqlite_create_function
sqlite_create_function(resource dbhandle, string function_name, mixed callback [, int num_args])//  Registers a "regular" User Defined Function for use in SQL statements. 
#T=sqlite_current
sqlite_current(resource result [, int result_type [, bool decode_binary]])// Fetches the current row from a result set as an array.
#T=sqlite_error_string
sqlite_error_string(int error_code)// Retorna a descrição textual de um código de erro
#T=sqlite_escape_string
sqlite_escape_string(string item)// Escapa uma string para ser usada como um parâmetro em uma query
#T=sqlite_fetch_array
sqlite_fetch_array(resource result [, int result_type [, bool decode_binary]])// Obtém a próxima linha de um resultado como uma matriz.
#T=sqlite_fetch_single
sqlite_fetch_single(resource result [, int result_type [, bool decode_binary]])// Fetches the first column of a result set as a string.
#T=sqlite_field_name
sqlite_field_name(resource result, int field_index)// Returns the name of a particular field.
#T=sqlite_has_more
sqlite_has_more(resource result)// Returns whether or not more rows are available.
#T=sqlite_last_error
sqlite_last_error(resource db)// Retorna o código de erro para o último erro de um banco de dados
#T=sqlite_last_insert_rowid
sqlite_last_insert_rowid(resource dbhandle)// Returns the rowid of the most recently inserted row.
#T=sqlite_libencoding
sqlite_libencoding(void )// Returns the encoding of the linked SQLite library.
#T=sqlite_libversion
sqlite_libversion(void )// Returns the version of the linked SQLite library.
#T=sqlite_next
sqlite_next(resource result)// Seek to the next row number.
#T=sqlite_num_fields
sqlite_num_fields(resource result)// Returns the number of fields in a result set.
#T=sqlite_num_rows
sqlite_num_rows(resource result)// Returns the number of rows in a buffered result set.
#T=sqlite_open
sqlite_open(string filename [, int mode [, string &errmessage]])// Abre um banco de dados SQLite. Irá criar o banco de dados se ele não existir
#T=sqlite_popen
sqlite_popen(string filename [, int mode [, string &error_message]])//  Opens a persistent handle to an SQLite database. Will create the database if it does not exist. 
#T=sqlite_query
sqlite_query(resource dbhandle, string query)//  Executes a query against a given database and returns a result handle. 
#T=sqlite_rewind
sqlite_rewind(resource result)// Seek to the first row number.
#T=sqlite_seek
sqlite_seek(resource result, int rownum)// Seek to a particular row number of a buffered result set.
#T=sqlite_udf_decode_binary
sqlite_udf_decode_binary(string data)// Decode binary data passed as parameters to an UDF.
#T=sqlite_udf_encode_binary
sqlite_udf_encode_binary(string data)// Encode binary data before returning it from an UDF.
#T=sqlite_unbuffered_query
sqlite_unbuffered_query(resource dbhandle, string query)// Execute a query that does not prefetch and buffer all data
#T=sqrt
sqrt(float arg)// Raiz quadrada
#T=srand
srand(int seed)// Semeia o gerador de números aletórios
#T=sscanf
sscanf(string str, string format [, string var1])//  Parses input from a string according to a format 
#T=stat
stat(string nomedoarquivo)// Obtem informações sobre um arquivo
#T=str_ireplace
str_ireplace(mixed search, mixed replace, mixed subject [, int &count])//  Case-insensitive version of str_replace(). 
#T=str_pad
str_pad(string input, int pad_length [, string pad_string [, int pad_type]])//  Preenche uma string para um certo tamanho com outra string 
#T=str_repeat
str_repeat(string input, int multiplier)// Repeat a string
#T=str_replace
str_replace(mixed search, mixed replace, mixed subject [, int &count])//  Replace all occurrences of the search string with the replacement string 
#T=str_rot13
str_rot13(string str)// Perform the rot13 transform on a string
#T=str_shuffle
str_shuffle(string str)// Randomly shuffles a string
#T=str_split
str_split(string string [, int split_length])//  Convert a string to an array 
#T=str_word_count
str_word_count(string string [, int format])//  Return information about words used in a string 
#T=strcasecmp
strcasecmp(string str1, string str2)//  Binary safe case-insensitive string comparison 
#T=strcmp
strcmp(string str1, string str2)// Comparação de string segura para binário
#T=strcoll
strcoll(string str1, string str2)// Comparação de string baseada no local
#T=strcspn
strcspn(string str1, string str2)//  Encontra o tamanho do segmento inicial que não contenha a mascara 
#T=stream_context_create
stream_context_create(array options)// Create a streams context
#T=stream_context_get_options
stream_context_get_options(resource stream|context)// Retrieve options for a stream/wrapper/context
#T=stream_context_set_option
stream_context_set_option(resource context|stream, string wrapper, string option, mixed value)// Sets an option for a stream/wrapper/context
#T=stream_context_set_params
stream_context_set_params(resource stream|context, array params)// Set parameters for a stream/wrapper/context
#T=stream_copy_to_stream
stream_copy_to_stream(resource source, resource dest [, int maxlength])// Copies data from one stream to another
#T=stream_filter_append
stream_filter_append(resource stream, string filtername [, int read_write [, string params]])// Attach a filter to a stream.
#T=stream_filter_prepend
stream_filter_prepend(resource stream, string filtername [, int read_write [, string params]])// Attach a filter to a stream.
#T=stream_filter_register
stream_filter_register(string filtername, string classname)//  Register a stream filter implemented as a PHP class derived from php_user_filter 
#T=stream_get_filters
stream_get_filters(void )// Retrieve list of registered filters
#T=stream_get_line
stream_get_line(resource handle, int length, string ending)// Gets line from stream resource up to a given delimiter
#T=stream_get_meta_data
stream_get_meta_data(resource stream)// Retrieves header/meta data from streams/file pointers
#T=stream_get_transports
stream_get_transports(void )// Retrieve list of registered socket transports
#T=stream_get_wrappers
stream_get_wrappers(void )// Retrieve list of registered streams
#T=stream_select
stream_select(resource &read, resource &write, resource &except, int tv_sec [, int tv_usec])// Runs the equivalent of the select() system call on the given arrays of streams with a timeout specified by tv_sec and tv_usec
#T=stream_set_blocking
stream_set_blocking(resource stream, int mode)// Set blocking/non-blocking mode on a stream
#T=stream_set_timeout
stream_set_timeout(resource stream, int seconds [, int microseconds])// Set timeout period on a stream
#T=stream_set_write_buffer
stream_set_write_buffer(resource stream, int buffer)// Sets file buffering on the given stream
#T=stream_socket_accept
stream_socket_accept(resource server_socket [, int timeout [, string &peername]])//  Accept a connection on a socket created by stream_socket_server() 
#T=stream_socket_client
stream_socket_client(string remote_socket [, int &errno [, string &errstr [, float timeout [, int flags [, resource context]]]]])//  Open Internet or Unix domain socket connection 
#T=stream_socket_get_name
stream_socket_get_name(resource handle, bool want_peer)// Retrieve the name of the local or remote sockets
#T=stream_socket_server
stream_socket_server(string local_socket [, int &errno [, string &errstr [, int flags [, resource context]]]])//  Create an Internet or Unix domain server socket 
#T=stream_wrapper_register
stream_wrapper_register(string protocol, string classname)// Register a URL wrapper implemented as a PHP class
#T=strftime
strftime(string format [, int timestamp])//  Formata uma hora/data de acordo com as configurações locais 
#T=strip_tags
strip_tags(string str [, string allowable_tags])// Retira as tags HTML e PHP de uma string
#T=stripcslashes
stripcslashes(string str)//  Desfaz o efeito de addcslashes() 
#T=stripos
stripos(string haystack, string needle [, int offset])//  Find position of first occurrence of a case-insensitive string 
#T=stripslashes
stripslashes(string str)//  Desfaz o efeito de addslashes() 
#T=stristr
stristr(string haystack, string needle)//  Case-insensitive strstr() 
#T=strlen
strlen(string str)// Retorna o tamanho de uma string
#T=strnatcasecmp
strnatcasecmp(string str1, string str2)//  Comparação de strings sem diferenciar maiúsculas/minúsculas usando o algoritmo "natural order" 
#T=strnatcmp
strnatcmp(string str1, string str2)//  Comparação de strings usando o algoritmo "natural order" 
#T=strncasecmp
strncasecmp(string str1, string str2, int len)//  Binary safe case-insensitive string comparison of the first n characters 
#T=strncmp
strncmp(string str1, string str2, int len)//  Comparação de string segura para binário para os primeiros n caracteres 
#T=strpos
strpos(string haystack, string needle [, int offset])//  Encontra a posição da primeira ocorrência de uma string 
#T=strrchr
strrchr(string haystack, string needle)//  Find the last occurrence of a character in a string 
#T=strrev
strrev(string string)// Reverse a string
#T=strripos
strripos(string haystack, string needle)//  Find position of last occurrence of a case-insensitive string in a string 
#T=strrpos
strrpos(string haystack, char needle)//  Find position of last occurrence of a char in a string 
#T=strspn
strspn(string str1, string str2)//  Find length of initial segment matching mask 
#T=strstr
strstr(string haystack, string needle)// Encontra a primeira ocorrencia de uma string
#T=strtok
strtok(string arg1, string arg2)// Tokenize string
#T=strtolower
strtolower(string str)// Converte uma string para minúsculas
#T=strtotime
strtotime(string time [, int now])//  Analisa qualquer descrição em texto em inglês de data hora em timestamp UNIX 
#T=strtoupper
strtoupper(string string)// Converte uma string para maiúsculas
#T=strtr
strtr(string str, string from, string to)// Translate certain characters
#T=strval
strval(mixed var)// Get string value of a variable
#T=substr
substr(string string, int start [, int length])// Retorna uma parte de uma string
#T=substr_count
substr_count(string haystack, string needle)// Conta o número de ocorrências de uma substring
#T=substr_replace
substr_replace(string string, string replacement, int start [, int length])// Replace text within a portion of a string
#T=swf_actiongeturl
swf_actiongeturl(string url, string target)// Get a URL from a Shockwave Flash movie
#T=swf_actiongotoframe
swf_actiongotoframe(int framenumber)// Play a frame and then stop
#T=swf_actiongotolabel
swf_actiongotolabel(string label)//  Display a frame with the specified label 
#T=swf_actionnextframe
swf_actionnextframe(void )// Go foward one frame
#T=swf_actionplay
swf_actionplay(void )//  Start playing the flash movie from the current frame 
#T=swf_actionsettarget
swf_actionsettarget(string target)// Set the context for actions
#T=swf_actionstop
swf_actionstop(void )//  Stop playing the flash movie at the current frame 
#T=swf_actiontogglequality
swf_actiontogglequality(void )//  Toggle between low and high quality 
#T=swf_actionwaitforframe
swf_actionwaitforframe(int framenumber, int skipcount)//  Skip actions if a frame has not been loaded 
#T=swf_addbuttonrecord
swf_addbuttonrecord(int states, int shapeid, int depth)//  Controls location, appearance and active area of the current button 
#T=swf_addcolor
swf_addcolor(float r, float g, float b, float a)//  Set the global add color to the rgba value specified 
#T=swf_closefile
swf_closefile([int return_file])// Close the current Shockwave Flash file
#T=swf_definebitmap
swf_definebitmap(int objid, string image_name)// Define a bitmap
#T=swf_definefont
swf_definefont(int fontid, string fontname)//  Defines a font 
#T=swf_defineline
swf_defineline(int objid, float x1, float y1, float x2, float y2, float width)// Define a line
#T=swf_definepoly
swf_definepoly(int objid, array coords, int npoints, float width)//  Define a polygon 
#T=swf_definerect
swf_definerect(int objid, float x1, float y1, float x2, float y2, float width)// Define a rectangle
#T=swf_definetext
swf_definetext(int objid, string str, int docenter)// Define a text string
#T=swf_endbutton
swf_endbutton(void )//  End the definition of the current button 
#T=swf_enddoaction
swf_enddoaction(void )// End the current action
#T=swf_endshape
swf_endshape(void )//  Completes the definition of the current shape 
#T=swf_endsymbol
swf_endsymbol(void )// End the definition of a symbol
#T=swf_fontsize
swf_fontsize(float size)// Change the font size
#T=swf_fontslant
swf_fontslant(float slant)// Set the font slant
#T=swf_fonttracking
swf_fonttracking(float tracking)// Set the current font tracking
#T=swf_getbitmapinfo
swf_getbitmapinfo(int bitmapid)// Get information about a bitmap
#T=swf_getfontinfo
swf_getfontinfo(void )//  The height in pixels of a capital A and a lowercase x 
#T=swf_getframe
swf_getframe(void )// Get the frame number of the current frame
#T=swf_labelframe
swf_labelframe(string name)// Label the current frame
#T=swf_lookat
swf_lookat(float view_x, float view_y, float view_z, float reference_x, float reference_y, float reference_z, float twist)// Define a viewing transformation
#T=swf_modifyobject
swf_modifyobject(int depth, int how)// Modify an object
#T=swf_mulcolor
swf_mulcolor(float r, float g, float b, float a)//  Sets the global multiply color to the rgba value specified 
#T=swf_nextid
swf_nextid(void )// Returns the next free object id
#T=swf_oncondition
swf_oncondition(int transition)//  Describe a transition used to trigger an action list 
#T=swf_openfile
swf_openfile(string filename, float width, float height, float framerate, float r, float g, float b)// Open a new Shockwave Flash file
#T=swf_ortho
swf_ortho(float xmin, float xmax, float ymin, float ymax, float zmin, float zmax)//  Defines an orthographic mapping of user coordinates onto the current viewport 
#T=swf_ortho2
swf_ortho2(float xmin, float xmax, float ymin, float ymax)//  Defines 2D orthographic mapping of user coordinates onto the current viewport 
#T=swf_perspective
swf_perspective(float fovy, float aspect, float near, float far)//  Define a perspective projection transformation 
#T=swf_placeobject
swf_placeobject(int objid, int depth)// Place an object onto the screen
#T=swf_polarview
swf_polarview(float dist, float azimuth, float incidence, float twist)//  Define the viewer's position with polar coordinates 
#T=swf_popmatrix
swf_popmatrix(void )//  Restore a previous transformation matrix 
#T=swf_posround
swf_posround(int round)//  Enables or Disables the rounding of the translation when objects are placed or moved 
#T=swf_pushmatrix
swf_pushmatrix(void )//  Push the current transformation matrix back unto the stack 
#T=swf_removeobject
swf_removeobject(int depth)// Remove an object
#T=swf_rotate
swf_rotate(float angle, string axis)// Rotate the current transformation
#T=swf_scale
swf_scale(float x, float y, float z)// Scale the current transformation
#T=swf_setfont
swf_setfont(int fontid)// Change the current font
#T=swf_setframe
swf_setframe(int framenumber)// Switch to a specified frame
#T=swf_shapearc
swf_shapearc(float x, float y, float r, float ang1, float ang2)// Draw a circular arc
#T=swf_shapecurveto
swf_shapecurveto(float x1, float y1, float x2, float y2)//  Draw a quadratic bezier curve between two points 
#T=swf_shapecurveto3
swf_shapecurveto3(float x1, float y1, float x2, float y2, float x3, float y3)// Draw a cubic bezier curve
#T=swf_shapefillbitmapclip
swf_shapefillbitmapclip(int bitmapid)//  Set current fill mode to clipped bitmap 
#T=swf_shapefillbitmaptile
swf_shapefillbitmaptile(int bitmapid)//  Set current fill mode to tiled bitmap 
#T=swf_shapefilloff
swf_shapefilloff(void )// Turns off filling
#T=swf_shapefillsolid
swf_shapefillsolid(float r, float g, float b, float a)//  Set the current fill style to the specified color 
#T=swf_shapelinesolid
swf_shapelinesolid(float r, float g, float b, float a, float width)// Set the current line style
#T=swf_shapelineto
swf_shapelineto(float x, float y)// Draw a line
#T=swf_shapemoveto
swf_shapemoveto(float x, float y)// Move the current position
#T=swf_showframe
swf_showframe(void )// Display the current frame
#T=swf_startbutton
swf_startbutton(int objid, int type)// Start the definition of a button
#T=swf_startdoaction
swf_startdoaction(void )//  Start a description of an action list for the current frame 
#T=swf_startshape
swf_startshape(int objid)// Start a complex shape
#T=swf_startsymbol
swf_startsymbol(int objid)// Define a symbol
#T=swf_textwidth
swf_textwidth(string str)// Get the width of a string
#T=swf_translate
swf_translate(float x, float y, float z)// Translate the current transformations
#T=swf_viewport
swf_viewport(float xmin, float xmax, float ymin, float ymax)// Select an area for future drawing
#T=swfaction
swfaction(string script)// Creates a new Action.
#T=swfbitmap
swfbitmap(string filename [, int alphafilename])// Loads Bitmap object
#T=swfbutton
swfbutton(void )// Creates a new Button.
#T=swfbutton_keypress
swfbutton_keypress(string str)//  Returns the action flag for keyPress(char)
#T=swfdisplayitem
swfdisplayitem(void )// Creates a new displayitem object.
#T=SWFFill
SWFFill(void )// Loads SWFFill object
#T=swffont
swffont(string filename)// Loads a font definition
#T=swfgradient
swfgradient(void )// Creates a gradient object
#T=swfmorph
swfmorph(void )// Creates a new SWFMorph object.
#T=swfmovie
swfmovie(void )// Creates a new movie object, representing an SWF version 4 movie.
#T=swfshape
swfshape(void )// Creates a new shape object.
#T=swfsprite
swfsprite(void )// Creates a movie clip (a sprite)
#T=swftext
swftext(void )// Creates a new SWFText object.
#T=swftextfield
swftextfield([int flags])// Creates a text field object
#T=sybase_affected_rows
sybase_affected_rows([int link_identifier])// informa o número de linhas afetadas pela última consulta
#T=sybase_close
sybase_close(int link_identifier)// fecha uma conexão Sybase
#T=sybase_connect
sybase_connect(string servername, string username, string password [, string charset])// abre uma conexão Sybase
#T=sybase_data_seek
sybase_data_seek(resource result_identifier, int row_number)// Moves internal row pointer
#T=sybase_deadlock_retry_count
sybase_deadlock_retry_count(int retry_count)// Sets the deadlock retry count
#T=sybase_fetch_array
sybase_fetch_array(resource result)// Fetch row as array
#T=sybase_fetch_assoc
sybase_fetch_assoc(resource result)// Fetch a result row as an associative array
#T=sybase_fetch_field
sybase_fetch_field(resource result [, int field_offset])// Get field information from a result
#T=sybase_fetch_object
sybase_fetch_object(resource result [, mixed object])// Fetch a row as an object
#T=sybase_fetch_row
sybase_fetch_row(resource result)// Get a result row as an enumerated array
#T=sybase_field_seek
sybase_field_seek(resource result, int field_offset)// Sets field offset
#T=sybase_free_result
sybase_free_result(resource result)// Frees result memory
#T=sybase_get_last_message
sybase_get_last_message(void )// Returns the last message from the server
#T=sybase_min_client_severity
sybase_min_client_severity(int severity)// Sets minimum client severity
#T=sybase_min_error_severity
sybase_min_error_severity(int severity)// Sets minimum error severity
#T=sybase_min_message_severity
sybase_min_message_severity(int severity)// Sets minimum message severity
#T=sybase_min_server_severity
sybase_min_server_severity(int severity)// Sets minimum server severity
#T=sybase_num_fields
sybase_num_fields(resource result)// Gets the number of fields in a result set
#T=sybase_num_rows
sybase_num_rows(resource result)// Get number of rows in a result set
#T=sybase_pconnect
sybase_pconnect([string servername [, string username [, string password [, string charset [, string appname]]]]])// Open persistent Sybase connection
#T=sybase_query
sybase_query(string query, resource link_identifier)// Sends a Sybase query
#T=sybase_result
sybase_result(resource result, int row, mixed field)// Get result data
#T=sybase_select_db
sybase_select_db(string database_name [, resource link_identifier])// Selects a Sybase database
#T=sybase_set_message_handler
sybase_set_message_handler(callback handler)// Sets the handler called when a server message is raised
#T=sybase_unbuffered_query
sybase_unbuffered_query(string query, resource link_identifier)// Send a Sybase query and do not block
#T=symlink
symlink(string alvo, string link)// Cria um link simbólico
#T=syslog
syslog(int priority, string message)// Generate a system log message
#T=system
system(string command [, int return_var])// Execute an external program and display output
#T=tan
tan(float arg)// Tangente
#T=tanh
tanh(float arg)// Tangente hiperbólica
#T=tempnam
tempnam(string dir, string prefix)// Cria um nome de arquivo único
#T=textdomain
textdomain(string text_domain)// Seta o domínio padrão
#T=hour
hour(void )// Retorna o timestamp UNIX 
#T=arqtmp
arqtmp(void )// Cria um arquivo temporário
#T=token_get_all
token_get_all(string source)// Split given source into PHP tokens
#T=token_name
token_name(int token)// Get the symbolic name of a given PHP token
#T=touch
touch(string filename [, int time [, int atime]])// Muda o tempo de modificação do arquivo
#T=trigger_error
trigger_error(string error_msg [, int error_type])//  Generates a user-level error/warning/notice message 
#T=trim
trim(string str [, string charlist])//  Strip whitespace from the beginning and end of a string 
#T=uasort
uasort(array array, function cmp_function)//  Ordena um array utilizando uma função de comparação definida pelo usuário e mantendo as associações entre chaves e valores 
#T=ucfirst
ucfirst(string str)// Make a string's first character uppercase
#T=ucwords
ucwords(string str)//  Uppercase the first character of each word in a string 
#T=udm_add_search_limit
udm_add_search_limit(resource agent, int var, string val)// Add various search limits
#T=udm_alloc_agent
udm_alloc_agent(string dbaddr [, string dbmode])// Allocate mnoGoSearch session
#T=udm_api_version
udm_api_version(void )// Get mnoGoSearch API version.
#T=udm_cat_list
udm_cat_list(resource agent, string category)// Get all the categories on the same level with the current one.
#T=udm_cat_path
udm_cat_path(resource agent, string category)// Get the path to the current category.
#T=udm_check_charset
udm_check_charset(resource agent, string charset)//  Check if the given charset is known to mnogosearch 
#T=udm_check_stored
udm_check_stored(resource agent, int link, string doc_id)//  Check connection to stored 
#T=udm_clear_search_limits
udm_clear_search_limits(resource agent)// Clear all mnoGoSearch search restrictions
#T=udm_close_stored
udm_close_stored(resource agent, int link)//  Close connection to stored 
#T=udm_crc32
udm_crc32(resource agent, string str)//  Return CRC32 checksum of gived string 
#T=udm_errno
udm_errno(resource agent)// Get mnoGoSearch error number
#T=udm_error
udm_error(resource agent)// Get mnoGoSearch error message
#T=udm_find
udm_find(resource agent, string query)// Perform search
#T=udm_free_agent
udm_free_agent(resource agent)// Free mnoGoSearch session
#T=udm_free_ispell_data
udm_free_ispell_data(int agent)// Free memory allocated for ispell data
#T=udm_free_res
udm_free_res(resurce res)// Free mnoGoSearch result
#T=udm_get_doc_count
udm_get_doc_count(resource agent)// Get total number of documents in database.
#T=udm_get_res_field
udm_get_res_field(resource res, int row, int field)// Fetch mnoGoSearch result field
#T=udm_get_res_param
udm_get_res_param(resource res, int param)// Get mnoGoSearch result parameters
#T=udm_load_ispell_data
udm_load_ispell_data(resource agent, int var, string val1, string val2, int flag)// Load ispell data
#T=udm_open_stored
udm_open_stored(resource agent, string storedaddr)//  Open connection to stored 
#T=udm_set_agent_param
udm_set_agent_param(resource agent, int var, string val)// Set mnoGoSearch agent session parameters
#T=uksort
uksort(array array, function cmp_function)//  Ordena um array pelas chaves utilizando uma função de comparação definida pelo usuário. 
#T=umask
umask([int mask])// Modificar a umask atual
#T=uniqid
uniqid(string prefix [, bool lcg])// Gera um ID unico
#T=unixtojd
unixtojd([int timestamp])// Convert UNIX timestamp to Julian Day
#T=unlink
unlink(string nomedoarquivo)// Deleta um arquivo
#T=unpack
unpack(string format, string data)// Unpack data from binary string
#T=unregister_tick_function
unregister_tick_function(string function_name)//  De-register a function for execution on each tick 
#T=unserialize
unserialize(string str [, string callback])//  Creates a PHP value from a stored representation 
#T=unset
unset(mixed var [, mixed var [, ...]])// Unset a given variable
#T=urldecode
urldecode(string str)// Decodifica uma URL codificada
#T=urlencode
urlencode(string str)// Codifica uma string URL
#T=usleep
usleep(int micro_seconds)// Atrasa a execução em milionésimos de segundo
#T=usort
usort(array array, string cmp_function)//  Ordena um array pelos valores utilizando uma função de comparação definida pelo usuário 
#T=utf8_decode
utf8_decode(string data)//  Converts a string with ISO-8859-1 characters encoded with UTF-8 to single-byte ISO-8859-1. 
#T=utf8_encode
utf8_encode(string data)// encodes an ISO-8859-1 string to UTF-8
#T=var_dump
var_dump(mixed expression [, mixed expression [, ...]])// Dumps information about a variable
#T=var_export
var_export(mixed expression [, bool return])// Outputs or returns a string representation of a variable
#T=version_compare
version_compare(string version1, string version2 [, string operator])//  Compares two "PHP-standardized" version number strings
#T=virtual
virtual(string filename)// Realiza uma sub-requisição no Apache
#T=vpopmail_add_alias_domain
vpopmail_add_alias_domain(string domain, string aliasdomain)// Add an alias for a virtual domain
#T=vpopmail_add_alias_domain_ex
vpopmail_add_alias_domain_ex(string olddomain, string newdomain)// Add alias to an existing virtual domain
#T=vpopmail_add_domain
vpopmail_add_domain(string domain, string dir, int uid, int gid)// Add a new virtual domain
#T=vpopmail_add_domain_ex
vpopmail_add_domain_ex(string domain, string passwd [, string quota [, string bounce [, bool apop]]])// Add a new virtual domain
#T=vpopmail_add_user
vpopmail_add_user(string user, string domain, string password [, string gecos [, bool apop]])// Add a new user to the specified virtual domain
#T=vpopmail_alias_add
vpopmail_alias_add(string user, string domain, string alias)// insert a virtual alias
#T=vpopmail_alias_del
vpopmail_alias_del(string user, string domain)// deletes all virtual aliases of a user
#T=vpopmail_alias_del_domain
vpopmail_alias_del_domain(string domain)// deletes all virtual aliases of a domain
#T=vpopmail_alias_get
vpopmail_alias_get(string alias, string domain)// get all lines of an alias for a domain
#T=vpopmail_alias_get_all
vpopmail_alias_get_all(string domain)// get all lines of an alias for a domain
#T=vpopmail_auth_user
vpopmail_auth_user(string user, string domain, string password [, string apop])// Attempt to validate a username/domain/password. Returns true/false
#T=vpopmail_del_domain
vpopmail_del_domain(string domain)// Delete a virtual domain
#T=vpopmail_del_domain_ex
vpopmail_del_domain_ex(string domain)// Delete a virtual domain
#T=vpopmail_del_user
vpopmail_del_user(string user, string domain)// Delete a user from a virtual domain
#T=vpopmail_error
vpopmail_error(void )// Get text message for last vpopmail error. Returns string
#T=vpopmail_passwd
vpopmail_passwd(string user, string domain, string password)// Change a virtual user's password
#T=vpopmail_set_user_quota
vpopmail_set_user_quota(string user, string domain, string quota)// Sets a virtual user's quota
#T=vprintf
vprintf(string format, array args)// Output a formatted string
#T=vsprintf
vsprintf(string format, array args)// Return a formatted string
#T=w32api_deftype
w32api_deftype(string typename, string member1_type, string member1_name [, string ... [, string ...]])// Defines a type for use with other w32api_functions
#T=w32api_init_dtype
w32api_init_dtype(string typename, mixed value [, mixed ...])//  Creates an instance of the data type typename and fills it with the values passed 
#T=w32api_invoke_function
w32api_invoke_function(string funcname, mixed argument [, mixed ...])// Invokes function funcname with the arguments passed after the function name
#T=w32api_register_function
w32api_register_function(string library, string function_name, string return_type)// Registers function function_name from library with PHP
#T=w32api_set_call_method
w32api_set_call_method(int method)// Sets the calling method used
#T=wddx_add_vars
wddx_add_vars(int packet_id, mixed name_var [, mixed ...])//  Add variables to a WDDX packet with the specified ID 
#T=wddx_deserialize
wddx_deserialize(string packet)// Deserializes a WDDX packet
#T=wddx_packet_end
wddx_packet_end(int packet_id)// Ends a WDDX packet with the specified ID
#T=wddx_packet_start
wddx_packet_start([string comment])//  Starts a new WDDX packet with structure inside it 
#T=wddx_serialize_value
wddx_serialize_value(mixed var [, string comment])// Serialize a single value into a WDDX packet
#T=wddx_serialize_vars
wddx_serialize_vars(mixed var_name [, mixed ...])// Serialize variables into a WDDX packet
#T=wordwrap
wordwrap(string str [, int width [, string break [, boolean cut]]])//  Quebra uma string em linhas usando um caractere de quebra de linha. 
#T=xml_error_string
xml_error_string(int code)// get XML parser error string
#T=xml_get_current_byte_index
xml_get_current_byte_index(resource parser)// get current byte index for an XML parser
#T=xml_get_current_column_number
xml_get_current_column_number(resource parser)//  Get current column number for an XML parser 
#T=xml_get_current_line_number
xml_get_current_line_number(resource parser)// get current line number for an XML parser
#T=xml_get_error_code
xml_get_error_code(resource parser)// get XML parser error code
#T=xml_parse
xml_parse(resource parser, string data [, bool is_final])// start parsing an XML document
#T=xml_parse_into_struct
xml_parse_into_struct(resource parser, string data, array &values [, array &index])// Parse XML data into an array structure
#T=xml_parser_create
xml_parser_create([string encoding])// create an XML parser
#T=xml_parser_create_ns
xml_parser_create_ns([string encoding [, string separator]])//  Create an XML parser with namespace support 
#T=xml_parser_free
xml_parser_free(resource parser)// Free an XML parser
#T=xml_parser_get_option
xml_parser_get_option(resource parser, int option)// get options from an XML parser
#T=xml_parser_set_option
xml_parser_set_option(resource parser, int option, mixed value)// set options in an XML parser
#T=xml_set_character_data_handler
xml_set_character_data_handler(resource parser, callback handler)// set up character data handler
#T=xml_set_default_handler
xml_set_default_handler(resource parser, callback handler)// set up default handler
#T=xml_set_element_handler
xml_set_element_handler(resource parser, callback start_element_handler, callback end_element_handler)// set up start and end element handlers
#T=xml_set_end_namespace_decl_handler
xml_set_end_namespace_decl_handler(resource pind, callback handler)//  Set up character data handler 
#T=xml_set_external_entity_ref_handler
xml_set_external_entity_ref_handler(resource parser, callback handler)// set up external entity reference handler
#T=xml_set_notation_decl_handler
xml_set_notation_decl_handler(resource parser, callback handler)// set up notation declaration handler
#T=xml_set_object
xml_set_object(resource parser, object object)// Use XML Parser within an object
#T=xml_set_processing_instruction_handler
xml_set_processing_instruction_handler(resource parser, callback handler)//  Set up processing instruction (PI) handler 
#T=xml_set_start_namespace_decl_handler
xml_set_start_namespace_decl_handler(resource pind, callback hdl)//  Set up character data handler 
#T=xml_set_unparsed_entity_decl_handler
xml_set_unparsed_entity_decl_handler(resource parser, callback handler)//  Set up unparsed entity declaration handler 
#T=xmlrpc_decode
xmlrpc_decode(string xml [, string encoding])// Decodes XML into native PHP types
#T=xmlrpc_decode_request
xmlrpc_decode_request(string xml, string method [, string encoding])// Decodes XML into native PHP types
#T=xmlrpc_encode
xmlrpc_encode(mixed value)// Generates XML for a PHP value
#T=xmlrpc_encode_request
xmlrpc_encode_request(string method, mixed params)// Generates XML for a method request
#T=xmlrpc_get_type
xmlrpc_get_type(mixed value)// Gets xmlrpc type for a PHP value. Especially useful for base64 and datetime strings
#T=xmlrpc_parse_method_descriptions
xmlrpc_parse_method_descriptions(string xml)// Decodes XML into a list of method descriptions
#T=xmlrpc_server_add_introspection_data
xmlrpc_server_add_introspection_data(resource server, array desc)// Adds introspection documentation
#T=xmlrpc_server_call_method
xmlrpc_server_call_method(resource server, string xml, mixed user_data [, array output_options])// Parses XML requests and call methods
#T=xmlrpc_server_create
xmlrpc_server_create(void )// Creates an xmlrpc server
#T=xmlrpc_server_destroy
xmlrpc_server_destroy(resource server)// Destroys server resources
#T=xmlrpc_server_register_introspection_callback
xmlrpc_server_register_introspection_callback(resource server, string function)// Register a PHP function to generate documentation
#T=xmlrpc_server_register_method
xmlrpc_server_register_method(resource server, string method_name, string function)// Register a PHP function to resource method matching method_name
#T=xmlrpc_set_type
xmlrpc_set_type(string value, string type)// Sets xmlrpc type, base64 or datetime, for a PHP string value
#T=xpath_eval
xpath_eval(object xpath context, string xpath expression [, object contextnode])//  Evaluates the XPath Location Path in the given string 
#T=xpath_eval_expression
xpath_eval_expression(object xpath_context)//  Evaluates the XPath Location Path in the given string 
#T=xpath_new_context
xpath_new_context(object dom document)//  Creates new xpath context 
#T=xptr_eval
xptr_eval([object xpath_context, string eval_str])//  Evaluate the XPtr Location Path in the given string 
#T=xptr_new_context
xptr_new_context([object doc_handle])//  Create new XPath Context 
#T=xslt_create
xslt_create(void )// Create a new XSLT processor
#T=xslt_errno
xslt_errno(resource xh)// Returns an error number
#T=xslt_error
xslt_error(resource xh)// Returns an error string
#T=xslt_free
xslt_free(resource xh)// Free XSLT processor
#T=xslt_process
xslt_process(resource xh, string xmlcontainer, string xslcontainer [, string resultcontainer [, array arguments [, array parameters]]])// Perform an XSLT transformation
#T=xslt_set_base
xslt_set_base(resource xh, string uri)// Set the base URI for all XSLT transformations
#T=xslt_set_encoding
xslt_set_encoding(resource xh, string encoding)// Set the encoding for the parsing of XML documents
#T=xslt_set_error_handler
xslt_set_error_handler(resource xh, mixed handler)// Set an error handler for a XSLT processor
#T=xslt_set_log
xslt_set_log(resource xh, mixed log)// Set the log file to write log messages to
#T=xslt_set_sax_handler
xslt_set_sax_handler(resource xh, array handlers)// Set SAX handlers for a XSLT processor
#T=xslt_set_sax_handlers
xslt_set_sax_handlers(resource processor, array handlers)//  Set the SAX handlers to be called when the XML document gets processed 
#T=xslt_set_scheme_handler
xslt_set_scheme_handler(resource xh, array handlers)// Set Scheme handlers for a XSLT processor
#T=xslt_set_scheme_handlers
xslt_set_scheme_handlers(resource processor, array handlers)//  Set the scheme handlers for the XSLT processor 
#T=yaz_addinfo
yaz_addinfo(resource id)// Returns additional error information
#T=yaz_ccl_conf
yaz_ccl_conf(resource id, array config)// Configure CCL parser
#T=yaz_ccl_parse
yaz_ccl_parse(resource id, string query, array & result)// Invoke CCL Parser
#T=yaz_close
yaz_close(resource id)// Close YAZ connection
#T=yaz_connect
yaz_connect(string zurl [, mixed options])//  Prepares for a connection to a Z39.50 target (server). 
#T=yaz_database
yaz_database(resource id, string databases)//  Specifies the databases within a session 
#T=yaz_element
yaz_element(resource id, string elementset)//  Specifies Element-Set Name for retrieval 
#T=yaz_errno
yaz_errno(resource id)// Returns error number
#T=yaz_error
yaz_error(resource id)// Returns error description
#T=yaz_get_option
yaz_get_option(resource id, string name)// Returns value of option for connection
#T=yaz_hits
yaz_hits(resource id)// Returns number of hits for last search
#T=yaz_itemorder
yaz_itemorder(resource id, array args)//  Prepares for Z39.50 Item Order with an ILL-Request package 
#T=yaz_present
yaz_present(resource id)//  Prepares for retrieval (Z39.50 present). 
#T=yaz_range
yaz_range(resource id, int start, int number)//  Specifies the maximum number of records to retrieve 
#T=yaz_record
yaz_record(resource id, int pos, string type)// Returns a record
#T=yaz_scan
yaz_scan(resource id, string type, string startterm [, array flags])// Prepares for a scan
#T=yaz_scan_result
yaz_scan_result(resource id [, array & result])// Returns Scan Response result
#T=yaz_schema
yaz_schema(resource id, string schema)//  Specifies schema for retrieval. 
#T=yaz_set_option
yaz_set_option(resource id, string name, string value)// Sets one or more options for connection
#T=yaz_sort
yaz_sort(resource id, string criteria)// Sets sorting criteria
#T=yaz_syntax
yaz_syntax(resource id, string syntax)//  Specifies the preferred record syntax for retrieval. 
#T=yaz_wait
yaz_wait([array options])// Wait for Z39.50 requests to complete
#T=yp_all
yp_all(string domain, string map, string callback)//  Traverse the map and call a function on each entry 
#T=yp_cat
yp_cat(string domain, string map)//  Return an array containing the entire map 
#T=yp_err_string
yp_err_string(int errorcode)//  Returns the error string associated with the given error code 
#T=yp_errno
yp_errno(void )//  Returns the error code of the previous operation 
#T=yp_first
yp_first(string domain, string map)//  Returns the first key-value pair from the named map 
#T=yp_get_default_domain
yp_get_default_domain(void )// Fetches the machine's default NIS domain
#T=yp_master
yp_master(string domain, string map)//  Returns the machine name of the master NIS server for a map 
#T=yp_match
yp_match(string domain, string map, string key)// Returns the matched line
#T=yp_next
yp_next(string domain, string map, string key)// Returns the next key-value pair in the named map.
#T=yp_order
yp_order(string domain, string map)// Returns the order number for a map
#T=zend_logo_guid
zend_logo_guid(void )// Gets the zend guid
#T=zend_version
zend_version(void )// Gets the version of the current Zend engine
#T=zip_close
zip_close(resource zip)// Close a Zip File Archive
#T=zip_entry_close
zip_entry_close(resource zip_entry)// Close a Directory Entry
#T=zip_entry_compressedsize
zip_entry_compressedsize(resource zip_entry)// Retrieve the Compressed Size of a Directory Entry
#T=zip_entry_compressionmethod
zip_entry_compressionmethod(resource zip_entry)// Retrieve the Compression Method of a Directory Entry
#T=zip_entry_filesize
zip_entry_filesize(resource zip_entry)// Retrieve the Actual File Size of a Directory Entry
#T=zip_entry_name
zip_entry_name(resource zip_entry)// Retrieve the Name of a Directory Entry
#T=zip_entry_open
zip_entry_open(resource zip, resource zip_entry [, string mode])// Open a Directory Entry for Reading
#T=zip_entry_read
zip_entry_read(resource zip_entry [, int length])// Read From an Open Directory Entry
#T=zip_open
zip_open(string filename)// Open a Zip File Archive
#T=zip_read
zip_read(resource zip)// Read Next Entry in a Zip File Archive
#T=zlib_get_coding_type
zlib_get_coding_type(void )// Returns the coding type used for output compression
#T=include
include(string arquivo )// Inclui e avalia um arquivo
#T=require
require(string arquivo )// Inclui e avalia um arquivo
#T=include_once
include_once(string arquivo )// Inclui um arquivo apenas uma vez no script
#T=require_once
require_once(string arquivo )// Inclui um arquivo apenas uma vez no script
#